### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    summary: "<span data-ttu-id=\"d6a80-101\">Collection étendue de parties XML personnalisées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-101\">A scoped collection of custom XML parts.</span></span> <span data-ttu-id=\"d6a80-102\">Une collection d’étendues est le résultat d’une opération, par exemple, le filtrage par espace de noms.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-102\">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id=\"d6a80-103\">Une collection d’étendues ne peut pas être étendue.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-103\">A scoped collection cannot be scoped any further.</span></span>\n\n<span data-ttu-id=\"d6a80-104\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-104\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.CustomXmlPartScopedCollection
    fullName: Excel.CustomXmlPartScopedCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartScopedCollection#context:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#items:member'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(2)'
      - 'excel!Excel.CustomXmlPartScopedCollection#load:member(3)'
      - 'excel!Excel.CustomXmlPartScopedCollection#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#context:member'
    summary: <span data-ttu-id="d6a80-105">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="d6a80-105">The request context associated with the object.</span></span> <span data-ttu-id="d6a80-106">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="d6a80-106">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount:member(1)'
    summary: "<span data-ttu-id=\"d6a80-107\">Obtient le nombre de parties CustomXML dans cette collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-107\">Gets the number of CustomXML parts in this collection.</span></span>\n\n<span data-ttu-id=\"d6a80-108\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-108\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d6a80-109">Exemples</span><span class="sxs-lookup"><span data-stu-id="d6a80-109">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"d6a80-110\">Obtient une partie XML personnalisée en fonction de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-110\">Gets a custom XML part based on its ID.</span></span>\n\n<span data-ttu-id=\"d6a80-111\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-111\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="d6a80-112">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="d6a80-112">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getItemOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"d6a80-113\">Obtient une partie XML personnalisée en fonction de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-113\">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id=\"d6a80-114\">Si l’objet CustomXmlPart n’existe pas, la propriété isNull de l’objet renvoie la valeur true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-114\">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>\n\n<span data-ttu-id=\"d6a80-115\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-115\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d6a80-116">Exemples</span><span class="sxs-lookup"><span data-stu-id="d6a80-116">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);
                  const xmlBlob = customXmlPart.getXml();
                  customXmlPart.delete();
                  customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);

                  await context.sync();

                  if (customXmlPart.isNullObject) {
                      $("#display-xml").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);

                      // Delete the unneeded setting too.
                      xmlPartIDSetting.delete();            
                  } else {
                      const readableXml = addLineBreaksToXML(xmlBlob.value);
                      const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\n${readableXml}`
                      $("#display-xml").text(strangeMessage);
                  }

                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="d6a80-117">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="d6a80-117">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItem:member(1)'
    summary: "<span data-ttu-id=\"d6a80-118\">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-118\">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id=\"d6a80-119\">Dans le cas contraire, cette méthode génère une erreur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-119\">Otherwise, this method produces an error.</span></span>\n\n<span data-ttu-id=\"d6a80-120\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-120\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getOnlyItem()
    fullName: getOnlyItem()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItem(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="d6a80-121">Exemples</span><span class="sxs-lookup"><span data-stu-id="d6a80-121">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getOnlyItemOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"d6a80-122\">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-122\">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id=\"d6a80-123\">Dans le cas contraire, cette méthode renvoie la valeur null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-123\">Otherwise, this method returns Null.</span></span>\n\n<span data-ttu-id=\"d6a80-124\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-124\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getOnlyItemOrNullObject()
    fullName: getOnlyItemOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items:member'
    summary: <span data-ttu-id="d6a80-125">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="d6a80-125">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(1)'
    summary: "<span data-ttu-id=\"d6a80-126\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-126\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"d6a80-127\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-127\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: "<span data-ttu-id=\"d6a80-128\">En plus de cette signature, cette méthode possède les signatures suivantes\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-128\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"d6a80-129\">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-129\">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>\n\n<span data-ttu-id=\"d6a80-130\">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-130\">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"d6a80-131\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-Uniquement disponible sur les types de collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-131\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"d6a80-132\">Elle est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-132\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"d6a80-133\">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-133\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"d6a80-134\">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-134\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"d6a80-135\">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-135\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>"
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.CustomXmlPartScopedCollection#load~0:complex'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(2)'
    summary: <span data-ttu-id="d6a80-136">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="d6a80-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d6a80-137">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="d6a80-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="d6a80-138">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="d6a80-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"d6a80-139\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-139\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"d6a80-140\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-140\"></span></span> <span data-ttu-id=\"d6a80-141\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-141\"></span></span><!-- --><span data-ttu-id=\"d6a80-142\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.CustomXmlPartScopedCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.CustomXmlPartScopedCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-142\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`</span></span><!-- --><span data-ttu-id=\"d6a80-143\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d6a80-143\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: Excel.CustomXmlPartScopedCollection
  - uid: 'excel!Excel.CustomXmlPartScopedCollection#load~0:complex'
    name: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions:interface'
        name: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions
        fullName: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.CustomXmlPartScopedCollectionData:interface'
    name: Excel.Interfaces.CustomXmlPartScopedCollectionData