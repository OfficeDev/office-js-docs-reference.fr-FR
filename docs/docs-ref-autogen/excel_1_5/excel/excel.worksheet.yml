### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:class
package: excel!
fullName: Excel.Worksheet
summary: >-
  Une feuille de calcul Excel est une grille de cellules. Il peut contenir des données, des tableaux, des graphiques, etc. Pour en savoir plus sur le modèle objet de feuille de calcul, lisez Work [with worksheets using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.


  \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: >-
    Renvoie une collection de graphiques qui font partie de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: Excel.ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:class" />
- name: context
  uid: excel!Excel.Worksheet#context:member
  package: excel!
  fullName: context
  summary: Contexte de demande associé à l’objet. Cela connecte le processus du add-in au processus de l’application hôte Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: >-
    Renvoie une valeur qui permet d’identifier la feuille de calcul de façon unique dans un classeur donné. La valeur de l’identificateur reste identique, même lorsque la feuille de calcul est renommée ou déplacée.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: >-
    Nom complet de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: >-
    Collection de noms inclus dans l’étendue de la feuille de calcul active.


    \[[Ensemble d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: Excel.NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:class" />
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: >-
    Collection de tableaux croisés dynamiques qui font partie de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: Excel.PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/38-pivottable/pivottable-get-pivottables.yaml\nawait Excel.run(async (context) => {\n  // Get the names of all the PivotTables in the current worksheet.\n  const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;\n  pivotTables.load(\"name\");\n  await context.sync();\n\n  // Display the names in the console.\n  console.log(\"PivotTables in the current worksheet:\")\n  pivotTables.items.forEach((pivotTable) => {\n    console.log(`\\t${pivotTable.name}`);\n  });\n});\n```"
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: >-
    Position de la feuille de calcul au sein du classeur (sur une base zéro).


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Set worksheet position. \nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.position = 2;\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: >-
    Renvoie un objet de protection de feuille pour une feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: Excel.WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function(ctx) {\n  // get a reference to Sheet1\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n\n  // Protect inserting or deleting rows in Sheet1\n  sheet.protection.protect({\n    allowInsertRows: false,\n    allowDeleteRows: false\n  });\n\n  return ctx.sync();\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Unprotecting a worksheet with unprotect() will remove all \n// WorksheetProtectionOptions options applied to a worksheet.\n// To remove only a subset of WorksheetProtectionOptions use the \n// protect() method and set the options you wish to remove to true.\nExcel.run(function(ctx) {\n  var sheet = ctx.workbook.worksheets.getItem(\"Sheet1\");\n  sheet.protection.protect({\n    allowInsertRows: false, // Protect row insertion\n    allowDeleteRows: true // Unprotect row deletion\n  });\n});\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: >-
    Collection de tableaux qui font partie de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: Excel.TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:class" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: >-
    Visibilité de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.1 pour](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) la visibilité de lecture ; 1,2 pour le définir. \]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: >-
    Active la feuille de calcul dans l’interface utilisateur Excel.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.activate();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Supprime la feuille de calcul du classeur. Notez que si la visibilité de la feuille de calcul est définie sur « VeryHidden », l’opération de suppression échoue avec une `InvalidOperation` exception. Vous devez d’abord modifier sa visibilité pour la rendre masquée ou visible avant de la supprimer.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: >-
    Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne. La cellule peut se trouver en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    parameters:
    - id: row
      description: Numéro de ligne de la cellule à récupérer. Avec indice zéro.
      type: number
    - id: column
      description: Numéro de colonne de la cellule à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var cell = worksheet.getCell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: >-
    Obtient la feuille de calcul qui suit celle-ci. Si aucune feuille de calcul ne suit celle-ci, cette méthode envoie une erreur.


    \[[Ensemble d’API : ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Facultatif. Si la valeur est true, ne considère que les feuilles de calcul visibles, en ignorer les feuilles masquées.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: >-
    Obtient la feuille de calcul qui suit celle-ci. Si aucune feuille de calcul ne suit celle-ci, cette méthode retourne un objet null.


    \[[Ensemble d’API : ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Facultatif. Si la valeur est true, ne considère que les feuilles de calcul visibles, en ignorer les feuilles masquées.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: >-
    Obtient la feuille de calcul qui précède celle-ci. S’il n’existe aucune feuille de calcul précédente, cette méthode envoie une erreur.


    \[[Ensemble d’API : ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Facultatif. Si la valeur est true, ne considère que les feuilles de calcul visibles, en ignorer les feuilles masquées.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/54-worksheet/reference-worksheets-by-relative-position.yaml\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n    const currentSheet = sheets.getActiveWorksheet();\n    const previousYearSheet = currentSheet.getPrevious();\n    const currentTaxDueRange = currentSheet.getRange(\"C2\");\n    const previousTaxDueRange = previousYearSheet.getRange(\"C2\");\n\n    currentSheet.load(\"name\");\n    previousYearSheet.load(\"name\");\n    currentTaxDueRange.load(\"text\");\n    previousTaxDueRange.load(\"text\");\n\n    await context.sync();\n\n    let currentYear = currentSheet.name.substr(5, 4);\n    let previousYear = previousYearSheet.name.substr(5, 4);\n    console.log(\"Two Year Tax Due Comparison\", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: >-
    Obtient la feuille de calcul qui précède celle-ci. S’il n’existe aucune feuille de calcul précédente, cette méthode retourne un objet null.


    \[[Ensemble d’API : ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
    parameters:
    - id: visibleOnly
      description: Facultatif. Si la valeur est true, ne considère que les feuilles de calcul visibles, en ignorer les feuilles masquées.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: >-
    Obtient l’objet de plage, qui représente un seul bloc rectangulaire de cellules, spécifié par l’adresse ou le nom.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Excel.Range;'
    parameters:
    - id: address
      description: Facultatif. Chaîne représentant l’adresse ou le nom de la plage. Par exemple, « A1:B2 ». Si cette propriété n’est pas définie, la plage de la feuille de calcul toute entière est renvoyée.
      type: string
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeName = 'MyRange';\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: >-
    La plage utilisée est la plus petite plage qui englobe toutes les cellules auxquelles une valeur ou un format est affecté. Si la feuille de calcul entière est vide, cette fonction retourne la cellule supérieure gauche (c’est-à-dire qu’elle ne lance *pas* d’erreur).


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: 'Facultatif. Si la valeur est True, ne tient compte que des cellules avec des valeurs utilisées (en ignorant la mise en forme). \[Ensemble d’api : ExcelApi 1.2\]'
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    var usedRange = worksheet.getUsedRange();\n    usedRange.load('address');\n    return ctx.sync().then(function() {\n            console.log(usedRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: >-
    La plage utilisée est la plus petite plage qui englobe toutes les cellules auxquelles une valeur ou un format est affecté. Si la feuille de calcul entière est vide, cette fonction renvoie un objet null.


    \[[Ensemble d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    parameters:
    - id: valuesOnly
      description: Facultatif. Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
    parameters:
    - id: options
      description: Fournit des options pour lesquelles les propriétés de l’objet à charger.
      type: <xref uid="excel!Excel.Interfaces.WorksheetLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
    parameters:
    - id: propertyNames
      description: Chaîne délimitée par des virgules ou tableau de chaînes spécifiant les propriétés à charger.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Get worksheet properties based on sheet name.\nExcel.run(function (ctx) { \n    var wSheetName = 'Sheet1';\n    var worksheet = ctx.workbook.worksheets.getItem(wSheetName);\n    worksheet.load('position')\n    return ctx.sync().then(function() {\n            console.log(worksheet.position);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.Worksheet#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.Worksheet;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et est une chaîne délimitée par des virgules qui spécifie les propriétés de `propertyNamesAndPaths.expand` navigation à charger.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.Worksheet:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.Worksheet#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Définit plusieurs propriétés d’un objet en même temps. Vous pouvez transmettre un objet simple avec les propriétés appropriées ou un autre objet API du même type.
  remarks: >-
    Cette méthode possède la signature supplémentaire suivante :


    `set(properties: Excel.Worksheet): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Objet JavaScript avec des propriétés structurées de manière isomorphe aux propriétés de l’objet sur lequel la méthode est appelée.
      type: <xref uid="excel!Excel.Interfaces.WorksheetUpdateData:interface" />
    - id: options
      description: Fournit une option pour supprimer les erreurs si l’objet propriétés tente de définir des propriétés en lecture seule.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.Worksheet#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.Worksheet): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.Worksheet:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.Worksheet#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Remplace la méthode JavaScript afin de fournir une sortie plus utile lorsqu’un objet `toJSON()` API est transmis à `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est transmis.) Alors que l’objet Excel.Worksheet d’origine est un objet API, la méthode renvoie un objet `toJSON` JavaScript simple (tapé sous la forme `Excel.Interfaces.WorksheetData`<!-- -->) qui contient des copies superficiels de toutes les propriétés enfants chargées à partir de l’objet d’origine.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.WorksheetData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 839890a2b4abc32f086d151f110748a44fd3b5c4
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51324310"
