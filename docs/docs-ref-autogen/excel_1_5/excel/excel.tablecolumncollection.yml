### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableColumnCollection:class'
    summary: "<span data-ttu-id=\"ce04a-101\">Représente une collection de toutes les colonnes du tableau.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-101\">Represents a collection of all the columns that are part of the table.</span></span>\n\n<span data-ttu-id=\"ce04a-102\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-102\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.TableColumnCollection
    fullName: Excel.TableColumnCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableColumnCollection#add:member(1)'
      - 'excel!Excel.TableColumnCollection#context:member'
      - 'excel!Excel.TableColumnCollection#count:member'
      - 'excel!Excel.TableColumnCollection#getCount:member(1)'
      - 'excel!Excel.TableColumnCollection#getItem:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableColumnCollection#items:member'
      - 'excel!Excel.TableColumnCollection#load:member(1)'
      - 'excel!Excel.TableColumnCollection#load:member(2)'
      - 'excel!Excel.TableColumnCollection#load:member(3)'
      - 'excel!Excel.TableColumnCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableColumnCollection#add:member(1)'
    summary: "<span data-ttu-id=\"ce04a-103\">Ajoute une nouvelle colonne au tableau.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-103\">Adds a new column to the table.</span></span>\n\n<span data-ttu-id=\"ce04a-104\">\\[[Ensemble d’API\_: ExcelApi 1,1 nécessite un index plus petit que le nombre total de colonnes\_; 1,4 permet à l’index d’être facultatif (null ou-1) et ajoute une colonne à la fin\_; 1,4 autorise le paramètre Name au moment de la création.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-104\">\\[ [API set: ExcelApi 1.1 requires an index smaller than the total column count; 1.4 allows index to be optional (null or -1) and will append a column at the end; 1.4 allows name parameter at creation time.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)</span></span> <span data-ttu-id=\"ce04a-105\">\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-105\"></span></span>"
    name: 'add(index, values, name)'
    fullName: 'add(index, values, name)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ce04a-106">Exemples</span><span class="sxs-lookup"><span data-stu-id="ce04a-106">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
              var column = tables.getItem("Table1").columns.add(null, values);
              column.load('name');
              return ctx.sync().then(function() {
                  console.log(column.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: '<span data-ttu-id="ce04a-p102">Facultatif. Spécifie la position relative de la nouvelle colonne. Si la valeur est null ou -1, la ligne est ajoutée à la fin. Les colonnes avec un index supérieur seront décalées sur le côté. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="ce04a-p102">Optional. Specifies the relative position of the new column. If null or -1, the addition happens at the end. Columns with a higher index will be shifted to the side. Zero-indexed.</span></span>'
          type:
            - number
        - id: values
          description: "<span data-ttu-id=\"ce04a-112\">Facultatif.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-112\">Optional.</span></span> <span data-ttu-id=\"ce04a-113\">Matrice\_2D des valeurs non mises en forme de la colonne du tableau.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-113\">A 2-dimensional array of unformatted values of the table column.</span></span>"
          type:
            - 'excel!Excel.TableColumnCollection#add~0:complex'
        - id: name
          description: '<span data-ttu-id="ce04a-114">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="ce04a-114">Optional.</span></span> <span data-ttu-id="ce04a-115">Spécifie le nom de la nouvelle colonne.</span><span class="sxs-lookup"><span data-stu-id="ce04a-115">Specifies the name of the new column.</span></span> <span data-ttu-id="ce04a-116">Si la valeur est null, le nom par défaut est utilisé.</span><span class="sxs-lookup"><span data-stu-id="ce04a-116">If null, the default name will be used.</span></span>'
          type:
            - string
  - uid: 'excel!Excel.TableColumnCollection#context:member'
    summary: <span data-ttu-id="ce04a-117">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="ce04a-117">The request context associated with the object.</span></span> <span data-ttu-id="ce04a-118">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="ce04a-118">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableColumnCollection#count:member'
    summary: "<span data-ttu-id=\"ce04a-119\">Renvoie le nombre de colonnes du tableau.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-119\">Returns the number of columns in the table.</span></span> <span data-ttu-id=\"ce04a-120\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-120\">Read-only.</span></span>\n\n<span data-ttu-id=\"ce04a-121\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-121\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableColumnCollection#getCount:member(1)'
    summary: "<span data-ttu-id=\"ce04a-122\">Obtient le nombre de colonnes dans le tableau.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-122\">Gets the number of columns in the table.</span></span>\n\n<span data-ttu-id=\"ce04a-123\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-123\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableColumnCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"ce04a-124\">Obtient un objet de colonne par son nom ou son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-124\">Gets a column object by Name or ID.</span></span>\n\n<span data-ttu-id=\"ce04a-125\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-125\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ce04a-126">Exemples</span><span class="sxs-lookup"><span data-stu-id="ce04a-126">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
              tablecolumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tablecolumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="ce04a-127">Nom ou ID de la colonne.</span><span class="sxs-lookup"><span data-stu-id="ce04a-127">Column Name or ID.</span></span>
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
    summary: "<span data-ttu-id=\"ce04a-128\">Obtient une colonne en fonction de sa position dans la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-128\">Gets a column based on its position in the collection.</span></span>\n\n<span data-ttu-id=\"ce04a-129\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-129\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ce04a-130">Exemples</span><span class="sxs-lookup"><span data-stu-id="ce04a-130">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tablecolumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tablecolumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="ce04a-131">Valeur d’indice de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="ce04a-131">Index value of the object to be retrieved.</span></span> <span data-ttu-id="ce04a-132">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="ce04a-132">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"ce04a-133\">Obtient un objet de colonne par nom ou par ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-133\">Gets a column object by Name or ID.</span></span> <span data-ttu-id=\"ce04a-134\">Si la colonne n’existe pas, renvoie un objet null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-134\">If the column does not exist, will return a null object.</span></span>\n\n<span data-ttu-id=\"ce04a-135\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-135\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="ce04a-136">Nom ou ID de la colonne.</span><span class="sxs-lookup"><span data-stu-id="ce04a-136">Column Name or ID.</span></span>
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#items:member'
    summary: <span data-ttu-id="ce04a-137">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="ce04a-137">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableColumn[];'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#items~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(1)'
    summary: <span data-ttu-id="ce04a-138">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="ce04a-138">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ce04a-139">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="ce04a-139">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="ce04a-140">Fournit des options pour les propriétés de l’objet à charger.</span><span class="sxs-lookup"><span data-stu-id="ce04a-140">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.TableColumnCollection#load~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(2)'
    summary: <span data-ttu-id="ce04a-141">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="ce04a-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ce04a-142">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="ce04a-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="ce04a-143">Exemples</span><span class="sxs-lookup"><span data-stu-id="ce04a-143">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tablecolumns = ctx.workbook.tables.getItem('Table1').columns;
              tablecolumns.load('items');
              return ctx.sync().then(function() {
                  console.log("tablecolumns Count: " + tablecolumns.count);
                  for (var i = 0; i < tablecolumns.items.length; i++) {
                      console.log(tablecolumns.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="ce04a-144">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="ce04a-144">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableColumnCollection#load:member(3)'
    summary: <span data-ttu-id="ce04a-145">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="ce04a-145">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="ce04a-146">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="ce04a-146">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="ce04a-147">`propertyNamesAndPaths.select`est une chaîne délimitée par des virgules qui spécifie les propriétés à `propertyNamesAndPaths.expand` charger et une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="ce04a-147">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableColumnCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"ce04a-148\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-148\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"ce04a-149\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-149\"></span></span> <span data-ttu-id=\"ce04a-150\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-150\"></span></span><!-- --><span data-ttu-id=\"ce04a-151\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.TableColumnCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.TableColumnCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-151\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.TableColumnCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableColumnCollectionData`</span></span><!-- --><span data-ttu-id=\"ce04a-152\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"ce04a-152\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.TableColumn:class'
    name: Excel.TableColumn
  - uid: 'excel!Excel.TableColumnCollection#add~0:complex'
    name: Array<Array<boolean | string | number>> | boolean | string | number
    fullName: Array<Array<boolean | string | number>> | boolean | string | number
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <
        fullName: <
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <boolean | string | number>> | boolean | string | number
        fullName: <boolean | string | number>> | boolean | string | number
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableColumnCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableColumnCollection#items~0:complex'
    name: 'Excel.TableColumn[]'
    fullName: 'Excel.TableColumn[]'
    spec.typeScript:
      - uid: 'excel!Excel.TableColumn:class'
        name: Excel.TableColumn
        fullName: Excel.TableColumn
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableColumnCollection:class'
    name: Excel.TableColumnCollection
  - uid: 'excel!Excel.TableColumnCollection#load~0:complex'
    name: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableColumnCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableColumnCollectionLoadOptions
        fullName: Excel.Interfaces.TableColumnCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
    name: Excel.Interfaces.TableColumnCollectionData