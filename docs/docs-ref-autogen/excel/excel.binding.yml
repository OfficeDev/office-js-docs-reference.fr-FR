### YamlMime:UniversalReference
ms.openlocfilehash: d868de0bd4b05b310086bcc6cc0d2f7f3080a55e
ms.sourcegitcommit: beffe9455dace422e85b92f0105c54ff7b594cbf
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 09/20/2018
ms.locfileid: "24044182"
items:
- uid: excel.Excel.Binding
  summary: >-
    Représente une liaison Office.js définie dans le classeur.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.Binding
  fullName: excel.Excel.Binding
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Binding.delete
  - excel.Excel.Binding.getRange
  - excel.Excel.Binding.getTable
  - excel.Excel.Binding.getText
  - excel.Excel.Binding.id
  - excel.Excel.Binding.load
  - excel.Excel.Binding.onDataChanged
  - excel.Excel.Binding.onSelectionChanged
  - excel.Excel.Binding.toJSON
  - excel.Excel.Binding.type
- uid: excel.Excel.Binding.delete
  summary: >-
    Supprime la liaison.


    \[[Du jeu d’API : ExcelApi 1.3](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: delete()
  fullName: excel.Excel.Binding.delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Binding.getRange
  summary: >-
    Renvoie la plage représentée par la liaison. Génère une erreur si la liaison n’est pas du type approprié.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getRange()
  fullName: excel.Excel.Binding.getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var range = binding.getRange();\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.getTable
  summary: >-
    Renvoie le tableau représenté par la liaison. Génère une erreur si la liaison n’est pas du type approprié.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getTable()
  fullName: excel.Excel.Binding.getTable
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getTable(): Excel.Table;'
    return:
      type:
      - excel.Excel.Table
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var table = binding.getTable();\n    table.load('name');\n    return ctx.sync().then(function() {\n            console.log(table.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.getText
  summary: >-
    Renvoie le texte représenté par la liaison. Génère une erreur si la liaison n’est pas du type approprié.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: getText()
  fullName: excel.Excel.Binding.getText
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getText(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    var text = binding.getText();\n    binding.load('text');\n    return ctx.sync().then(function() {\n        console.log(text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Binding.id
  summary: >-
    Représente l’identificateur de liaison. En lecture seule.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: id
  fullName: excel.Excel.Binding.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: excel.Excel.Binding.load
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: "Outre cette signature, cette méthode présente les signatures suivantes :\n\n`load(option?: { select?: string; expand?: string; }): Excel.Binding`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-Uniquement disponible sur les types de la collection. Il est similaire à la signature précédente. Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection. Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var binding = ctx.workbook.bindings.getItemAt(0);\n    binding.load('type');\n    return ctx.sync().then(function() {\n        console.log(binding.type);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: excel.Excel.Binding.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Binding;'
    return:
      type:
      - excel.Excel.Binding
      description: ''
    parameters:
    - id: option
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: excel.Excel.Binding.onDataChanged
  summary: >-
    Se produit lors de la modification des données ou de la mise en forme dans la liaison.


    \[[Du jeu d’API : ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: onDataChanged
  fullName: excel.Excel.Binding.onDataChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");    \n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), \"Table\", \"SalesByQuarter\");\n    salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);\n\n    OfficeHelpers.UI.notify(\"The handler is registered.\", \"Change the value in one of the data cells and watch this message banner. (Be sure to complete the edit by pressing Enter or clicking in another cell.)\");\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Binding.onSelectionChanged
  summary: >-
    Se produit lorsque le contenu sélectionné dans la liaison est modifié.


    \[[Du jeu d’API : ExcelApi 1.2](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: onSelectionChanged
  fullName: excel.Excel.Binding.onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
- uid: excel.Excel.Binding.toJSON
  name: toJSON()
  fullName: excel.Excel.Binding.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingData;'
    return:
      type:
      - excel.Excel.Interfaces.BindingData
      description: ''
- uid: excel.Excel.Binding.type
  summary: >-
    Renvoie le type de la liaison. Pour plus d’informations, voir Excel.BindingType. En lecture seule.


    \[[Du jeu d’API : ExcelApi 1.1](/javascript/office/requirement-sets/excel-api-requirement-sets)\]
  name: type
  fullName: excel.Excel.Binding.type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
    return:
      type:
      - Excel.BindingType | "Range" | "Table" | "Text"
