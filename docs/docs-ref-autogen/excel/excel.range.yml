### YamlMime:UniversalReference
ms.openlocfilehash: 8538878d7c5ae5deb7dd090b3760f6eaf146efed
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724961"
items:
- uid: excel.Excel.Range
  summary: >-
    <span data-ttu-id="0430e-101">Une plage représente un ensemble constitué de cellules contiguës comme une cellule, une ligne, une colonne, un bloc de cellules, etc.</span><span class="sxs-lookup"><span data-stu-id="0430e-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.</span></span>


    <span data-ttu-id="0430e-102">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  remarks: <span data-ttu-id="0430e-103">Notre [guide de procédure sur l’utilisation de plages](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) a détaillé des procédures pas à pas, des images et des exemples de code.</span><span class="sxs-lookup"><span data-stu-id="0430e-103">Our [how-to guide on working with ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) has detailed walkthroughs, images, and code samples.</span></span>
  name: Excel.Range
  fullName: Excel.Range
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.Range.address
  - excel.Excel.Range.addressLocal
  - excel.Excel.Range.calculate
  - excel.Excel.Range.cellCount
  - excel.Excel.Range.clear
  - excel.Excel.Range.columnCount
  - excel.Excel.Range.columnHidden
  - excel.Excel.Range.columnIndex
  - excel.Excel.Range.conditionalFormats
  - excel.Excel.Range.context
  - excel.Excel.Range.dataValidation
  - excel.Excel.Range.delete
  - excel.Excel.Range.format
  - excel.Excel.Range.formulas
  - excel.Excel.Range.formulasLocal
  - excel.Excel.Range.formulasR1C1
  - excel.Excel.Range.getAbsoluteResizedRange
  - excel.Excel.Range.getBoundingRect
  - excel.Excel.Range.getCell
  - excel.Excel.Range.getColumn
  - excel.Excel.Range.getColumnsAfter
  - excel.Excel.Range.getColumnsBefore
  - excel.Excel.Range.getEntireColumn
  - excel.Excel.Range.getEntireRow
  - excel.Excel.Range.getImage
  - excel.Excel.Range.getIntersection
  - excel.Excel.Range.getIntersectionOrNullObject
  - excel.Excel.Range.getLastCell
  - excel.Excel.Range.getLastColumn
  - excel.Excel.Range.getLastRow
  - excel.Excel.Range.getOffsetRange
  - excel.Excel.Range.getResizedRange
  - excel.Excel.Range.getRow
  - excel.Excel.Range.getRowsAbove
  - excel.Excel.Range.getRowsBelow
  - excel.Excel.Range.getSurroundingRegion
  - excel.Excel.Range.getUsedRange
  - excel.Excel.Range.getUsedRangeOrNullObject
  - excel.Excel.Range.getVisibleView
  - excel.Excel.Range.hidden
  - excel.Excel.Range.hyperlink
  - excel.Excel.Range.insert
  - excel.Excel.Range.isEntireColumn
  - excel.Excel.Range.isEntireRow
  - excel.Excel.Range.load
  - excel.Excel.Range.merge
  - excel.Excel.Range.numberFormat
  - excel.Excel.Range.numberFormatLocal
  - excel.Excel.Range.rowCount
  - excel.Excel.Range.rowHidden
  - excel.Excel.Range.rowIndex
  - excel.Excel.Range.select
  - excel.Excel.Range.showCard
  - excel.Excel.Range.sort
  - excel.Excel.Range.style
  - excel.Excel.Range.text
  - excel.Excel.Range.toJSON
  - excel.Excel.Range.track
  - excel.Excel.Range.unmerge
  - excel.Excel.Range.untrack
  - excel.Excel.Range.values
  - excel.Excel.Range.valueTypes
  - excel.Excel.Range.worksheet
- uid: excel.Excel.Range.address
  summary: >-
    <span data-ttu-id="0430e-104">Représente la référence de plage de style A1.</span><span class="sxs-lookup"><span data-stu-id="0430e-104">Represents the range reference in A1-style.</span></span> <span data-ttu-id="0430e-105">Valeur de l’adresse contient la référence de feuille (par exemple, « Sheet1 ! A1 : B4 »).</span><span class="sxs-lookup"><span data-stu-id="0430e-105">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="0430e-106">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-106">Read-only.</span></span>


    <span data-ttu-id="0430e-107">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-107">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly address: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.addressLocal
  summary: >-
    <span data-ttu-id="0430e-p102">Représente la référence de la plage spécifiée dans le langage de l’utilisateur. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p102">Represents range reference for the specified range in the language of the user. Read-only.</span></span>


    <span data-ttu-id="0430e-110">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-110">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: addressLocal
  fullName: addressLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly addressLocal: string;'
    return:
      type:
      - string
- uid: excel.Excel.Range.calculate
  summary: >-
    <span data-ttu-id="0430e-111">Calcule une plage de cellules dans une feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="0430e-111">Calculates a range of cells on a worksheet.</span></span>


    <span data-ttu-id="0430e-112">\[[Du jeu d’API : ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-112">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: calculate()
  fullName: calculate
  langs:
  - typeScript
  type: method
  syntax:
    content: 'calculate(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.cellCount
  summary: >-
    <span data-ttu-id="0430e-p103">Nombre de cellules dans la plage. Cette API renvoie -1 si le nombre de cellules est supérieur à 2^31-1 (2 147 483 647). En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p103">Number of cells in the range. This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647). Read-only.</span></span>


    <span data-ttu-id="0430e-116">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: cellCount
  fullName: cellCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly cellCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.clear
  summary: >-
    <span data-ttu-id="0430e-117">Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-117">Clear range values, format, fill, border, etc.</span></span>


    <span data-ttu-id="0430e-118">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-118">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: clear(applyTo)
  fullName: clear
  langs:
  - typeScript
  type: method
  syntax:
    content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-119\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-119\">Examples</span></span>\n\n```javascript\n// Below example clears format and contents of the range. \nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.clear();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: applyTo
      description: <span data-ttu-id="0430e-120">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="0430e-120">Optional.</span></span> <span data-ttu-id="0430e-121">Détermine le type d’action clair.</span><span class="sxs-lookup"><span data-stu-id="0430e-121">Determines the type of clear action.</span></span> <span data-ttu-id="0430e-122">Pour plus d’informations, voir Excel.ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="0430e-122">See Excel.ClearApplyTo for details.</span></span>
      type:
      - excel.Excel.ClearApplyTo
- uid: excel.Excel.Range.columnCount
  summary: >-
    <span data-ttu-id="0430e-p105">Représente le nombre total de colonnes dans la plage. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p105">Represents the total number of columns in the range. Read-only.</span></span>


    <span data-ttu-id="0430e-125">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-125">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnCount
  fullName: columnCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.columnHidden
  summary: >-
    <span data-ttu-id="0430e-126">Indique si toutes les colonnes de la plage active sont masquées.</span><span class="sxs-lookup"><span data-stu-id="0430e-126">Represents if all columns of the current range are hidden.</span></span>


    <span data-ttu-id="0430e-127">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-127">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnHidden
  fullName: columnHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'columnHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.columnIndex
  summary: >-
    <span data-ttu-id="0430e-p106">Représente le numéro de colonne de la première cellule de la plage. Avec indice zéro. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p106">Represents the column number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="0430e-131">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-131">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: columnIndex
  fullName: columnIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly columnIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.conditionalFormats
  summary: >-
    <span data-ttu-id="0430e-p107">Collection de mises en formes conditionnelles qui ont une intersection avec la plage. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p107">Collection of ConditionalFormats that intersect the range. Read-only.</span></span>


    <span data-ttu-id="0430e-134">\[[Du jeu d’API : ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: conditionalFormats
  fullName: conditionalFormats
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
    return:
      type:
      - excel.Excel.ConditionalFormatCollection
- uid: excel.Excel.Range.context
  summary: <span data-ttu-id="0430e-135">Contexte de la requête associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="0430e-135">The request context associated with the object.</span></span> <span data-ttu-id="0430e-136">Il connecte processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="0430e-136">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.Range.dataValidation
  summary: >-
    <span data-ttu-id="0430e-137">Renvoie un objet de validation des données.</span><span class="sxs-lookup"><span data-stu-id="0430e-137">Returns a data validation object.</span></span>


    <span data-ttu-id="0430e-138">\[[Du jeu d’API : ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-138">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: dataValidation
  fullName: dataValidation
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly dataValidation: Excel.DataValidation;'
    return:
      type:
      - excel.Excel.DataValidation
- uid: excel.Excel.Range.delete
  summary: >-
    <span data-ttu-id="0430e-139">Supprime les cellules associées à la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-139">Deletes the cells associated with the range.</span></span>


    <span data-ttu-id="0430e-140">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-140">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete(shift)
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(shift: Excel.DeleteShiftDirection): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-141\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-141\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.delete(\"Left\");\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: <span data-ttu-id="0430e-142">Indique comment décaler les cellules.</span><span class="sxs-lookup"><span data-stu-id="0430e-142">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0430e-143">Pour plus d’informations, voir Excel.DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0430e-143">See Excel.DeleteShiftDirection for details.</span></span>
      type:
      - excel.Excel.DeleteShiftDirection
- uid: excel.Excel.Range.format
  summary: >-
    <span data-ttu-id="0430e-p110">Renvoie un objet de format, qui comprend les propriétés de police, de remplissage, de bordures, d’alignement, etc. de la plage. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p110">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties. Read-only.</span></span>


    <span data-ttu-id="0430e-146">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-146">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: format
  fullName: format
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly format: Excel.RangeFormat;'
    return:
      type:
      - excel.Excel.RangeFormat
- uid: excel.Excel.Range.formulas
  summary: >-
    <span data-ttu-id="0430e-147">Représente la formule dans le style de notation A1.</span><span class="sxs-lookup"><span data-stu-id="0430e-147">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="0430e-148">Lors de la définition des formules à une plage, l’argument value peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-148">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-149">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-149">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-150">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-150">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulas
  fullName: formulas
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulas: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasLocal
  summary: >-
    <span data-ttu-id="0430e-151">Représente la formule dans une notation de style A1, dans la langue et la mise en forme le nombre de paramètres régionaux de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="0430e-151">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id="0430e-152">Par exemple, la formule anglais « = somme (A1, 1,5) » devient « = SUMME(A1; 1,5) » en allemand.</span><span class="sxs-lookup"><span data-stu-id="0430e-152">For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.</span></span> <span data-ttu-id="0430e-153">Lors de la définition des formules à une plage, l’argument value peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-153">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-154">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-154">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-155">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-155">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasLocal
  fullName: formulasLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.formulasR1C1
  summary: >-
    <span data-ttu-id="0430e-156">Représente la formule dans le style de notation R1C1.</span><span class="sxs-lookup"><span data-stu-id="0430e-156">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="0430e-157">Lors de la définition des formules à une plage, l’argument value peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-157">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-158">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-158">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-159">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-159">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: formulasR1C1
  fullName: formulasR1C1
  langs:
  - typeScript
  type: property
  syntax:
    content: 'formulasR1C1: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.getAbsoluteResizedRange
  summary: >-
    <span data-ttu-id="0430e-160">Obtient un objet Plage avec la même cellule supérieure gauche que l’objet de Plage en cours, mais avec un nombre spécifié de lignes et colonnes.</span><span class="sxs-lookup"><span data-stu-id="0430e-160">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>


    <span data-ttu-id="0430e-161">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-161">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getAbsoluteResizedRange(numRows, numColumns)
  fullName: getAbsoluteResizedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: numRows
      description: <span data-ttu-id="0430e-162">Le nombre de lignes de la taille de la nouvelle plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-162">The number of rows of the new range size.</span></span>
      type:
      - number
    - id: numColumns
      description: <span data-ttu-id="0430e-163">Le nombre de colonnes de la taille de la nouvelle plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-163">The number of columns of the new range size.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getBoundingRect
  summary: >-
    <span data-ttu-id="0430e-p114">Renvoie le plus petit objet de plage qui englobe les plages données. Par exemple, la valeur GetBoundingRect pour « B2:C5 » et « D10:E15 » est « B2:E15 ».</span><span class="sxs-lookup"><span data-stu-id="0430e-p114">Gets the smallest range object that encompasses the given ranges. For example, the GetBoundingRect of "B2:C5" and "D10:E15" is "B2:E15".</span></span>


    <span data-ttu-id="0430e-166">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-166">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getBoundingRect(anotherRange)
  fullName: getBoundingRect
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-167\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-167\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:G6\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var range = range.getBoundingRect(\"G4:H8\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // Prints Sheet1!D4:H8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="0430e-168">Nom, adresse ou objet de plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-168">The range object or address or range name.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getCell
  summary: >-
    <span data-ttu-id="0430e-169">Obtient l’objet range contenant la cellule basée sur les numéros de ligne et de colonne.</span><span class="sxs-lookup"><span data-stu-id="0430e-169">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="0430e-170">La cellule peut être en dehors des limites de sa plage parente, pour qu’il reste dans la grille de feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="0430e-170">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="0430e-171">Se trouve la cellule renvoyée par rapport à la cellule supérieure gauche de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-171">The returned cell is located relative to the top left cell of the range.</span></span>


    <span data-ttu-id="0430e-172">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-172">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCell(row, column)
  fullName: getCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCell(row: number, column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-173\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-173\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    var cell = range.cell(0,0);\n    cell.load('address');\n    return ctx.sync().then(function() {\n        console.log(cell.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="0430e-p116">Numéro de ligne de la cellule à récupérer. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0430e-p116">Row number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
    - id: column
      description: <span data-ttu-id="0430e-p117">Numéro de colonne de la cellule à récupérer. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0430e-p117">Column number of the cell to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumn
  summary: >-
    <span data-ttu-id="0430e-178">Obtient une colonne contenue dans la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-178">Gets a column contained in the range.</span></span>


    <span data-ttu-id="0430e-179">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-179">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumn(column)
  fullName: getColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumn(column: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-180\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet19\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!B1:B8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: column
      description: <span data-ttu-id="0430e-p118">Numéro de colonne de la plage à récupérer. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0430e-p118">Column number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnsAfter
  summary: >-
    <span data-ttu-id="0430e-183">Obtient un certain nombre de colonnes à droite de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="0430e-183">Gets a certain number of columns to the right of the current Range object.</span></span>


    <span data-ttu-id="0430e-184">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-184">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsAfter(count)
  fullName: getColumnsAfter
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsAfter(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="0430e-p119">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0430e-p119">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getColumnsBefore
  summary: >-
    <span data-ttu-id="0430e-190">Obtient un certain nombre de colonnes à gauche de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="0430e-190">Gets a certain number of columns to the left of the current Range object.</span></span>


    <span data-ttu-id="0430e-191">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-191">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getColumnsBefore(count)
  fullName: getColumnsBefore
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getColumnsBefore(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="0430e-p120">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0430e-p120">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getEntireColumn
  summary: >-
    <span data-ttu-id="0430e-197">Obtient un objet qui représente toute la colonne de la plage (par exemple, si la plage actuelle représente les cellules « B4:E11 », son `getEntireColumn` est une plage qui représente les colonnes « B:E »).</span><span class="sxs-lookup"><span data-stu-id="0430e-197">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>


    <span data-ttu-id="0430e-198">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-198">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireColumn()
  fullName: getEntireColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-199\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-199\">Examples</span></span>\n\n```javascript\n// Note: the grid properties of the Range (values, numberFormat, formulas) \n// contains null since the Range in question is unbounded.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeEC = range.getEntireColumn();\n    rangeEC.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeEC.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getEntireRow
  summary: >-
    <span data-ttu-id="0430e-200">Obtient un objet qui représente toute la ligne de la plage (par exemple, si la plage actuelle représente les cellules « B4:E11 », son `GetEntireRow` est une plage qui représente les lignes « 4:11 »).</span><span class="sxs-lookup"><span data-stu-id="0430e-200">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>


    <span data-ttu-id="0430e-201">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-201">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getEntireRow()
  fullName: getEntireRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getEntireRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-202\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-202\">Examples</span></span>\n\n```javascript\n// Gets an object that represents the entire row of the range \n// (for example, if the current range represents cells \"B4:E11\", \n// its GetEntireRow is a range that represents rows \"4:11\").\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeER = range.getEntireRow();\n    rangeER.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeER.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getImage
  summary: >-
    <span data-ttu-id="0430e-203">Affiche la plage sous la forme d’une image png codé en base64.</span><span class="sxs-lookup"><span data-stu-id="0430e-203">Renders the range as a base64-encoded png image.</span></span>


    <span data-ttu-id="0430e-204">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-204">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getImage()
  fullName: getImage
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getImage(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: ''
- uid: excel.Excel.Range.getIntersection
  summary: >-
    <span data-ttu-id="0430e-205">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données.</span><span class="sxs-lookup"><span data-stu-id="0430e-205">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>


    <span data-ttu-id="0430e-206">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-206">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersection(anotherRange)
  fullName: getIntersection
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-207\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-207\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection(\"D4:G6\");\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!D4:F6\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="0430e-208">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="0430e-208">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getIntersectionOrNullObject
  summary: >-
    <span data-ttu-id="0430e-p121">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données. Si aucune intersection n’est trouvée, renvoie un objet Null.</span><span class="sxs-lookup"><span data-stu-id="0430e-p121">Gets the range object that represents the rectangular intersection of the given ranges. If no intersection is found, will return a null object.</span></span>


    <span data-ttu-id="0430e-211">\[[Du jeu d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-211">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getIntersectionOrNullObject(anotherRange)
  fullName: getIntersectionOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-212\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-212\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: anotherRange
      description: <span data-ttu-id="0430e-213">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="0430e-213">The range object or range address that will be used to determine the intersection of ranges.</span></span>
      type:
      - Range | string
- uid: excel.Excel.Range.getLastCell
  summary: >-
    <span data-ttu-id="0430e-p122">Obtient la dernière cellule de la plage. Par exemple, la dernière cellule de la plage « B2:D5 » est « D5 ».</span><span class="sxs-lookup"><span data-stu-id="0430e-p122">Gets the last cell within the range. For example, the last cell of "B2:D5" is "D5".</span></span>


    <span data-ttu-id="0430e-216">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-216">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastCell()
  fullName: getLastCell
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastCell(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-217\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-217\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastColumn
  summary: >-
    <span data-ttu-id="0430e-p123">Obtient la dernière colonne de la plage. Par exemple, la dernière colonne de la plage « B2:D5 » est « D2:D5 ».</span><span class="sxs-lookup"><span data-stu-id="0430e-p123">Gets the last column within the range. For example, the last column of "B2:D5" is "D2:D5".</span></span>


    <span data-ttu-id="0430e-220">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-220">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastColumn()
  fullName: getLastColumn
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastColumn(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-221\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-221\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!F1:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getLastRow
  summary: >-
    <span data-ttu-id="0430e-p124">Obtient la dernière ligne de la plage. Par exemple, la dernière ligne de la plage « B2:D5 » est « B5:D5 ».</span><span class="sxs-lookup"><span data-stu-id="0430e-p124">Gets the last row within the range. For example, the last row of "B2:D5" is "B5:D5".</span></span>


    <span data-ttu-id="0430e-224">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-224">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLastRow()
  fullName: getLastRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLastRow(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-225\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-225\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A8:F8\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.getOffsetRange
  summary: >-
    <span data-ttu-id="0430e-p125">Obtient un objet qui représente une plage décalée par rapport à la plage spécifiée. Les dimensions de la plage renvoyée correspondent à cette plage. Si la plage obtenue se retrouve en dehors des limites de grille de la feuille de calcul, une erreur est déclenchée.</span><span class="sxs-lookup"><span data-stu-id="0430e-p125">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>


    <span data-ttu-id="0430e-229">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-229">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOffsetRange(rowOffset, columnOffset)
  fullName: getOffsetRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-230\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-230\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D4:F6\";\n    var range = \n        ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!H3:K5\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: rowOffset
      description: <span data-ttu-id="0430e-p126">Nombre de lignes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers le bas et les valeurs négatives un décalage vers le haut.</span><span class="sxs-lookup"><span data-stu-id="0430e-p126">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>
      type:
      - number
    - id: columnOffset
      description: <span data-ttu-id="0430e-p127">Nombre de colonnes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers la droite et les valeurs négatives un décalage vers la gauche.</span><span class="sxs-lookup"><span data-stu-id="0430e-p127">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getResizedRange
  summary: >-
    <span data-ttu-id="0430e-235">Obtient un objet de plage semblable à l’objet de plage actuel, mais avec le coin inférieur droit développé (ou contracté) selon un certain nombre de lignes et de colonnes.</span><span class="sxs-lookup"><span data-stu-id="0430e-235">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>


    <span data-ttu-id="0430e-236">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-236">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getResizedRange(deltaRows, deltaColumns)
  fullName: getResizedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: deltaRows
      description: <span data-ttu-id="0430e-p128">Nombre de lignes par lequel développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="0430e-p128">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
    - id: deltaColumns
      description: <span data-ttu-id="0430e-239">Le nombre de colonnes pour rajouter le coin inférieur droit, par rapport à la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="0430e-239">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="0430e-240">Utilisez un nombre positif pour développer la plage ou une valeur négative pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="0430e-240">Use a positive number to expand the range, or a negative number to decrease it.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRow
  summary: >-
    <span data-ttu-id="0430e-241">Obtient une ligne contenue dans la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-241">Gets a row contained in the range.</span></span>


    <span data-ttu-id="0430e-242">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-242">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRow(row)
  fullName: getRow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRow(row: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-243\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-243\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);\n    range.load('address');\n    return ctx.sync().then(function() {\n        console.log(range.address); // prints Sheet1!A2:F2\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: row
      description: <span data-ttu-id="0430e-p130">Numéro de ligne de la plage à récupérer. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0430e-p130">Row number of the range to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowsAbove
  summary: >-
    <span data-ttu-id="0430e-246">Obtient un certain nombre de lignes au-dessus de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="0430e-246">Gets a certain number of rows above the current Range object.</span></span>


    <span data-ttu-id="0430e-247">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-247">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsAbove(count)
  fullName: getRowsAbove
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsAbove(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="0430e-p131">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0430e-p131">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getRowsBelow
  summary: >-
    <span data-ttu-id="0430e-253">Obtient un certain nombre de lignes en dessous de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="0430e-253">Gets a certain number of rows below the current Range object.</span></span>


    <span data-ttu-id="0430e-254">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-254">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRowsBelow(count)
  fullName: getRowsBelow
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRowsBelow(count?: number): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: count
      description: <span data-ttu-id="0430e-p132">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0430e-p132">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>
      type:
      - number
- uid: excel.Excel.Range.getSurroundingRegion
  summary: >-
    <span data-ttu-id="0430e-260">Renvoie un objet PLage qui représente la région environnante pour la cellule en haut à gauche de cette plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-260">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="0430e-261">Une région environnante est une plage délimitée par une combinaison de lignes et de colonnes vides par rapport à cette plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-261">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>


    <span data-ttu-id="0430e-262">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-262">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getSurroundingRegion()
  fullName: getSurroundingRegion
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getSurroundingRegion(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.getUsedRange
  summary: >-
    <span data-ttu-id="0430e-p134">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction génère une erreur ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="0430e-p134">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>


    <span data-ttu-id="0430e-265">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-265">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRange(valuesOnly)
  fullName: getUsedRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-266\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-266\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"D:F\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    var rangeUR = range.getUsedRange();\n    rangeUR.load('address');\n    return ctx.sync().then(function() {\n        console.log(rangeUR.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // We want the most recent quarter that has data, so\n    // exclude quarters without data and get the last of\n    // the remaining columns.\n    const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);\n    const currentQuarterRange = usedDataRange.getLastColumn();\n\n    // Asian and European teams have separate contests.\n    const asianSalesRange = sheet.getRange(\"A2:E4\");\n    const europeanSalesRange = sheet.getRange(\"A5:E7\");\n\n    // The data for each chart is the intersection of the\n    // current quarter column and the rows for the continent.\n    const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n    const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);\n\n    // Must sync before you can test the output of *OrNullObject\n    // method/property.\n    await context.sync();\n\n    if (asianContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"Asian\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"Asian\",\n            asianContestRange,\n            \"A9\",\n            \"F24\"\n        );\n    }\n\n    if (europeanContestRange.isNullObject) {\n        // See the declaration of this method for how to\n        // test this code path.\n        reportMissingData(\"European\");\n    } else {\n        createContinentChart(\n            sheet,\n            \"European\",\n            europeanContestRange,\n            \"A25\",\n            \"F40\"\n        );\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: '<span data-ttu-id="0430e-267">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class="sxs-lookup"><span data-stu-id="0430e-267">Considers only cells with values as used cells.</span></span> <span data-ttu-id="0430e-268">\[Jeu d’API : ExcelApi 1.2\]</span><span class="sxs-lookup"><span data-stu-id="0430e-268">\[Api set: ExcelApi 1.2\]</span></span>'
      type:
      - boolean
- uid: excel.Excel.Range.getUsedRangeOrNullObject
  summary: >-
    <span data-ttu-id="0430e-p136">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction renvoie un objet null.</span><span class="sxs-lookup"><span data-stu-id="0430e-p136">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>


    <span data-ttu-id="0430e-271">\[[Du jeu d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-271">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getUsedRangeOrNullObject(valuesOnly)
  fullName: getUsedRangeOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-272\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-272\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(\n        true /* valuesOnly */\n    );\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n        OfficeHelpers.UI.notify(\n            \"Need Data to Make Chart\",\n            \"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\"\n        );\n    } else {\n        const chart = sheet.charts.add(\n            Excel.ChartType.columnClustered,\n            dataRange,\n            \"Columns\"\n        );\n        chart.setPosition(\"A15\", \"F30\");\n        chart.title.text = \"Quarterly sales chart\";\n        chart.legend.position = \"Right\";\n        chart.legend.format.fill.setSolidColor(\"white\");\n        chart.dataLabels.format.font.size = 15;\n        chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n});\n```"
    parameters:
    - id: valuesOnly
      description: <span data-ttu-id="0430e-273">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class="sxs-lookup"><span data-stu-id="0430e-273">Considers only cells with values as used cells.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.getVisibleView
  summary: >-
    <span data-ttu-id="0430e-274">Représente les lignes visibles de la plage en cours.</span><span class="sxs-lookup"><span data-stu-id="0430e-274">Represents the visible rows of the current range.</span></span>


    <span data-ttu-id="0430e-275">\[[Du jeu d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-275">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getVisibleView()
  fullName: getVisibleView
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getVisibleView(): Excel.RangeView;'
    return:
      type:
      - excel.Excel.RangeView
      description: ''
- uid: excel.Excel.Range.hidden
  summary: >-
    <span data-ttu-id="0430e-p137">Indique si toutes les cellules de la plage active sont masquées. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p137">Represents if all cells of the current range are hidden. Read-only.</span></span>


    <span data-ttu-id="0430e-278">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-278">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hidden
  fullName: hidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly hidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.hyperlink
  summary: >-
    <span data-ttu-id="0430e-279">Représente le lien hypertexte de la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="0430e-279">Represents the hyperlink for the current range.</span></span>


    <span data-ttu-id="0430e-280">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-280">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: hyperlink
  fullName: hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: Excel.RangeHyperlink;'
    return:
      type:
      - excel.Excel.RangeHyperlink
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-281\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-281\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.insert
  summary: >-
    <span data-ttu-id="0430e-p138">Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.</span><span class="sxs-lookup"><span data-stu-id="0430e-p138">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>


    <span data-ttu-id="0430e-284">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-284">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: insert(shift)
  fullName: insert
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-285\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-285\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.insert();\n    return ctx.sync(); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: shift
      description: <span data-ttu-id="0430e-286">Indique comment décaler les cellules.</span><span class="sxs-lookup"><span data-stu-id="0430e-286">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0430e-287">Pour plus d’informations, voir Excel.InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0430e-287">See Excel.InsertShiftDirection for details.</span></span>
      type:
      - excel.Excel.InsertShiftDirection
- uid: excel.Excel.Range.isEntireColumn
  summary: >-
    <span data-ttu-id="0430e-288">Représente si la plage active est une colonne entière.</span><span class="sxs-lookup"><span data-stu-id="0430e-288">Represents if the current range is an entire column.</span></span> <span data-ttu-id="0430e-289">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-289">Read-only.</span></span>


    <span data-ttu-id="0430e-290">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-290">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireColumn
  fullName: isEntireColumn
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireColumn: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.isEntireRow
  summary: >-
    <span data-ttu-id="0430e-291">Représente si la plage active est une ligne entière.</span><span class="sxs-lookup"><span data-stu-id="0430e-291">Represents if the current range is an entire row.</span></span> <span data-ttu-id="0430e-292">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-292">Read-only.</span></span>


    <span data-ttu-id="0430e-293">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-293">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: isEntireRow
  fullName: isEntireRow
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isEntireRow: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.load
  summary: <span data-ttu-id="0430e-294">Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées.</span><span class="sxs-lookup"><span data-stu-id="0430e-294">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0430e-295">Vous devez appeler « context.sync() » avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="0430e-295">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"0430e-296\">Outre cette signature, cette méthode présente les signatures suivantes :</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-296\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"0430e-297\">`load(option?: { select?: string; expand?: string; }): Excel.Range`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-297\">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"0430e-298\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Uniquement disponible sur les types de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-298\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id=\"0430e-299\">Il est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-299\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"0430e-300\">Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-300\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"0430e-301\">Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-301\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"0430e-302\">Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-302\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-303\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-303\">Examples</span></span>\n\n```javascript\n// Below example uses range address to get the range object.\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:F8\"; \n    var worksheet = ctx.workbook.worksheets.getItem(sheetName);\n    var range = worksheet.getRange(rangeAddress);\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Below example uses a named-range to get the range object.\nExcel.run(function (ctx) { \n    var rangeName = 'MyRange';\n    var range = ctx.workbook.names.getItem(rangeName).range;\n    range.load('cellCount');\n    return ctx.sync().then(function() {\n        console.log(range.cellCount);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// The example below sets number-format, values and formulas on a grid that contains 2x3 grid.\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:G7\";\n    var numberFormat = [[null, \"d-mmm\"], [null, \"d-mmm\"], [null, null]]\n    var values = [[\"Today\", 42147], [\"Tomorrow\", \"5/24\"], [\"Difference in days\", null]];\n    var formulas = [[null,null], [null,null], [null,\"=G6-G5\"]];\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.numberFormat = numberFormat;\n    range.values = values;\n    range.formulas= formulas;\n    range.load('text');\n    return ctx.sync().then(function() {\n        console.log(range.text);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="0430e-304">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="0430e-304">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.Range.merge
  summary: >-
    <span data-ttu-id="0430e-305">Fusionne la plage de cellules dans une zone de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="0430e-305">Merge the range cells into one region in the worksheet.</span></span>


    <span data-ttu-id="0430e-306">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-306">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: merge(across)
  fullName: merge
  langs:
  - typeScript
  type: method
  syntax:
    content: 'merge(across?: boolean): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-307\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-307\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.merge(true);\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: across
      description: <span data-ttu-id="0430e-p144">Facultatif. Définit la valeur « true » pour fusionner séparément les cellules de chaque ligne de la plage spécifiée. La valeur par défaut est « false ».</span><span class="sxs-lookup"><span data-stu-id="0430e-p144">Optional. Set true to merge cells in each row of the specified range as separate merged cells. The default value is false.</span></span>
      type:
      - boolean
- uid: excel.Excel.Range.numberFormat
  summary: >-
    <span data-ttu-id="0430e-311">Représente le code de format numérique de Microsoft Excel pour la plage indiquée.</span><span class="sxs-lookup"><span data-stu-id="0430e-311">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="0430e-312">Lors de la définition du format de nombre à une plage, l’argument value peut être une valeur unique (string) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-312">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-313">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-313">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-314">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-314">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormat
  fullName: numberFormat
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormat: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.numberFormatLocal
  summary: >-
    <span data-ttu-id="0430e-315">Représente le code de format numérique d’Excel pour la plage donnée en tant que chaîne dans la langue de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="0430e-315">Represents Excel's number format code for the given range as a string in the language of the user.</span></span> <span data-ttu-id="0430e-316">Lors de la définition de format de numéro local à une plage, l’argument value peut être une valeur unique (string) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-316">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-317">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-317">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-318">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-318">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: numberFormatLocal
  fullName: numberFormatLocal
  langs:
  - typeScript
  type: property
  syntax:
    content: 'numberFormatLocal: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.rowCount
  summary: >-
    <span data-ttu-id="0430e-p147">Renvoie le nombre total de lignes de la plage. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p147">Returns the total number of rows in the range. Read-only.</span></span>


    <span data-ttu-id="0430e-321">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-321">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowCount
  fullName: rowCount
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowCount: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.rowHidden
  summary: >-
    <span data-ttu-id="0430e-322">Indique si toutes les lignes de la plage active sont masquées.</span><span class="sxs-lookup"><span data-stu-id="0430e-322">Represents if all rows of the current range are hidden.</span></span>


    <span data-ttu-id="0430e-323">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-323">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowHidden
  fullName: rowHidden
  langs:
  - typeScript
  type: property
  syntax:
    content: 'rowHidden: boolean;'
    return:
      type:
      - boolean
- uid: excel.Excel.Range.rowIndex
  summary: >-
    <span data-ttu-id="0430e-p148">Renvoie le numéro de ligne de la première cellule de la plage. Avec indice zéro. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p148">Returns the row number of the first cell in the range. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="0430e-327">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-327">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: rowIndex
  fullName: rowIndex
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type:
      - number
- uid: excel.Excel.Range.select
  summary: >-
    <span data-ttu-id="0430e-328">Sélectionne la plage spécifiée dans l’interface utilisateur d’Excel.</span><span class="sxs-lookup"><span data-stu-id="0430e-328">Selects the specified range in the Excel UI.</span></span>


    <span data-ttu-id="0430e-329">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-329">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: select()
  fullName: select
  langs:
  - typeScript
  type: method
  syntax:
    content: 'select(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-330\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-330\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {\n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"F5:F10\"; \n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.select();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.showCard
  summary: >-
    <span data-ttu-id="0430e-331">Affiche la carte pour une cellule active si son contenu est riche en valeur.</span><span class="sxs-lookup"><span data-stu-id="0430e-331">Displays the card for an active cell if it has rich value content.</span></span>


    <span data-ttu-id="0430e-332">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-332">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: showCard()
  fullName: showCard
  langs:
  - typeScript
  type: method
  syntax:
    content: 'showCard(): void;'
    return:
      type:
      - void
      description: ''
- uid: excel.Excel.Range.sort
  summary: >-
    <span data-ttu-id="0430e-p149">Représente le tri de plage de la plage actuelle. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p149">Represents the range sort of the current range. Read-only.</span></span>


    <span data-ttu-id="0430e-335">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-335">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: sort
  fullName: sort
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sort: Excel.RangeSort;'
    return:
      type:
      - excel.Excel.RangeSort
- uid: excel.Excel.Range.style
  summary: >-
    <span data-ttu-id="0430e-336">Représente le style de la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="0430e-336">Represents the style of the current range.</span></span> <span data-ttu-id="0430e-337">Si les styles de cellules sont incohérentes, null sera retourné.</span><span class="sxs-lookup"><span data-stu-id="0430e-337">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="0430e-338">Pour les styles personnalisés, le nom du style est renvoyé.</span><span class="sxs-lookup"><span data-stu-id="0430e-338">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="0430e-339">Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération BuiltInStyle s’afficheront.</span><span class="sxs-lookup"><span data-stu-id="0430e-339">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>


    <span data-ttu-id="0430e-340">\[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-340">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: style
  fullName: style
  langs:
  - typeScript
  type: property
  syntax:
    content: 'style: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-341\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-341\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let worksheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = worksheet.getRange(\"A1:E1\");\n\n    // Apply built-in style. \n    // Styles are in the Home tab ribbon.\n    range.style = Excel.BuiltInStyle.neutral;\n    range.format.horizontalAlignment = \"Right\";\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.text
  summary: >-
    <span data-ttu-id="0430e-342">Valeurs de texte de la plage spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0430e-342">Text values of the specified range.</span></span> <span data-ttu-id="0430e-343">La valeur de texte ne dépendent pas de la largeur de cellule.</span><span class="sxs-lookup"><span data-stu-id="0430e-343">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="0430e-344">Le \# connexion substitution qui se trouve dans l’interface utilisateur d’Excel n’affecte pas la valeur de texte renvoyée par l’API.</span><span class="sxs-lookup"><span data-stu-id="0430e-344">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="0430e-345">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-345">Read-only.</span></span>


    <span data-ttu-id="0430e-346">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-346">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: text
  fullName: text
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly text: string[][];'
    return:
      type:
      - string[][]
- uid: excel.Excel.Range.toJSON
  summary: <span data-ttu-id="0430e-347">Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="0430e-347">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="0430e-348">(`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’objet Excel.Range d’origine est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `Excel.Interfaces.RangeData` <!-- -->) qui contient des copies superficielles de toutes les propriétés enfant chargé à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="0430e-348">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.RangeData;'
    return:
      type:
      - excel.Excel.Interfaces.RangeData
      description: ''
- uid: excel.Excel.Range.track
  summary: <span data-ttu-id="0430e-349">Suivre l’objet pour l’ajustement automatique selon entourant les modifications dans le document.</span><span class="sxs-lookup"><span data-stu-id="0430e-349">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="0430e-350">Cet appel est une abréviation de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="0430e-350">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="0430e-351">Si vous utilisez cet objet dans les appels de « .sync » et en dehors de l’exécution séquentielle d’un lot de « .run » et obtenir une erreur « InvalidObjectPath » lors de la définition d’une propriété ou d’appeler une méthode sur l’objet, vous devez avoir ajouté l’objet à l’objet suivi collection lorsque l’objet a été créé tout d’abord.</span><span class="sxs-lookup"><span data-stu-id="0430e-351">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: ''
- uid: excel.Excel.Range.unmerge
  summary: >-
    <span data-ttu-id="0430e-352">Annule la fusion de la plage de cellules et les sépare dans des cellules distinctes.</span><span class="sxs-lookup"><span data-stu-id="0430e-352">Unmerge the range cells into separate cells.</span></span>


    <span data-ttu-id="0430e-353">\[[Du jeu d’API : ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-353">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: unmerge()
  fullName: unmerge
  langs:
  - typeScript
  type: method
  syntax:
    content: 'unmerge(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-354\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-354\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var sheetName = \"Sheet1\";\n    var rangeAddress = \"A1:C3\";\n    var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);\n    range.unmerge();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.Range.untrack
  summary: <span data-ttu-id="0430e-355">Version de la mémoire associée à cet objet, si elle a été précédemment suivi.</span><span class="sxs-lookup"><span data-stu-id="0430e-355">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="0430e-356">Cet appel est l’abréviation de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="0430e-356">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="0430e-357">Comportant de nombreux objets suivis ralentit l’application hôte, donc pensez à libérer les objets que vous ajoutez, une fois que vous avez terminé les utiliser.</span><span class="sxs-lookup"><span data-stu-id="0430e-357">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="0430e-358">Vous devrez appeler « context.sync() » avant que la version de mémoire prenne effet.</span><span class="sxs-lookup"><span data-stu-id="0430e-358">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"0430e-359\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0430e-359\">Examples</span></span>\n\n```typescript\nExcel.run(async (context) => {\n    const largeRange = context.workbook.getSelectedRange();\n    largeRange.load([\"rowCount\", \"columnCount\"]);\n    await context.sync();\n\n    for (let i = 0; i < largeRange.rowCount; i++) {\n        for (let j = 0; j < largeRange.columnCount; j++) {\n            let cell = largeRange.getCell(i, j);\n            cell.values = [[i *j]];\n\n            // call untrack() to release the range from memory\n            cell.untrack();\n        }\n    }\n\n    await context.sync();\n});\n```"
- uid: excel.Excel.Range.values
  summary: >-
    <span data-ttu-id="0430e-360">Représente les valeurs brutes de la plage spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0430e-360">Represents the raw values of the specified range.</span></span> <span data-ttu-id="0430e-361">Les données renvoyées peuvent être de type chaîne, nombre ou une valeur boolean.</span><span class="sxs-lookup"><span data-stu-id="0430e-361">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="0430e-362">Cellules qui contiennent une erreur renvoie la chaîne d’erreur.</span><span class="sxs-lookup"><span data-stu-id="0430e-362">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="0430e-363">Lors de la définition des valeurs à une plage, l’argument value peut être une valeur unique (chaîne, nombre ou booléen) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="0430e-363">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="0430e-364">Si l’argument est une valeur unique, il sera appliquée à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="0430e-364">If the argument is a single value, it will be applied to all cells in the range.</span></span>


    <span data-ttu-id="0430e-365">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-365">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
- uid: excel.Excel.Range.valueTypes
  summary: >-
    <span data-ttu-id="0430e-366">Représente le type de données de chaque cellule.</span><span class="sxs-lookup"><span data-stu-id="0430e-366">Represents the type of data of each cell.</span></span> <span data-ttu-id="0430e-367">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-367">Read-only.</span></span>


    <span data-ttu-id="0430e-368">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-368">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: valueTypes
  fullName: valueTypes
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly valueTypes: Excel.RangeValueType[][];'
    return:
      type:
      - Excel.RangeValueType[][]
- uid: excel.Excel.Range.worksheet
  summary: >-
    <span data-ttu-id="0430e-p157">Feuille de calcul contenant la plage. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0430e-p157">The worksheet containing the current range. Read-only.</span></span>


    <span data-ttu-id="0430e-371">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="0430e-371">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: worksheet
  fullName: worksheet
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly worksheet: Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
