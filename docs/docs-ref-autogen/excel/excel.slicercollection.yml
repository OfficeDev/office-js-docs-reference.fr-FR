### YamlMime:UniversalReference
items:
  - uid: excel.Excel.SlicerCollection
    summary: |-
      <span data-ttu-id="461bd-101">Représente une collection de tous les objets Slicer du classeur ou d’une feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="461bd-101">Represents a collection of all the slicer objects on the workbook or a worksheet.</span></span>

      <span data-ttu-id="461bd-102">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-102">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: Excel.SlicerCollection
    fullName: Excel.SlicerCollection
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel
    children:
      - excel.Excel.SlicerCollection.add
      - excel.Excel.SlicerCollection.context
      - excel.Excel.SlicerCollection.getCount
      - excel.Excel.SlicerCollection.getItem
      - excel.Excel.SlicerCollection.getItemAt
      - excel.Excel.SlicerCollection.getItemOrNullObject
      - excel.Excel.SlicerCollection.items
      - excel.Excel.SlicerCollection.load
      - excel.Excel.SlicerCollection.load_1
      - excel.Excel.SlicerCollection.load_2
      - excel.Excel.SlicerCollection.toJSON
  - uid: excel.Excel.SlicerCollection.add
    summary: |-
      <span data-ttu-id="461bd-103">Ajoute un nouveau segment au classeur.</span><span class="sxs-lookup"><span data-stu-id="461bd-103">Adds a new slicer to the workbook.</span></span>

      <span data-ttu-id="461bd-104">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-104">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: 'add(slicerSource, sourceField, slicerDestination)'
    fullName: 'add(slicerSource, sourceField, slicerDestination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(slicerSource: string | PivotTable | Table, sourceField: string | PivotField | number | TableColumn, slicerDestination?: string | Worksheet): Excel.Slicer;'
      return:
        type:
          - excel.Excel.Slicer
        description: |-
          <span data-ttu-id="461bd-105">Le nouveau segment.</span><span class="sxs-lookup"><span data-stu-id="461bd-105">The new slicer.</span></span>

          #### <a name="examples"></a><span data-ttu-id="461bd-106">Exemples</span><span class="sxs-lookup"><span data-stu-id="461bd-106">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
      parameters:
        - id: slicerSource
          description: '<span data-ttu-id="461bd-107">Source de données sur laquelle le nouveau segment sera basé.</span><span class="sxs-lookup"><span data-stu-id="461bd-107">The data source that the new slicer will be based on.</span></span> <span data-ttu-id="461bd-108">Il peut s’agir d’un objet PivotTable, d’un objet table ou d’une chaîne.</span><span class="sxs-lookup"><span data-stu-id="461bd-108">It can be a PivotTable object, a Table object or a string.</span></span> <span data-ttu-id="461bd-109">Lorsqu’un objet PivotTable est transmis, la source de données est la source de l’objet PivotTable.</span><span class="sxs-lookup"><span data-stu-id="461bd-109">When a PivotTable object is passed, the data source is the source of the PivotTable object.</span></span> <span data-ttu-id="461bd-110">Lorsqu’un objet table est transmis, la source de données est l’objet table.</span><span class="sxs-lookup"><span data-stu-id="461bd-110">When a Table object is passed, the data source is the Table object.</span></span> <span data-ttu-id="461bd-111">Lorsqu’une chaîne est transmise, elle est interprétée comme le nom/l’ID d’un tableau croisé dynamique/tableau.</span><span class="sxs-lookup"><span data-stu-id="461bd-111">When a string is passed, it is interpreted as the name/id of a PivotTable/Table.</span></span>'
          type:
            - string | PivotTable | Table
        - id: sourceField
          description: '<span data-ttu-id="461bd-112">Champ de la source de données à filtrer.</span><span class="sxs-lookup"><span data-stu-id="461bd-112">The field in the data source to filter by.</span></span> <span data-ttu-id="461bd-113">Il peut s’agir d’un objet PivotField, d’un objet TableColumn, de l’ID d’un champ de tableau croisé dynamique ou de l’ID/nom de TableColumn.</span><span class="sxs-lookup"><span data-stu-id="461bd-113">It can be a PivotField object, a TableColumn object, the id of a PivotField or the id/name of TableColumn.</span></span>'
          type:
            - string | PivotField | number | TableColumn
        - id: slicerDestination
          description: <span data-ttu-id="461bd-114">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="461bd-114">Optional.</span></span> <span data-ttu-id="461bd-115">Feuille de calcul dans laquelle le nouveau segment sera créé.</span><span class="sxs-lookup"><span data-stu-id="461bd-115">The worksheet where the new slicer will be created in.</span></span> <span data-ttu-id="461bd-116">Il peut s’agir d’un objet Worksheet ou du nom/ID d’une feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="461bd-116">It can be a Worksheet object or the name/id of a worksheet.</span></span> <span data-ttu-id="461bd-117">Ce paramètre peut être omis si la collection de segments est extraite de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="461bd-117">This parameter can be omitted if the slicer collection is retrieved from worksheet.</span></span>
          type:
            - string | Worksheet
  - uid: excel.Excel.SlicerCollection.context
    summary: <span data-ttu-id="461bd-118">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="461bd-118">The request context associated with the object.</span></span> <span data-ttu-id="461bd-119">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="461bd-119">This connects the add-in's process to the Office host application's process.</span></span>
    isPreview: true
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel.Excel.SlicerCollection.getCount
    summary: |-
      <span data-ttu-id="461bd-120">Renvoie le nombre de séries de la collection.</span><span class="sxs-lookup"><span data-stu-id="461bd-120">Returns the number of slicers in the collection.</span></span>

      <span data-ttu-id="461bd-121">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-121">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
  - uid: excel.Excel.SlicerCollection.getItem
    summary: |-
      <span data-ttu-id="461bd-122">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID.</span><span class="sxs-lookup"><span data-stu-id="461bd-122">Gets a slicer object using its name or id.</span></span>

      <span data-ttu-id="461bd-123">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-123">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Slicer;'
      return:
        type:
          - excel.Excel.Slicer
        description: |-


          #### <a name="examples"></a><span data-ttu-id="461bd-124">Exemples</span><span class="sxs-lookup"><span data-stu-id="461bd-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const slicer = context.workbook.slicers.getItem("Fruit Slicer");
              slicer.caption = "Fruit Types";
              slicer.left = 395;
              slicer.top = 15;
              slicer.height = 135;
              slicer.width = 150;
              await context.sync();
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="461bd-125">Nom ou ID du segment.</span><span class="sxs-lookup"><span data-stu-id="461bd-125">The name or id of the slicer.</span></span>
          type:
            - string
  - uid: excel.Excel.SlicerCollection.getItemAt
    summary: |-
      <span data-ttu-id="461bd-126">Obtient une forme en fonction de sa position dans la collection.</span><span class="sxs-lookup"><span data-stu-id="461bd-126">Gets a slicer based on its position in the collection.</span></span>

      <span data-ttu-id="461bd-127">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-127">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Slicer;'
      return:
        type:
          - excel.Excel.Slicer
        description: ''
      parameters:
        - id: index
          description: <span data-ttu-id="461bd-128">Valeur d’indice de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="461bd-128">Index value of the object to be retrieved.</span></span> <span data-ttu-id="461bd-129">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="461bd-129">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel.Excel.SlicerCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="461bd-130">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID. Si la feuille de calcul n’existe pas, renvoie un objet null.</span><span class="sxs-lookup"><span data-stu-id="461bd-130">Gets a slicer using its name or id. If the slicer does not exist, will return a null object.</span></span>

      <span data-ttu-id="461bd-131">\[[Ensemble d’API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="461bd-131">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    isPreview: true
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Slicer;'
      return:
        type:
          - excel.Excel.Slicer
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="461bd-132">Nom ou ID du segment à récupérer.</span><span class="sxs-lookup"><span data-stu-id="461bd-132">Name or Id of the slicer to be retrieved.</span></span>
          type:
            - string
  - uid: excel.Excel.SlicerCollection.items
    summary: <span data-ttu-id="461bd-133">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="461bd-133">Gets the loaded child items in this collection.</span></span>
    isPreview: true
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Slicer[];'
      return:
        type:
          - 'Excel.Slicer[]'
  - uid: excel.Excel.SlicerCollection.load
    summary: "<span data-ttu-id=\"461bd-134\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"461bd-134\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"461bd-135\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"461bd-135\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="461bd-136">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="461bd-136">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="461bd-137">`load(option?: string | string[]): Excel.SlicerCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="461bd-137">`load(option?: string | string[]): Excel.SlicerCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="461bd-138">`load(option?: { select?: string; expand?: string; }): Excel.SlicerCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="461bd-138">`load(option?: { select?: string; expand?: string; }): Excel.SlicerCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="461bd-139">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SlicerCollection`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="461bd-139">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.SlicerCollection` - Only available on collection types.</span></span> <span data-ttu-id="461bd-140">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="461bd-140">It is similar to the preceding signature.</span></span> <span data-ttu-id="461bd-141">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="461bd-141">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="461bd-142">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="461bd-142">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="461bd-143">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="461bd-143">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    isPreview: true
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.SlicerCollection;'
      return:
        type:
          - excel.Excel.SlicerCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.SlicerCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.SlicerCollection.load_1
    summary: <span data-ttu-id="461bd-144">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="461bd-144">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="461bd-145">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="461bd-145">You must call `context.sync()` before reading the properties.</span></span>
    isPreview: true
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.SlicerCollection;'
      return:
        type:
          - excel.Excel.SlicerCollection
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="461bd-146">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="461bd-146">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.SlicerCollection.load_2
    isPreview: true
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.SlicerCollection;'
      return:
        type:
          - excel.Excel.SlicerCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - office.OfficeExtension.LoadOption
  - uid: excel.Excel.SlicerCollection.toJSON
    summary: '<span data-ttu-id="461bd-147">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="461bd-147">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="461bd-148">.</span><span class="sxs-lookup"><span data-stu-id="461bd-148"></span></span> <span data-ttu-id="461bd-149">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="461bd-149"></span></span><!-- --><span data-ttu-id="461bd-150">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.SlicerCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.SlicerCollectionData`</span><span class="sxs-lookup"><span data-stu-id="461bd-150">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.SlicerCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.SlicerCollectionData`</span></span><!-- --><span data-ttu-id="461bd-151">) qui contient un tableau «éléments» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="461bd-151">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    isPreview: true
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.SlicerCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.SlicerCollectionData
        description: ''