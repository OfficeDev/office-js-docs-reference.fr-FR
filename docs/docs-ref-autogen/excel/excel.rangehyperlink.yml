### YamlMime:UniversalReference
ms.openlocfilehash: 98471be9225a68e19621dd41dd6bcf8f5838edf3
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26227449"
items:
- uid: excel.Excel.RangeHyperlink
  summary: >-
    Représente les chaînes nécessaires pour obtenir/définir un objet hyperlink (XHL).


    \[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.RangeHyperlink
  fullName: Excel.RangeHyperlink
  langs:
  - typeScript
  type: interface
  package: excel
  children:
  - excel.Excel.RangeHyperlink.address
  - excel.Excel.RangeHyperlink.documentReference
  - excel.Excel.RangeHyperlink.screenTip
  - excel.Excel.RangeHyperlink.textToDisplay
- uid: excel.Excel.RangeHyperlink.address
  summary: >-
    Représente l’url cible pour le lien hypertexte.


    \[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: address
  fullName: address
  langs:
  - typeScript
  type: property
  syntax:
    content: 'address?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"Created a hyperlink to a URL for each of the products in the first table.\");\n});\n```"
- uid: excel.Excel.RangeHyperlink.documentReference
  summary: >-
    Représente la cible de référence de document pour le lien hypertexte.


    \[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: documentReference
  fullName: documentReference
  langs:
  - typeScript
  type: property
  syntax:
    content: 'documentReference?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A9:A11\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a location within the workbook\n    // for each product name in the second table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Navigate to the '\" + cellText + \"' worksheet\",\n            documentReference: cellText + \"!A1\"\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"Created a hyperlink to a location in this workbook for each of the products in the second table.\");\n});\n```"
- uid: excel.Excel.RangeHyperlink.screenTip
  summary: >-
    Représente la chaîne affichée lorsque pointe sur le lien hypertexte.


    \[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: screenTip
  fullName: screenTip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'screenTip?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"Created a hyperlink to a URL for each of the products in the first table.\");\n});\n```"
- uid: excel.Excel.RangeHyperlink.textToDisplay
  summary: >-
    Représente la chaîne qui est affichée dans le coin supérieur gauche de la plupart des cellules de la plage.


    \[[Du jeu d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: textToDisplay
  fullName: textToDisplay
  langs:
  - typeScript
  type: property
  syntax:
    content: 'textToDisplay?: string;'
    return:
      type:
      - string
      description: "\n#### <a name=\"examples\"></a>範例\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Orders\");\n\n    let productsRange = sheet.getRange(\"A3:A5\");\n    productsRange.load(\"values\");\n\n    await context.sync();\n\n    // Create a hyperlink to a URL \n    // for each product name in the first table.\n    for (let i = 0; i < productsRange.values.length; i++) {\n        let cellRange = productsRange.getCell(i, 0);\n        let cellText = productsRange.values[i][0];\n\n        let hyperlink = {\n            textToDisplay: cellText,\n            screenTip: \"Search Bing for '\" + cellText + \"'\",\n            address: \"https://www.bing.com?q=\" + cellText\n        }\n        cellRange.hyperlink = hyperlink;\n    }\n\n    await context.sync();\n\n    OfficeHelpers.UI.notify(\"Created a hyperlink to a URL for each of the products in the first table.\");\n});\n```"
