### YamlMime:UniversalReference
ms.openlocfilehash: c827b346f429c90b6637cbaefe26dfa1c8677bb0
ms.sourcegitcommit: fd03ef72d6a546b0e4dbe0cc9e75d2a7cf9341a1
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/27/2019
ms.locfileid: "30303115"
items:
- uid: excel.Excel.WorksheetCollection
  summary: >-
    <span data-ttu-id="6506d-101">Représente une collection d’objets de feuille de calcul qui font partie du classeur.</span><span class="sxs-lookup"><span data-stu-id="6506d-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>


    <span data-ttu-id="6506d-102">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.WorksheetCollection
  fullName: Excel.WorksheetCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.WorksheetCollection.add
  - excel.Excel.WorksheetCollection.addFromBase64
  - excel.Excel.WorksheetCollection.addFromBase64_1
  - excel.Excel.WorksheetCollection.context
  - excel.Excel.WorksheetCollection.getActiveWorksheet
  - excel.Excel.WorksheetCollection.getCount
  - excel.Excel.WorksheetCollection.getFirst
  - excel.Excel.WorksheetCollection.getItem
  - excel.Excel.WorksheetCollection.getItemOrNullObject
  - excel.Excel.WorksheetCollection.getLast
  - excel.Excel.WorksheetCollection.items
  - excel.Excel.WorksheetCollection.load
  - excel.Excel.WorksheetCollection.load_1
  - excel.Excel.WorksheetCollection.load_2
  - excel.Excel.WorksheetCollection.onActivated
  - excel.Excel.WorksheetCollection.onAdded
  - excel.Excel.WorksheetCollection.onCalculated
  - excel.Excel.WorksheetCollection.onChanged
  - excel.Excel.WorksheetCollection.onDeactivated
  - excel.Excel.WorksheetCollection.onDeleted
  - excel.Excel.WorksheetCollection.onFiltered
  - excel.Excel.WorksheetCollection.onFormatChanged
  - excel.Excel.WorksheetCollection.onSelectionChanged
  - excel.Excel.WorksheetCollection.toJSON
- uid: excel.Excel.WorksheetCollection.add
  summary: >-
    <span data-ttu-id="6506d-p101">Ajoute une nouvelle feuille de calcul au classeur. La feuille de calcul est ajoutée à la fin des feuilles de calcul existantes. Si vous souhaitez activer la feuille de calcul nouvellement ajoutée, appelez la méthode .activate() pour cette feuille.</span><span class="sxs-lookup"><span data-stu-id="6506d-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>


    <span data-ttu-id="6506d-106">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: add(name)
  fullName: add(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(name?: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-107\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-107\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var wSheetName = 'Sample Name';\n    var worksheet = ctx.workbook.worksheets.add(wSheetName);\n    worksheet.load('name');\n    return ctx.sync().then(function() {\n        console.log(worksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: <span data-ttu-id="6506d-p102">Facultatif. Nom de la feuille de calcul à ajouter. Si cette propriété est définie, le nom doit être unique. Si cette propriété n’est pas définie, Excel détermine le nom de la nouvelle feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="6506d-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.addFromBase64
  summary: >-
    <span data-ttu-id="6506d-112">Insère les feuilles de calcul spécifiées d'un classeur dans le classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-112">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="6506d-113">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-113">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionType, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionType?: Excel.WorksheetPositionType, relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: "<span data-ttu-id=\"6506d-114\">Tableau où chaque élément représente l'ID de la nouvelle feuille de calcul insérée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-114\">An array where each item represents the Id of the new inserted worksheet.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-115\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-115\">Examples</span></span>\n\n```javascript\nconst myFile = <HTMLInputElement>document.getElementById(\"file\");\nconst reader = new FileReader();\n\nreader.onload = (event) => {\n    Excel.run((context) => {\n        // strip off the metadata before the base64-encoded string\n        const startIndex = (<string>(<FileReader>event.target).result).indexOf(\"base64,\");\n        const workbookContents = (<string>(<FileReader>event.target).result).substr(startIndex + 7);\n\n        const sheets = context.workbook.worksheets;\n        sheets.addFromBase64(\n            workbookContents,\n            null, // get all the worksheets \n            Excel.WorksheetPositionType.end // insert them after the current workbook's worksheets\n            );\n        return context.sync();\n    });\n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
    parameters:
    - id: base64File
      description: <span data-ttu-id="6506d-116">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="6506d-116">Required.</span></span> <span data-ttu-id="6506d-117">Chaîne base64 représentant le classeur source.</span><span class="sxs-lookup"><span data-stu-id="6506d-117">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="6506d-118">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-118">Optional.</span></span> <span data-ttu-id="6506d-119">Les noms de feuilles de calcul speified à insérer.</span><span class="sxs-lookup"><span data-stu-id="6506d-119">The speified worksheet names to insert.</span></span> <span data-ttu-id="6506d-120">Par défaut, il insère toutes les feuilles de calcul du classeur source.</span><span class="sxs-lookup"><span data-stu-id="6506d-120">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionType
      description: <span data-ttu-id="6506d-121">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-121">Optional.</span></span> <span data-ttu-id="6506d-122">Insérer un type de position, voir Excel. WorksheetPositionType pour plus d'informations.</span><span class="sxs-lookup"><span data-stu-id="6506d-122">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="6506d-123">La valeur par défaut est «démarrer».</span><span class="sxs-lookup"><span data-stu-id="6506d-123">Default is "Start".</span></span>
      type:
      - excel.Excel.WorksheetPositionType
    - id: relativeTo
      description: <span data-ttu-id="6506d-124">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-124">Optional.</span></span> <span data-ttu-id="6506d-125">L'objet de feuille de calcul de référence ou le nom/ID de feuille de calcul dans le classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-125">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="6506d-126">La valeur par défaut est null et repose sur le paramètre postionType il insère les feuilles de calcul au début ou à la fin du classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-126">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.addFromBase64_1
  summary: >-
    <span data-ttu-id="6506d-127">Insère les feuilles de calcul spécifiées d'un classeur dans le classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-127">Inserts the specified worksheets of a workbook into the current workbook.</span></span>


    <span data-ttu-id="6506d-128">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-128">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  fullName: addFromBase64(base64File, sheetNamesToInsert, positionTypeString, relativeTo)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addFromBase64(base64File: string, sheetNamesToInsert?: string[], positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Worksheet | string): OfficeExtension.ClientResult<string[]>;'
    return:
      type:
      - OfficeExtension.ClientResult<string[]>
      description: <span data-ttu-id="6506d-129">Tableau où chaque élément représente l'ID de la nouvelle feuille de calcul insérée.</span><span class="sxs-lookup"><span data-stu-id="6506d-129">An array where each item represents the Id of the new inserted worksheet.</span></span>
    parameters:
    - id: base64File
      description: <span data-ttu-id="6506d-130">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="6506d-130">Required.</span></span> <span data-ttu-id="6506d-131">Chaîne base64 représentant le classeur source.</span><span class="sxs-lookup"><span data-stu-id="6506d-131">Base64 string representing the source workbook.</span></span>
      type:
      - string
    - id: sheetNamesToInsert
      description: <span data-ttu-id="6506d-132">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-132">Optional.</span></span> <span data-ttu-id="6506d-133">Les noms de feuilles de calcul speified à insérer.</span><span class="sxs-lookup"><span data-stu-id="6506d-133">The speified worksheet names to insert.</span></span> <span data-ttu-id="6506d-134">Par défaut, il insère toutes les feuilles de calcul du classeur source.</span><span class="sxs-lookup"><span data-stu-id="6506d-134">By default it will insert all worksheets from the source workbook.</span></span>
      type:
      - string[]
    - id: positionTypeString
      description: <span data-ttu-id="6506d-135">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-135">Optional.</span></span> <span data-ttu-id="6506d-136">Insérer un type de position, voir Excel. WorksheetPositionType pour plus d'informations.</span><span class="sxs-lookup"><span data-stu-id="6506d-136">Insert position type, see Excel.WorksheetPositionType for details.</span></span> <span data-ttu-id="6506d-137">La valeur par défaut est «démarrer».</span><span class="sxs-lookup"><span data-stu-id="6506d-137">Default is "Start".</span></span>
      type:
      - "\"None\" | \"Before\" | \"After\" | \"Beginning\" | \"End\""
    - id: relativeTo
      description: <span data-ttu-id="6506d-138">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="6506d-138">Optional.</span></span> <span data-ttu-id="6506d-139">L'objet de feuille de calcul de référence ou le nom/ID de feuille de calcul dans le classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-139">The referencing worksheet object or worksheet name/id in the current workbook.</span></span> <span data-ttu-id="6506d-140">La valeur par défaut est null et repose sur le paramètre postionType il insère les feuilles de calcul au début ou à la fin du classeur actif.</span><span class="sxs-lookup"><span data-stu-id="6506d-140">Default is null and based on the postionType parameter it will insert worksheets at the start or end of the current workbook.</span></span>
      type:
      - Worksheet | string
- uid: excel.Excel.WorksheetCollection.context
  summary: <span data-ttu-id="6506d-141">Contexte de demande associé à l'objet.</span><span class="sxs-lookup"><span data-stu-id="6506d-141">The request context associated with the object.</span></span> <span data-ttu-id="6506d-142">Cette opération connecte le processus du complément au processus de l'application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="6506d-142">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.WorksheetCollection.getActiveWorksheet
  summary: >-
    <span data-ttu-id="6506d-143">Obtient la feuille de calcul active du classeur.</span><span class="sxs-lookup"><span data-stu-id="6506d-143">Gets the currently active worksheet in the workbook.</span></span>


    <span data-ttu-id="6506d-144">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-144">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getActiveWorksheet()
  fullName: getActiveWorksheet()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getActiveWorksheet(): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-145\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-145\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) {  \n    var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();\n    activeWorksheet.load('name');\n    return ctx.sync().then(function() {\n            console.log(activeWorksheet.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.WorksheetCollection.getCount
  summary: >-
    <span data-ttu-id="6506d-146">Obtient le nombre de feuilles de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-146">Gets the number of worksheets in the collection.</span></span>


    <span data-ttu-id="6506d-147">\[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-147">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount(visibleOnly)
  fullName: getCount(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="6506d-p112">Facultatif. Si la valeur est True, prend en compte uniquement les feuilles de calcul visibles et ignore les feuilles de calcul masquées.</span><span class="sxs-lookup"><span data-stu-id="6506d-p112">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getFirst
  summary: >-
    <span data-ttu-id="6506d-150">Obtient la première feuille de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-150">Gets the first worksheet in the collection.</span></span>


    <span data-ttu-id="6506d-151">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-151">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getFirst(visibleOnly)
  fullName: getFirst(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-152\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-152\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="6506d-p113">Facultatif. Si la valeur est True, prend en compte uniquement les feuilles de calcul visibles et ignore les feuilles de calcul masquées.</span><span class="sxs-lookup"><span data-stu-id="6506d-p113">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.getItem
  summary: >-
    <span data-ttu-id="6506d-155">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID.</span><span class="sxs-lookup"><span data-stu-id="6506d-155">Gets a worksheet object using its Name or ID.</span></span>


    <span data-ttu-id="6506d-156">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-156">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(key)
  fullName: getItem(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="6506d-157">Nom ou ID de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="6506d-157">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="6506d-p114">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID. Si la feuille de calcul n’existe pas, renvoie un objet null.</span><span class="sxs-lookup"><span data-stu-id="6506d-p114">Gets a worksheet object using its Name or ID. If the worksheet does not exist, will return a null object.</span></span>


    <span data-ttu-id="6506d-160">\[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-160">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(key)
  fullName: getItemOrNullObject(key)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: ''
    parameters:
    - id: key
      description: <span data-ttu-id="6506d-161">Nom ou ID de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="6506d-161">The Name or ID of the worksheet.</span></span>
      type:
      - string
- uid: excel.Excel.WorksheetCollection.getLast
  summary: >-
    <span data-ttu-id="6506d-162">Obtient la dernière feuille de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-162">Gets the last worksheet in the collection.</span></span>


    <span data-ttu-id="6506d-163">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-163">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getLast(visibleOnly)
  fullName: getLast(visibleOnly)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
    return:
      type:
      - excel.Excel.Worksheet
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-164\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-164\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    const firstSheet = sheets.getFirst().getNext();\n    const lastSheet = sheets.getLast();\n    const firstTaxRateRange = firstSheet.getRange(\"B2\");\n    const lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n});\n```"
    parameters:
    - id: visibleOnly
      description: <span data-ttu-id="6506d-p115">Facultatif. Si la valeur est True, prend en compte uniquement les feuilles de calcul visibles et ignore les feuilles de calcul masquées.</span><span class="sxs-lookup"><span data-stu-id="6506d-p115">Optional. If true, considers only visible worksheets, skipping over any hidden ones.</span></span>
      type:
      - boolean
- uid: excel.Excel.WorksheetCollection.items
  summary: <span data-ttu-id="6506d-167">Obtient les éléments enfants chargés dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-167">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Worksheet[];'
    return:
      type:
      - Excel.Worksheet[]
- uid: excel.Excel.WorksheetCollection.load
  summary: <span data-ttu-id="6506d-168">Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet.</span><span class="sxs-lookup"><span data-stu-id="6506d-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6506d-169">Vous devez appeler «Context. Sync ()» avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="6506d-169">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="6506d-170">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="6506d-170">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="6506d-171">`load(option?: string | string[]): Excel.WorksheetCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="6506d-171">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="6506d-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="6506d-172">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="6506d-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-173">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="6506d-174">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="6506d-174">It is similar to the preceding signature.</span></span> <span data-ttu-id="6506d-175">Option. Top indique le nombre maximal d'éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="6506d-175">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="6506d-176">Option. Skip indique le nombre d'éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="6506d-176">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="6506d-177">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d'éléments.</span><span class="sxs-lookup"><span data-stu-id="6506d-177">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.WorksheetCollection.load_1
  summary: <span data-ttu-id="6506d-178">Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet.</span><span class="sxs-lookup"><span data-stu-id="6506d-178">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="6506d-179">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="6506d-179">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-180\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-180\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var worksheets = ctx.workbook.worksheets;\n    worksheets.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < worksheets.items.length; i++)\n        {\n            console.log(worksheets.items[i].name);\n            console.log(worksheets.items[i].index);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="6506d-181">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="6506d-181">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.WorksheetCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
    return:
      type:
      - excel.Excel.WorksheetCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.WorksheetCollection.onActivated
  summary: >-
    <span data-ttu-id="6506d-182">Cet événement se produit lorsqu'une feuille de calcul du classeur est activée.</span><span class="sxs-lookup"><span data-stu-id="6506d-182">Occurs when any worksheet in the workbook is activated.</span></span>


    <span data-ttu-id="6506d-183">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-183">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-184\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-184\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onActivated.add(onActivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnActivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onAdded
  summary: >-
    <span data-ttu-id="6506d-185">SurVient lors de l'ajout d'une nouvelle feuille de calcul au classeur.</span><span class="sxs-lookup"><span data-stu-id="6506d-185">Occurs when a new worksheet is added to the workbook.</span></span>


    <span data-ttu-id="6506d-186">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-186">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-187\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-187\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets;\n    sheet.onAdded.add(onWorksheetAdd);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnAdded event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onCalculated
  summary: >-
    <span data-ttu-id="6506d-188">Cet événement se produit lorsqu'une feuille de calcul du classeur est calculée.</span><span class="sxs-lookup"><span data-stu-id="6506d-188">Occurs when any worksheet in the workbook is calculated.</span></span>


    <span data-ttu-id="6506d-189">\[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-189">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onCalculated
  fullName: onCalculated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
- uid: excel.Excel.WorksheetCollection.onChanged
  summary: >-
    <span data-ttu-id="6506d-190">Cet événement se produit lorsqu'une feuille de calcul du classeur est modifiée.</span><span class="sxs-lookup"><span data-stu-id="6506d-190">Occurs when any worksheet in the workbook is changed.</span></span>


    <span data-ttu-id="6506d-191">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-191">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onChanged
  fullName: onChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onDeactivated
  summary: >-
    <span data-ttu-id="6506d-192">Cet événement se produit lorsqu'une feuille de calcul du classeur est désactivée.</span><span class="sxs-lookup"><span data-stu-id="6506d-192">Occurs when any worksheet in the workbook is deactivated.</span></span>


    <span data-ttu-id="6506d-193">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-193">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"6506d-194\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"6506d-194\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    let sheets = context.workbook.worksheets;\n    sheets.onDeactivated.add(onDeactivate);\n\n    await context.sync();\n    console.log(\"A handler has been registered for the OnDeactivate event.\");\n});\n```"
- uid: excel.Excel.WorksheetCollection.onDeleted
  summary: >-
    <span data-ttu-id="6506d-195">SurVient lors de la suppression d'une feuille de calcul du classeur.</span><span class="sxs-lookup"><span data-stu-id="6506d-195">Occurs when a worksheet is deleted from the workbook.</span></span>


    <span data-ttu-id="6506d-196">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-196">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetDeletedEventArgs>
- uid: excel.Excel.WorksheetCollection.onFiltered
  summary: >-
    <span data-ttu-id="6506d-197">SurVient lors de l'application d'un filtre de feuille de calcul dans le classeur.</span><span class="sxs-lookup"><span data-stu-id="6506d-197">Occurs when any worksheet's filter is applied in the workbook.</span></span>


    <span data-ttu-id="6506d-198">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-198">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFiltered
  fullName: onFiltered
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFiltered: OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFilteredEventArgs>
- uid: excel.Excel.WorksheetCollection.onFormatChanged
  summary: >-
    <span data-ttu-id="6506d-199">Cet événement se produit lorsqu'une feuille de calcul dans le classeur a changé de format.</span><span class="sxs-lookup"><span data-stu-id="6506d-199">Occurs when any worksheet in the workbook has format changed.</span></span>


    <span data-ttu-id="6506d-200">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-200">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onFormatChanged
  fullName: onFormatChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.onSelectionChanged
  summary: >-
    <span data-ttu-id="6506d-201">Se produit lorsque la sélection change dans n'importe quelle feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="6506d-201">Occurs when the selection changes on any worksheet.</span></span>


    <span data-ttu-id="6506d-202">\[[Ensemble d'API: EXCELAPI Beta (aperçu uniquement)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="6506d-202">\[ [API set: ExcelApi BETA (PREVIEW ONLY)](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  isPreview: true
  name: onSelectionChanged
  fullName: onSelectionChanged
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
- uid: excel.Excel.WorksheetCollection.toJSON
  summary: <span data-ttu-id="6506d-203">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu'un objet d'API est transmis à. `JSON.stringify()` <!-- --></span><span class="sxs-lookup"><span data-stu-id="6506d-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="6506d-204">(`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l'objet qui lui est passé.) Tandis que `Excel.WorksheetCollection` l'objet d'origine est un objet `toJSON` d'API, la méthode renvoie un objet JavaScript `Excel.Interfaces.WorksheetCollectionData` <!-- -->simple (tapé sous la forme) qui contient un tableau d'éléments avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="6506d-204">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.WorksheetCollectionData
      description: ''
