### YamlMime:UniversalReference
ms.openlocfilehash: 0ba9b9efdfcbcd0573ab1eda7c0a4734a0de14a9
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724611"
items:
- uid: excel.Excel.CustomXmlPartScopedCollection
  summary: >-
    <span data-ttu-id="f89b1-101">Collection limitée des parties XML personnalisées.</span><span class="sxs-lookup"><span data-stu-id="f89b1-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="f89b1-102">Une collection étendue est le résultat d’une opération, par exemple, le filtrage par espace de noms.</span><span class="sxs-lookup"><span data-stu-id="f89b1-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="f89b1-103">Une collection étendue ne peut pas être étendue d’autres.</span><span class="sxs-lookup"><span data-stu-id="f89b1-103">A scoped collection cannot be scoped any further.</span></span>


    <span data-ttu-id="f89b1-104">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPartScopedCollection
  fullName: Excel.CustomXmlPartScopedCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPartScopedCollection.context
  - excel.Excel.CustomXmlPartScopedCollection.getCount
  - excel.Excel.CustomXmlPartScopedCollection.getItem
  - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.items
  - excel.Excel.CustomXmlPartScopedCollection.load
  - excel.Excel.CustomXmlPartScopedCollection.toJSON
- uid: excel.Excel.CustomXmlPartScopedCollection.context
  summary: <span data-ttu-id="f89b1-105">Contexte de la requête associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="f89b1-105">The request context associated with the object.</span></span> <span data-ttu-id="f89b1-106">Il connecte processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="f89b1-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CustomXmlPartScopedCollection.getCount
  summary: >-
    <span data-ttu-id="f89b1-107">Obtient le nombre de parties CustomXML dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="f89b1-107">Gets the number of CustomXML parts in this collection.</span></span>


    <span data-ttu-id="f89b1-108">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f89b1-109\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"f89b1-109\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getItem
  summary: >-
    <span data-ttu-id="f89b1-110">Obtient une partie XML personnalisée en fonction de son ID.</span><span class="sxs-lookup"><span data-stu-id="f89b1-110">Gets a custom XML part based on its ID.</span></span>


    <span data-ttu-id="f89b1-111">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="f89b1-112">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="f89b1-112">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="f89b1-113">Obtient une partie XML personnalisée en fonction de son ID.</span><span class="sxs-lookup"><span data-stu-id="f89b1-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="f89b1-114">Si l’objet CustomXmlPart n’existe pas, la propriété isNull de retour de l’objet sera true.</span><span class="sxs-lookup"><span data-stu-id="f89b1-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>


    <span data-ttu-id="f89b1-115">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f89b1-116\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"f89b1-116\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n        const xmlBlob = customXmlPart.getXml();\n        customXmlPart.delete();\n        customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n        await context.sync();\n\n        if (customXmlPart.isNullObject) {\n            $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n            // Delete the unneeded setting too.\n            xmlPartIDSetting.delete();            \n        } else {\n            const readableXml = addLineBreaksToXML(xmlBlob.value);\n            const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n            $(\"#display-xml\").text(strangeMessage);\n        }\n\n        await context.sync();\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="f89b1-117">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="f89b1-117">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  summary: >-
    <span data-ttu-id="f89b1-118">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class="sxs-lookup"><span data-stu-id="f89b1-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="f89b1-119">Sinon, cette méthode génère une erreur.</span><span class="sxs-lookup"><span data-stu-id="f89b1-119">Otherwise, this method produces an error.</span></span>


    <span data-ttu-id="f89b1-120">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItem()
  fullName: getOnlyItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItem(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"f89b1-121\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"f89b1-121\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        OfficeHelpers.UI.notify(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}.\n            There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  summary: >-
    <span data-ttu-id="f89b1-122">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class="sxs-lookup"><span data-stu-id="f89b1-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="f89b1-123">Dans le cas contraire, cette méthode renvoie la valeur Null.</span><span class="sxs-lookup"><span data-stu-id="f89b1-123">Otherwise, this method returns Null.</span></span>


    <span data-ttu-id="f89b1-124">\[[Du jeu d’API : ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="f89b1-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItemOrNullObject()
  fullName: getOnlyItemOrNullObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
- uid: excel.Excel.CustomXmlPartScopedCollection.items
  summary: <span data-ttu-id="f89b1-125">Obtient l’enfant chargé éléments dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="f89b1-125">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.CustomXmlPart[];'
    return:
      type:
      - Excel.CustomXmlPart[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load
  summary: <span data-ttu-id="f89b1-126">Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées.</span><span class="sxs-lookup"><span data-stu-id="f89b1-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="f89b1-127">Vous devez appeler « context.sync() » avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="f89b1-127">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="f89b1-128">Outre cette signature, cette méthode présente les signatures suivantes :</span><span class="sxs-lookup"><span data-stu-id="f89b1-128">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="f89b1-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="f89b1-129">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="f89b1-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-Uniquement disponible sur les types de la collection.</span><span class="sxs-lookup"><span data-stu-id="f89b1-130">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="f89b1-131">Il est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="f89b1-131">It is similar to the preceding signature.</span></span> <span data-ttu-id="f89b1-132">Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection.</span><span class="sxs-lookup"><span data-stu-id="f89b1-132">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="f89b1-133">Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="f89b1-133">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="f89b1-134">Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="f89b1-134">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="f89b1-135">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="f89b1-135">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
  summary: <span data-ttu-id="f89b1-136">Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="f89b1-136">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="f89b1-137">(`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’original `Excel.CustomXmlPartScopedCollection` objet est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `Excel.Interfaces.CustomXmlPartScopedCollectionData` <!-- -->) qui contient un tableau « éléments » avec copies superficielles de toutes les propriétés chargées à partir des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="f89b1-137">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
      description: ''
