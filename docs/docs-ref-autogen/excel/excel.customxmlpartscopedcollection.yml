### YamlMime:UniversalReference
ms.openlocfilehash: fb24dcba61cbd384f66ac9c24d671181a5f41fb5
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/20/2019
ms.locfileid: "30095638"
items:
- uid: excel.Excel.CustomXmlPartScopedCollection
  summary: >-
    <span data-ttu-id="53532-101">Collection limitée des parties XML personnalisées.</span><span class="sxs-lookup"><span data-stu-id="53532-101">A scoped collection of custom XML parts.</span></span> <span data-ttu-id="53532-102">Une collection d'étendues est le résultat d'une opération, par exemple, le filtrage par espace de noms.</span><span class="sxs-lookup"><span data-stu-id="53532-102">A scoped collection is the result of some operation, e.g. filtering by namespace.</span></span> <span data-ttu-id="53532-103">Une collection d'étendues ne peut pas être étendue.</span><span class="sxs-lookup"><span data-stu-id="53532-103">A scoped collection cannot be scoped any further.</span></span>


    <span data-ttu-id="53532-104">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-104">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.CustomXmlPartScopedCollection
  fullName: Excel.CustomXmlPartScopedCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.CustomXmlPartScopedCollection.context
  - excel.Excel.CustomXmlPartScopedCollection.getCount
  - excel.Excel.CustomXmlPartScopedCollection.getItem
  - excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  - excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  - excel.Excel.CustomXmlPartScopedCollection.items
  - excel.Excel.CustomXmlPartScopedCollection.load
  - excel.Excel.CustomXmlPartScopedCollection.load_1
  - excel.Excel.CustomXmlPartScopedCollection.load_2
  - excel.Excel.CustomXmlPartScopedCollection.toJSON
- uid: excel.Excel.CustomXmlPartScopedCollection.context
  summary: <span data-ttu-id="53532-105">Contexte de demande associé à l'objet.</span><span class="sxs-lookup"><span data-stu-id="53532-105">The request context associated with the object.</span></span> <span data-ttu-id="53532-106">Cette opération connecte le processus du complément au processus de l'application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="53532-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.CustomXmlPartScopedCollection.getCount
  summary: >-
    <span data-ttu-id="53532-107">Obtient le nombre de parties CustomXML dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="53532-107">Gets the number of CustomXML parts in this collection.</span></span>


    <span data-ttu-id="53532-108">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-108">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"53532-109\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"53532-109\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getItem
  summary: >-
    <span data-ttu-id="53532-110">Obtient une partie XML personnalisée en fonction de son ID.</span><span class="sxs-lookup"><span data-stu-id="53532-110">Gets a custom XML part based on its ID.</span></span>


    <span data-ttu-id="53532-111">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-111">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItem(id)
  fullName: getItem(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
    parameters:
    - id: id
      description: <span data-ttu-id="53532-112">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="53532-112">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getItemOrNullObject
  summary: >-
    <span data-ttu-id="53532-113">Obtient une partie XML personnalisée en fonction de son ID.</span><span class="sxs-lookup"><span data-stu-id="53532-113">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id="53532-114">Si l'objet CustomXmlPart n'existe pas, la propriété isNull de l'objet renvoie la valeur true.</span><span class="sxs-lookup"><span data-stu-id="53532-114">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>


    <span data-ttu-id="53532-115">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-115">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getItemOrNullObject(id)
  fullName: getItemOrNullObject(id)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"53532-116\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"53532-116\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const settings = context.workbook.settings;\n    const xmlPartIDSetting = settings.getItemOrNullObject(\"ContosoReviewXmlPartId\").load(\"value\");\n    await context.sync();\n\n    if (xmlPartIDSetting.value) {   \n        let customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);\n        const xmlBlob = customXmlPart.getXml();\n        customXmlPart.delete();\n        customXmlPart = context.workbook.customXmlParts.getItemOrNullObject(xmlPartIDSetting.value);\n\n        await context.sync();\n\n        if (customXmlPart.isNullObject) {\n            $(\"#display-xml\").text(`The XML part with the id ${xmlPartIDSetting.value} has been deleted.`);\n\n            // Delete the unneeded setting too.\n            xmlPartIDSetting.delete();            \n        } else {\n            const readableXml = addLineBreaksToXML(xmlBlob.value);\n            const strangeMessage = `This is strange. The XML part with the id ${xmlPartIDSetting.value} has not been deleted:\\n${readableXml}`\n            $(\"#display-xml\").text(strangeMessage);\n        }\n\n        await context.sync();\n    }\n});\n```"
    parameters:
    - id: id
      description: <span data-ttu-id="53532-117">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="53532-117">ID of the object to be retrieved.</span></span>
      type:
      - string
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItem
  summary: >-
    <span data-ttu-id="53532-118">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class="sxs-lookup"><span data-stu-id="53532-118">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="53532-119">Dans le cas contraire, cette méthode génère une erreur.</span><span class="sxs-lookup"><span data-stu-id="53532-119">Otherwise, this method produces an error.</span></span>


    <span data-ttu-id="53532-120">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-120">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItem()
  fullName: getOnlyItem()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItem(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"53532-121\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"53532-121\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    $(\"#display-xml\").text(\"\");\n    const contosoNamespace = \"http://schemas.contoso.com/review/1.0\";\n    const customXmlParts = context.workbook.customXmlParts;\n    const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);\n    const numberOfPartsInNamespace = filteredXmlParts.getCount();\n\n    await context.sync();\n\n    if (numberOfPartsInNamespace.value == 1) {\n        const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();\n        const xmlBlob = onlyXmlPartInNamespace.getXml();\n\n        await context.sync();\n\n        // Make it a bit more readable.\n        const readableXml = xmlBlob.value.replace(/></g, \">\\n<\");\n\n        $(\"#display-xml\").text(`The only XML part in the namespace ${contosoNamespace} is:\n            ${readableXml}`);\n\n    } else {\n        console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);\n    }        \n\n    await context.sync();\n});\n```"
- uid: excel.Excel.CustomXmlPartScopedCollection.getOnlyItemOrNullObject
  summary: >-
    <span data-ttu-id="53532-122">Si la collection contient exactement un élément, cette méthode le renvoie.</span><span class="sxs-lookup"><span data-stu-id="53532-122">If the collection contains exactly one item, this method returns it.</span></span> <span data-ttu-id="53532-123">Dans le cas contraire, cette méthode renvoie la valeur null.</span><span class="sxs-lookup"><span data-stu-id="53532-123">Otherwise, this method returns Null.</span></span>


    <span data-ttu-id="53532-124">\[[Ensemble d'API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="53532-124">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getOnlyItemOrNullObject()
  fullName: getOnlyItemOrNullObject()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getOnlyItemOrNullObject(): Excel.CustomXmlPart;'
    return:
      type:
      - excel.Excel.CustomXmlPart
      description: ''
- uid: excel.Excel.CustomXmlPartScopedCollection.items
  summary: <span data-ttu-id="53532-125">Obtient les éléments enfants chargés dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="53532-125">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.CustomXmlPart[];'
    return:
      type:
      - Excel.CustomXmlPart[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load
  summary: <span data-ttu-id="53532-126">Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet.</span><span class="sxs-lookup"><span data-stu-id="53532-126">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="53532-127">Vous devez appeler «Context. Sync ()» avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="53532-127">You must call "context.sync()" before reading the properties.</span></span>
  remarks: >-
    <span data-ttu-id="53532-128">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="53532-128">In addition to this signature, this method has the following signatures:</span></span>


    <span data-ttu-id="53532-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="53532-129">`load(option?: string | string[]): Excel.CustomXmlPartScopedCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>


    <span data-ttu-id="53532-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="53532-130">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartScopedCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>


    <span data-ttu-id="53532-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="53532-131">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartScopedCollection` - Only available on collection types.</span></span> <span data-ttu-id="53532-132">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="53532-132">It is similar to the preceding signature.</span></span> <span data-ttu-id="53532-133">Option. Top indique le nombre maximal d'éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="53532-133">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="53532-134">Option. Skip indique le nombre d'éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="53532-134">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="53532-135">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d'éléments.</span><span class="sxs-lookup"><span data-stu-id="53532-135">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.CustomXmlPartScopedCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel.Excel.CustomXmlPartScopedCollection.load_1
  summary: <span data-ttu-id="53532-136">Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet.</span><span class="sxs-lookup"><span data-stu-id="53532-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="53532-137">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="53532-137">You must call `context.sync()` before reading the properties.</span></span>
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: propertyNames
      description: <span data-ttu-id="53532-138">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="53532-138">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.CustomXmlPartScopedCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartScopedCollection;'
    return:
      type:
      - excel.Excel.CustomXmlPartScopedCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel.Excel.CustomXmlPartScopedCollection.toJSON
  summary: <span data-ttu-id="53532-139">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu'un objet d'API est transmis à. `JSON.stringify()` <!-- --></span><span class="sxs-lookup"><span data-stu-id="53532-139">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="53532-140">(`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l'objet qui lui est passé.) Tandis que `Excel.CustomXmlPartScopedCollection` l'objet d'origine est un objet `toJSON` d'API, la méthode renvoie un objet JavaScript `Excel.Interfaces.CustomXmlPartScopedCollectionData` <!-- -->simple (tapé sous la forme) qui contient un tableau d'éléments avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="53532-140">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartScopedCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartScopedCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.CustomXmlPartScopedCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.CustomXmlPartScopedCollectionData
      description: ''
