### YamlMime:UniversalReference
ms.openlocfilehash: 4f2b6bcc1d2f294cdcbc3fbf75ba3c042f2943e6
ms.sourcegitcommit: 06eebee5e68d349f78e6bc3bb0ef099fe063cf04
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 01/17/2019
ms.locfileid: "28724366"
items:
- uid: excel.Excel.TableRow
  summary: >-
    <span data-ttu-id="5b807-101">Représente une ligne d’un tableau.</span><span class="sxs-lookup"><span data-stu-id="5b807-101">Represents a row in a table.</span></span>


    <span data-ttu-id="5b807-102">Notez que, contrairement aux plages ou de colonnes qui seront si de nouvelles lignes/colonnes sont ajoutés avant l’ajustement, un objet TableRow représente l’emplacement physique de la ligne du tableau, mais pas les données.</span><span class="sxs-lookup"><span data-stu-id="5b807-102">Note that unlike Ranges or Columns, which will adjust if new rows/columns are added before them, a TableRow object represent the physical location of the table row, but not the data.</span></span> <span data-ttu-id="5b807-103">Autrement dit, si les données sont triées ou si l’ajout de nouvelles lignes, une ligne de tableau continuera pointe au niveau de l’index pour lequel il a été créé.</span><span class="sxs-lookup"><span data-stu-id="5b807-103">That is, if the data is sorted or if new rows are added, a table row will continue to point at the index for which it was created.</span></span>


    <span data-ttu-id="5b807-104">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5b807-104">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: Excel.TableRow
  fullName: Excel.TableRow
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel
  children:
  - excel.Excel.TableRow.context
  - excel.Excel.TableRow.delete
  - excel.Excel.TableRow.getRange
  - excel.Excel.TableRow.index
  - excel.Excel.TableRow.load
  - excel.Excel.TableRow.toJSON
  - excel.Excel.TableRow.values
- uid: excel.Excel.TableRow.context
  summary: <span data-ttu-id="5b807-105">Contexte de la requête associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="5b807-105">The request context associated with the object.</span></span> <span data-ttu-id="5b807-106">Il connecte processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="5b807-106">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel.Excel.TableRow.delete
  summary: >-
    <span data-ttu-id="5b807-107">Supprime la ligne du tableau.</span><span class="sxs-lookup"><span data-stu-id="5b807-107">Deletes the row from the table.</span></span>


    <span data-ttu-id="5b807-108">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5b807-108">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"5b807-109\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-109\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.delete();\n    return ctx.sync(); \n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.getRange
  summary: >-
    <span data-ttu-id="5b807-110">Renvoie l’objet de plage associé à la ligne entière.</span><span class="sxs-lookup"><span data-stu-id="5b807-110">Returns the range object associated with the entire row.</span></span>


    <span data-ttu-id="5b807-111">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5b807-111">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: getRange()
  fullName: getRange
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRange(): Excel.Range;'
    return:
      type:
      - excel.Excel.Range
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"5b807-112\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-112\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(0);\n    var rowRange = row.getRange();\n    rowRange.load('address');\n    return ctx.sync().then(function() {\n        console.log(rowRange.address);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: excel.Excel.TableRow.index
  summary: >-
    <span data-ttu-id="5b807-p103">Renvoie le numéro d’indice de la ligne dans la collection de lignes du tableau. Avec indice zéro. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="5b807-p103">Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.</span></span>


    <span data-ttu-id="5b807-116">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5b807-116">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: index
  fullName: index
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly index: number;'
    return:
      type:
      - number
- uid: excel.Excel.TableRow.load
  summary: <span data-ttu-id="5b807-117">Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées.</span><span class="sxs-lookup"><span data-stu-id="5b807-117">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="5b807-118">Vous devez appeler « context.sync() » avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="5b807-118">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"5b807-119\">Outre cette signature, cette méthode présente les signatures suivantes :</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-119\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"5b807-120\">`load(option?: { select?: string; expand?: string; }): Excel.TableRow`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-120\">`load(option?: { select?: string; expand?: string; }): Excel.TableRow` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"5b807-121\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow`-Uniquement disponible sur les types de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-121\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.TableRow` - Only available on collection types.</span></span> <span data-ttu-id=\"5b807-122\">Il est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-122\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"5b807-123\">Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-123\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"5b807-124\">Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-124\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"5b807-125\">Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-125\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"5b807-126\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"5b807-126\">Examples</span></span>\n\n```javascript\nExcel.run(function (ctx) { \n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItem(0);\n    row.load('index');\n    return ctx.sync().then(function() {\n        console.log(row.index);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var tables = ctx.workbook.tables;\n    var newValues = [[\"New\", \"Values\", \"For\", \"New\", \"Row\"]];\n    var tableName = 'Table1';\n    var row = ctx.workbook.tables.getItem(tableName).rows.getItemAt(2);\n    row.values = newValues;\n    row.load('values');\n    return ctx.sync().then(function() {\n        console.log(row.values);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Excel.TableRow;'
    return:
      type:
      - excel.Excel.TableRow
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="5b807-127">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="5b807-127">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: excel.Excel.TableRow.toJSON
  summary: <span data-ttu-id="5b807-128">Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="5b807-128">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="5b807-129">(`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’objet Excel.TableRow d’origine est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `Excel.Interfaces.TableRowData` <!-- -->) qui contient des copies superficielles de toutes les propriétés enfant chargé à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="5b807-129">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.TableRow object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableRowData`<!-- -->) that contains shallow copies of any loaded child properties from the original object.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.TableRowData;'
    return:
      type:
      - excel.Excel.Interfaces.TableRowData
      description: ''
- uid: excel.Excel.TableRow.values
  summary: >-
    <span data-ttu-id="5b807-130">Représente les valeurs brutes de la plage spécifiée.</span><span class="sxs-lookup"><span data-stu-id="5b807-130">Represents the raw values of the specified range.</span></span> <span data-ttu-id="5b807-131">Les données renvoyées peuvent être de type chaîne, nombre ou une valeur boolean.</span><span class="sxs-lookup"><span data-stu-id="5b807-131">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="5b807-132">Cellules qui contiennent une erreur renvoie la chaîne d’erreur.</span><span class="sxs-lookup"><span data-stu-id="5b807-132">Cells that contain an error will return the error string.</span></span>


    <span data-ttu-id="5b807-133">\[[Du jeu d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="5b807-133">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
  name: values
  fullName: values
  langs:
  - typeScript
  type: property
  syntax:
    content: 'values: any[][];'
    return:
      type:
      - any[][]
