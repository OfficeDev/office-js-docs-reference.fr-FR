### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    summary: "<span data-ttu-id=\"666b6-101\">Représente une collection de toutes les mises en forme conditionnelles qui chevauchent la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-101\">Represents a collection of all the conditional formats that are overlap the range.</span></span>\n\n<span data-ttu-id=\"666b6-102\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-102\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.ConditionalFormatCollection
    fullName: Excel.ConditionalFormatCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormatCollection#add:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#add:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#context:member'
      - 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#items:member'
      - 'excel!Excel.ConditionalFormatCollection#load:member(1)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(2)'
      - 'excel!Excel.ConditionalFormatCollection#load:member(3)'
      - 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(1)'
    summary: "<span data-ttu-id=\"666b6-103\">Ajoute un nouveau format conditionnel à la collection à la priorité la plus haute.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-103\">Adds a new conditional format to the collection at the first/top priority.</span></span>\n\n<span data-ttu-id=\"666b6-104\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-104\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: add(type)
    fullName: add(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(type: Excel.ConditionalFormatType): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="666b6-105">Exemples</span><span class="sxs-lookup"><span data-stu-id="666b6-105">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = "YellowThreeArrows";
              return ctx.sync().then(function () {
                  console.log("Added new yellow three arrow icon set.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
      parameters:
        - id: type
          description: '<span data-ttu-id="666b6-106">Type de mise en forme conditionnelle ajoutée.</span><span class="sxs-lookup"><span data-stu-id="666b6-106">The type of conditional format being added.</span></span> <span data-ttu-id="666b6-107">Pour plus d’informations, voir Excel. ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="666b6-107">See Excel.ConditionalFormatType for details.</span></span>'
          type:
            - 'excel!Excel.ConditionalFormatType:enum'
  - uid: 'excel!Excel.ConditionalFormatCollection#add:member(2)'
    summary: "<span data-ttu-id=\"666b6-108\">Ajoute un nouveau format conditionnel à la collection à la priorité la plus haute.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-108\">Adds a new conditional format to the collection at the first/top priority.</span></span>\n\n<span data-ttu-id=\"666b6-109\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-109\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: add(typeString)
    fullName: add(typeString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(typeString: "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: typeString
          description: '<span data-ttu-id="666b6-110">Type de mise en forme conditionnelle ajoutée.</span><span class="sxs-lookup"><span data-stu-id="666b6-110">The type of conditional format being added.</span></span> <span data-ttu-id="666b6-111">Pour plus d’informations, voir Excel. ConditionalFormatType.</span><span class="sxs-lookup"><span data-stu-id="666b6-111">See Excel.ConditionalFormatType for details.</span></span>'
          type:
            - '"Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
  - uid: 'excel!Excel.ConditionalFormatCollection#clearAll:member(1)'
    summary: "<span data-ttu-id=\"666b6-112\">Efface toutes les mises en forme conditionnelles actives sur la plage spécifiée actuelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-112\">Clears all conditional formats active on the current specified range.</span></span>\n\n<span data-ttu-id=\"666b6-113\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-113\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: clearAll()
    fullName: clearAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAll(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="666b6-114">Exemples</span><span class="sxs-lookup"><span data-stu-id="666b6-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.clearAll();
              return ctx.sync().then(function () {
                  console.log("Cleared all conditional formats from this range.");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange();
              range.conditionalFormats.clearAll();

              await context.sync();

              $(".conditional-formats").hide();
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#context:member'
    summary: <span data-ttu-id="666b6-115">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="666b6-115">The request context associated with the object.</span></span> <span data-ttu-id="666b6-116">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="666b6-116">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount:member(1)'
    summary: "<span data-ttu-id=\"666b6-117\">Renvoie le nombre de mises en forme conditionnelles dans le classeur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-117\">Returns the number of conditional formats in the workbook.</span></span> <span data-ttu-id=\"666b6-118\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-118\">Read-only.</span></span>\n\n<span data-ttu-id=\"666b6-119\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-119\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="666b6-120">Exemples</span><span class="sxs-lookup"><span data-stu-id="666b6-120">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);
              conditionalFormat.iconOrNull.style = Excel.IconSet.fourTrafficLights;
              var cfCount = range.conditionalFormats.getCount(); 

              return ctx.sync().then(function () {
                  console.log("Count: " + cfCount.value);
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.ConditionalFormatCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"666b6-121\">Renvoie une mise en forme conditionnelle à un ID donné.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-121\">Returns a conditional format for the given ID.</span></span>\n\n<span data-ttu-id=\"666b6-122\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-122\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-
          <span data-ttu-id="666b6-123">Objet de mise en forme conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="666b6-123">Conditional Format object.</span></span>

          #### <a name="examples"></a><span data-ttu-id="666b6-124">Exemples</span><span class="sxs-lookup"><span data-stu-id="666b6-124">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="666b6-125">ID de la mise en forme conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="666b6-125">The id of the conditional format.</span></span>
          type:
            - string
  - uid: 'excel!Excel.ConditionalFormatCollection#getItemAt:member(1)'
    summary: "<span data-ttu-id=\"666b6-126\">Renvoie une mise en forme conditionnelle à l’index donné.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-126\">Returns a conditional format at the given index.</span></span>\n\n<span data-ttu-id=\"666b6-127\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-127\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="666b6-128">Exemples</span><span class="sxs-lookup"><span data-stu-id="666b6-128">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var conditionalFormats = range.conditionalFormats;
              var conditionalFormat = conditionalFormats.getItemAt(3);
              return ctx.sync().then(function () {
                  console.log("Conditional Format at Item 3 Loaded");
              });
          }).catch(function (error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="666b6-129">Index des mises en forme conditionnelles à récupérer.</span><span class="sxs-lookup"><span data-stu-id="666b6-129">Index of the conditional formats to be retrieved.</span></span>
          type:
            - number
  - uid: 'excel!Excel.ConditionalFormatCollection#items:member'
    summary: <span data-ttu-id="666b6-130">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="666b6-130">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.ConditionalFormat[];'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection#items~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(1)'
    summary: "<span data-ttu-id=\"666b6-131\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-131\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"666b6-132\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-132\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: "<span data-ttu-id=\"666b6-133\">En plus de cette signature, cette méthode possède les signatures suivantes\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-133\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"666b6-134\">`load(option?: string | string[]): Excel.ConditionalFormatCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-134\">`load(option?: string | string[]): Excel.ConditionalFormatCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>\n\n<span data-ttu-id=\"666b6-135\">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-135\">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormatCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"666b6-136\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection`-Uniquement disponible sur les types de collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-136\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormatCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"666b6-137\">Elle est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-137\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"666b6-138\">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-138\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"666b6-139\">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-139\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"666b6-140\">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-140\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>"
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.ConditionalFormatCollection#load~0:complex'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(2)'
    summary: <span data-ttu-id="666b6-141">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="666b6-141">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="666b6-142">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="666b6-142">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="666b6-143">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="666b6-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormatCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.ConditionalFormatCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"666b6-144\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-144\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"666b6-145\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-145\"></span></span> <span data-ttu-id=\"666b6-146\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-146\"></span></span><!-- --><span data-ttu-id=\"666b6-147\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.ConditionalFormatCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.ConditionalFormatCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-147\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.ConditionalFormatCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatCollectionData`</span></span><!-- --><span data-ttu-id=\"666b6-148\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"666b6-148\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: Excel.ConditionalFormat
  - uid: 'excel!Excel.ConditionalFormatType:enum'
    name: Excel.ConditionalFormatType
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.ConditionalFormatCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ConditionalFormatCollection#items~0:complex'
    name: 'Excel.ConditionalFormat[]'
    fullName: 'Excel.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormat:class'
        name: Excel.ConditionalFormat
        fullName: Excel.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.ConditionalFormatCollection#load~0:complex'
    name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionLoadOptions:interface'
        name: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
        fullName: Excel.Interfaces.ConditionalFormatCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.ConditionalFormatCollectionData:interface'
    name: Excel.Interfaces.ConditionalFormatCollectionData