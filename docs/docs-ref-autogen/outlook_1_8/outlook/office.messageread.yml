### YamlMime:TSType
name: Office.MessageRead
uid: outlook!Office.MessageRead:interface
package: outlook!
fullName: Office.MessageRead
summary: >-
  Mode de lecture de message d' [Office. Context. Mailbox. Item](xref:outlook!Office.Item:interface)<!-- -->.


  **Important**: il s’agit d’un objet Outlook interne, qui n’est pas directement exposé via les interfaces existantes. Vous devez considérer ceci comme un mode de `Office.context.mailbox.item`<!-- -->. Pour plus d’informations, reportez-vous à la page [modèle objet](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item) .


  Interfaces parentes :


  - [ItemRead](xref:outlook!Office.ItemRead:interface)


  - [Message](xref:outlook!Office.Message:interface)
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: attachments
  uid: outlook!Office.MessageRead#attachments:member
  package: outlook!
  fullName: attachments
  summary: Obtient les pièces jointes de l’élément sous la forme d’un tableau.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    **Remarque**: certains types de fichiers sont bloqués par Outlook en raison de problèmes de sécurité potentiels et ne sont donc pas renvoyés. Pour plus d’informations, consultez la rubrique [pièces jointes bloquées dans Outlook](https://support.office.com/article/Blocked-attachments-in-Outlook-434752E1-02D3-4E90-9124-8B81E49A8519)<!-- -->.


    #### <a name="examples"></a>Exemples


    ```javascript

    // The following code builds an HTML string with details of all attachments on the current item.

    var item = Office.context.mailbox.item;

    var outputString = "";


    if (item.attachments.length > 0) {
        for (i = 0 ; i < item.attachments.length ; i++) {
            var attachment = item.attachments[i];
            outputString += "<BR>" + i + ". Name: ";
            outputString += attachment.name;
            outputString += "<BR>ID: " + attachment.id;
            outputString += "<BR>contentType: " + attachment.contentType;
            outputString += "<BR>size: " + attachment.size;
            outputString += "<BR>attachmentType: " + attachment.attachmentType;
            outputString += "<BR>isInline: " + attachment.isInline;
        }
    }


    console.log(outputString);

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachments-read.yaml

    var attachments = Office.context.mailbox.item.attachments;

    console.log(attachments);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'attachments: AttachmentDetails[];'
    return:
      type: <xref uid="outlook!Office.AttachmentDetails:interface" />[]
- name: body
  uid: outlook!Office.MessageRead#body:member
  package: outlook!
  fullName: body
  summary: >-
    Obtient un objet qui fournit des méthodes permettant de manipuler le corps d’un élément.


    \[[Ensemble d’API : boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'body: Body;'
    return:
      type: <xref uid="outlook!Office.Body:interface" />
- name: categories
  uid: outlook!Office.MessageRead#categories:member
  package: outlook!
  fullName: categories
  summary: >-
    Obtient un objet qui fournit des méthodes pour la gestion des catégories de l’élément.


    \[[Ensemble d’API : boîte aux lettres 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          console.log("Categories assigned to this item:");
          console.log(JSON.stringify(categories));
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    // Note: In order for you to successfully add a category,

    // it must be in the mailbox categories master list.


    Office.context.mailbox.masterCategories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var masterCategories = asyncResult.value;
        if (masterCategories && masterCategories.length > 0) {
          // Grab the first category from the master list.
          var categoryToAdd = [masterCategories[0].displayName];
          Office.context.mailbox.item.categories.addAsync(categoryToAdd, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully assigned category '${categoryToAdd}' to item.`);
            } else {
              console.log("categories.addAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories in the master list on this mailbox. You can add categories using Office.context.mailbox.masterCategories.addAsync.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/45-categories/work-with-categories.yaml

    Office.context.mailbox.item.categories.getAsync(function(asyncResult) {
      if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
        var categories = asyncResult.value;
        if (categories && categories.length > 0) {
          // Grab the first category assigned to this item.
          var categoryToRemove = [categories[0].displayName];
          Office.context.mailbox.item.categories.removeAsync(categoryToRemove, function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
              console.log(`Successfully unassigned category '${categoryToRemove}' from this item.`);
            } else {
              console.log("categories.removeAsync call failed with error: " + asyncResult.error.message);
            }
          });
        } else {
          console.log("There are no categories assigned to this item.");
        }
      } else {
        console.error(asyncResult.error);
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'categories: Categories;'
    return:
      type: <xref uid="outlook!Office.Categories:interface" />
- name: cc
  uid: outlook!Office.MessageRead#cc:member
  package: outlook!
  fullName: cc
  summary: >-
    Permet d’accéder aux destinataires en copie carbone (Cc) d’un message. Le type d’objet et le niveau d’accès dépendent du mode de l’élément actif.


    La `cc` propriété renvoie un tableau qui contient un objet [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) pour chaque destinataire mentionné sur la ligne **CC** du message. Limites de taille des collections :


    - Windows : 500 membres


    - Mac : 100 membres


    - Navigateur Web : 20 membres


    - Autres : illimité
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-cc-message-read.yaml

    var msgCc = Office.context.mailbox.item.cc;

    console.log("Message copied to:");

    for (var i = 0; i < msgCc.length; i++) {
      console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'cc: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
- name: conversationId
  uid: outlook!Office.MessageRead#conversationId:member
  package: outlook!
  fullName: conversationId
  summary: >-
    Obtient l’identificateur de la conversation qui contient un message particulier.


    Vous pouvez obtenir un nombre entier de cette propriété si votre application de messagerie est activée dans les formulaires de lecture ou les réponses des formulaires de composition. Si, par la suite, l’utilisateur modifie l’objet du message de réponse, lors de l’envoi de la réponse, l’ID de conversation de ce message va changer et la valeur que vous avez obtenue plus tôt ne sera plus applicable.


    Cette propriété obtient une valeur null lorsqu’un élément est ajouté à un formulaire de composition. Si l’utilisateur définit la ligne Objet et enregistre l’élément, la propriété `conversationId` renvoie une valeur.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-conversation-id-message.yaml

    console.log(`Conversation ID: ${Office.context.mailbox.item.conversationId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'conversationId: string;'
    return:
      type: string
- name: dateTimeCreated
  uid: outlook!Office.MessageRead#dateTimeCreated:member
  package: outlook!
  fullName: dateTimeCreated
  summary: Obtient la date et l’heure de création d’un élément.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-created-read.yaml

    console.log(`Creation date and time: ${Office.context.mailbox.item.dateTimeCreated}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeCreated: Date;'
    return:
      type: Date
- name: dateTimeModified
  uid: outlook!Office.MessageRead#dateTimeModified:member
  package: outlook!
  fullName: dateTimeModified
  summary: >-
    Obtient la date et l’heure de la dernière modification d’un élément.


    **Remarque**: ce membre n’est pas pris en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-date-time-modified-read.yaml

    console.log(`Date and time item last modified: ${Office.context.mailbox.item.dateTimeModified}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'dateTimeModified: Date;'
    return:
      type: Date
- name: end
  uid: outlook!Office.MessageRead#end:member
  package: outlook!
  fullName: end
  summary: >-
    Obtient la date et l’heure de fin du rendez-vous.


    La `end` propriété est un `Date` objet exprimé en tant que valeur de date et d’heure UTC (temps universel coordonné). Vous pouvez utiliser la `convertToLocalClientTime` méthode pour convertir la `end` valeur de la propriété à la date et à l’heure locales du client.


    Quand vous utilisez la méthode `Time.setAsync` pour définir l’heure de fin, nous vous recommandons d’utiliser la méthode `convertToUtcClientTime` pour convertir l’heure locale du client au format UTC pour le serveur.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-end-read.yaml

    console.log(`Appointment ends: ${Office.context.mailbox.item.end}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'end: Date;'
    return:
      type: Date
- name: from
  uid: outlook!Office.MessageRead#from:member
  package: outlook!
  fullName: from
  summary: >-
    Obtient l’adresse de messagerie de l’expéditeur d’un message.


    Les propriétés `from` et `sender` représentent la même personne, sauf si le message est envoyé par un délégué. Dans ce cas, la `from` propriété représente la personne qui délègue, et la `sender` propriété représente le délégué.


    **Remarque**: la `recipientType` propriété de l' `EmailAddressDetails` objet dans la `from` propriété n’est pas définie.


    La `from` propriété renvoie un `EmailAddressDetails` objet.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-from-message-read.yaml

    var msgFrom = Office.context.mailbox.item.from;

    console.log("Message received from: " + msgFrom.displayName + " (" + msgFrom.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'from: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: internetMessageId
  uid: outlook!Office.MessageRead#internetMessageId:member
  package: outlook!
  fullName: internetMessageId
  summary: >-
    Obtient l’identificateur de message Internet d’un message électronique.


    **Important**: dans le dossier **éléments envoyés** , le `internetMessageId` peut ne pas être encore disponible sur les éléments récemment envoyés. Dans ce cas, envisagez d’utiliser les [services Web Exchange](https://docs.microsoft.com/office/dev/add-ins/outlook/web-services) pour obtenir cette [propriété à partir du serveur](https://docs.microsoft.com/exchange/client-developer/web-service-reference/internetmessageid) .<!-- -->.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-internet-message-id-read.yaml

    console.log(`Internet message ID: ${Office.context.mailbox.item.internetMessageId}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'internetMessageId: string;'
    return:
      type: string
- name: itemClass
  uid: outlook!Office.MessageRead#itemClass:member
  package: outlook!
  fullName: itemClass
  summary: >-
    Obtient la classe de l’élément des services web Exchange de l’élément sélectionné.


    Vous pouvez créer des classes de message personnalisées qui étendent une classe de message par défaut, par exemple, une classe de message de rendez-vous personnalisée `IPM.Appointment.Contoso`<!-- -->.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    La propriété `itemClass` spécifie la classe de message de l’élément sélectionné. Les éléments suivants sont les classes de message par défaut du message ou de l’élément de rendez-vous.


    <table> <tr> <th>Type</th> <th>Description</th> <th>Classe d’élément</th> </tr> <tr> <td>Éléments de rendez-vous</td> <td>Il s’agit des éléments de calendrier de la classe d’élément IPM. Rendez-vous ou IPM. Appointment. occurrence.</td> <td>Mn. Rendez-vous, IPM. Appointment. occurrence</td> </tr> <tr> <td>Éléments de message</td> <td>Ces éléments incluent les messages électroniques dont la classe de message par défaut est IPM.Note, ainsi que les demandes de réunion, les réponses et les annulations qui utilisent IPM.Schedule.Meeting comme classe de message de base.</td> <td>Mn. Remarque, IPM. La tâche Schedule. Meeting. Request, IPM. Schedule. Meeting. nég, IPM. Schedule. Meeting. POS, IPM. Schedule. Meeting. chevalet, IPM. Schedule. Meeting. Canceled</td> </tr> </table>


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-class-read.yaml

    console.log(`Item class: ${Office.context.mailbox.item.itemClass}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemClass: string;'
    return:
      type: string
- name: itemId
  uid: outlook!Office.MessageRead#itemId:member
  package: outlook!
  fullName: itemId
  summary: >-
    Obtient l' [identificateur d’élément des services Web Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) pour l’élément actuel.


    La propriété `itemId` n’est pas disponible en mode composition. Si l’identificateur d’un élément doit être indiqué, la méthode `saveAsync` peut être utilisée pour enregistrer l’élément sur le magasin, lequel renvoie l’identificateur de l’élément dans le paramètre `asyncResult.value` dans la fonction de rappel.


    **Remarque**: l’identificateur renvoyé par la `itemId` propriété est identique à l’identificateur d' [élément des services Web Exchange](https://docs.microsoft.com/exchange/client-developer/exchange-web-services/ews-identifiers-in-exchange) .<!-- -->. La propriété `itemId` n’est pas identique à l’ID d’entrée Outlook ni à l’ID utilisé par l’API REST Outlook. Avant de passer des appels d’API REST à l’aide de cette valeur, elle doit être convertie à l’aide de `Office.context.mailbox.convertToRestId`<!-- -->. Pour plus d’informations, consultez [la rubrique utiliser les API REST Outlook à partir d’un complément Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api#get-the-item-id) .<!-- -->.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // The following code checks for the presence of an item

    // identifier. If the `itemId` property returns `null` or

    // `undefined`, it saves the item to the store and gets the

    // item identifier from the asynchronous result.

    // **Important**: `saveAsync` was introduced with requirement set 1.3

    // so you can't get the `itemId` in Compose mode in earlier sets.

    var itemId = Office.context.mailbox.item.itemId;

    if (itemId === null || itemId == undefined) {
        Office.context.mailbox.item.saveAsync(function(result) {
            itemId = result.value;
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemId: string;'
    return:
      type: string
- name: itemType
  uid: outlook!Office.MessageRead#itemType:member
  package: outlook!
  fullName: itemType
  summary: >-
    Obtient le type d’élément représenté par une instance.


    La `itemType` propriété renvoie une des `ItemType` valeurs d’énumération, indiquant si l’instance de l’objet Item est un message ou un rendez-vous.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-item-type.yaml

    console.log(`Item type: ${Office.context.mailbox.item.itemType}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'itemType: MailboxEnums.ItemType | string;'
    return:
      type: <xref uid="outlook!Office.MailboxEnums.ItemType:enum" /> | string
- name: location
  uid: outlook!Office.MessageRead#location:member
  package: outlook!
  fullName: location
  summary: >-
    Obtient l’emplacement d’une demande de réunion.


    La propriété `location` renvoie une chaîne contenant le lieu du rendez-vous.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-location-read.yaml

    console.log(`Appointment location: ${Office.context.mailbox.item.location}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'location: string;'
    return:
      type: string
- name: normalizedSubject
  uid: outlook!Office.MessageRead#normalizedSubject:member
  package: outlook!
  fullName: normalizedSubject
  summary: >-
    Obtient l’objet d’un élément, avec tous les préfixes supprimés (notamment RE : et FWD :).


    La `normalizedSubject` propriété obtient l’objet de l’élément, avec tous les préfixes standard (tels que re : et FW :) ajoutés par des programmes de messagerie. Pour obtenir l’objet de l’élément avec les préfixes intacts, utilisez la propriété `subject`.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-normalized-subject-read.yaml

    console.log(`Normalized subject: ${Office.context.mailbox.item.normalizedSubject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'normalizedSubject: string;'
    return:
      type: string
- name: notificationMessages
  uid: outlook!Office.MessageRead#notificationMessages:member
  package: outlook!
  fullName: notificationMessages
  summary: >-
    Obtient les messages de notification pour un élément.


    \[[Ensemble d’API : boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: "**<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`\n\n**<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"progressIndicator\",\n    message: \"Progress indicator with id = \" + id\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Non-persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: false\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nvar details =\n  {\n    type: \"informationalMessage\",\n    message: \"Persistent informational notification message with id = \" + id,\n    icon: \"icon1\",\n    persistent: true\n  };\nOffice.context.mailbox.item.notificationMessages.addAsync(id, details, handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nOffice.context.mailbox.item.notificationMessages.getAllAsync(handleResult);          \n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.replaceAsync(\n  id,\n  {\n    type: \"informationalMessage\",\n    message: \"Notification message with id = \" + id + \" has been replaced with an informational message.\",\n    icon: \"icon2\",\n    persistent: false\n  },\n  handleResult);\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/35-notifications/add-getall-remove.yaml\nvar id = $(\"#notificationId\").val();\nOffice.context.mailbox.item.notificationMessages.removeAsync(id, handleResult);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'notificationMessages: NotificationMessages;'
    return:
      type: <xref uid="outlook!Office.NotificationMessages:interface" />
- name: recurrence
  uid: outlook!Office.MessageRead#recurrence:member
  package: outlook!
  fullName: recurrence
  summary: >-
    Obtient la périodicité d’un rendez-vous. Obtient la périodicité d’une demande de réunion. Modes lecture et composition pour les éléments de rendez-vous. Mode lecture pour les éléments de demande de réunion.


    La `recurrence` propriété renvoie un `Recurrence` objet pour les demandes de réunion ou de rendez-vous périodiques si un élément est une série ou une instance dans une série. `null` est renvoyé pour les rendez-vous uniques et les demandes de réunion de rendez-vous uniques. `undefined` est renvoyée pour les messages qui ne sont pas des demandes de réunion.


    **Remarque**: les demandes de réunion ont une valeur itemClass de `IPM.Schedule.Meeting.Request`<!-- -->.


    **Remarque**: si l' `recurrence` objet est null, cela indique qu’il s’agit d’un rendez-vous unique ou d’une demande de réunion d’un seul rendez-vous et non d’une série.


    \[[Ensemble d’API : boîte aux lettres 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-recurrence-read.yaml

    var recurrence = Office.context.mailbox.item.recurrence;


    if (recurrence === undefined) {
      console.log("This item is a message but not a meeting request.");
    } else if (recurrence === null) {
      console.log("This is a single appointment.");
    } else {
      console.log(JSON.stringify(recurrence));
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'recurrence: Recurrence;'
    return:
      type: <xref uid="outlook!Office.Recurrence:interface" />
- name: sender
  uid: outlook!Office.MessageRead#sender:member
  package: outlook!
  fullName: sender
  summary: >-
    Obtient l’adresse de messagerie de l’expéditeur d’un message électronique.


    Les propriétés `from` et `sender` représentent la même personne, sauf si le message est envoyé par un délégué. Dans ce cas, la `from` propriété représente la personne qui délègue, et la `sender` propriété représente le délégué.


    **Remarque**: la `recipientType` propriété de l' `EmailAddressDetails` objet dans la `sender` propriété n’est pas définie.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-sender-message-read.yaml

    var msgSender = Office.context.mailbox.item.sender;

    console.log("Sender: " + msgSender.displayName + " (" + msgSender.emailAddress + ")");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'sender: EmailAddressDetails;'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />
- name: seriesId
  uid: outlook!Office.MessageRead#seriesId:member
  package: outlook!
  fullName: seriesId
  summary: >-
    Obtient l’ID de la série à laquelle une instance appartient.


    Dans Outlook sur le Web et les clients de bureau, le `seriesId` renvoie l’ID des services Web Exchange (EWS) de l’élément parent (série) auquel cet élément appartient. Toutefois, sur iOS et Android, le `seriesId` renvoie l’ID REST de l’élément parent.


    **Remarque**: l’identificateur renvoyé par la `seriesId` propriété est identique à l’identificateur d’élément des services Web Exchange. La `seriesId` propriété n’est pas identique aux ID Outlook utilisés par l’API REST Outlook. Avant de passer des appels d’API REST à l’aide de cette valeur, elle doit être convertie à l’aide de `Office.context.mailbox.convertToRestId`<!-- -->. Pour plus d’informations, consultez [la rubrique utiliser les API REST Outlook à partir d’un complément Outlook](https://docs.microsoft.com/office/dev/add-ins/outlook/use-rest-api) .<!-- -->.


    La `seriesId` propriété renvoie `null` pour les éléments qui n’ont pas d’éléments parents, tels que les rendez-vous uniques, les éléments de série ou les demandes de réunion, et les retours `undefined` pour tous les autres éléments qui ne sont pas des demandes de réunion.


    \[[Ensemble d’API : boîte aux lettres 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/50-recurrence/get-series-id.yaml

    var seriesId = Office.context.mailbox.item.seriesId;


    if (seriesId === undefined) {
      console.log("This is a message that's not a meeting request.");
    } else if (seriesId === null) {
      console.log("This is a single appointment, a parent series, or a meeting request for a series or single meeting.");
    } else {
      console.log("This is an instance belonging to series with ID " + seriesId);
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'seriesId: string;'
    return:
      type: string
- name: start
  uid: outlook!Office.MessageRead#start:member
  package: outlook!
  fullName: start
  summary: >-
    Obtient la date et l’heure de début du rendez-vous.


    La `start` propriété est un `Date` objet exprimé en tant que valeur de date et d’heure UTC (temps universel coordonné). Vous pouvez utiliser la `convertToLocalClientTime` méthode pour convertir la valeur à la date et à l’heure locales du client.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-start-read.yaml

    console.log(`Appointment starts: ${Office.context.mailbox.item.start}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'start: Date;'
    return:
      type: Date
- name: subject
  uid: outlook!Office.MessageRead#subject:member
  package: outlook!
  fullName: subject
  summary: >-
    Obtient la description qui apparaît dans le champ objet d’un élément.


    La propriété `subject` obtient ou définit l’intégralité de l’objet de l’élément, tel qu’il est envoyé par le serveur de messagerie.


    La propriété `subject` renvoie une chaîne. Utilisez la `normalizedSubject` propriété pour obtenir l’objet, moins tous les préfixes de début tels que re : et TR :.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/90-other-item-apis/get-subject-read.yaml

    console.log(`Subject: ${Office.context.mailbox.item.subject}`);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'subject: string;'
    return:
      type: string
- name: to
  uid: outlook!Office.MessageRead#to:member
  package: outlook!
  fullName: to
  summary: >-
    Permet d’accéder aux destinataires figurant sur la ligne **À** d’un message. Le type d’objet et le niveau d’accès dépendent du mode de l’élément actif.


    La `to` propriété renvoie un tableau qui contient un objet [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) pour chaque destinataire mentionné sur la ligne **à** du message. Limites de taille des collections :


    - Windows : 500 membres


    - Mac : 100 membres


    - Navigateur Web : 20 membres


    - Autres : illimité
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-to-message-read.yaml

    var msgTo = Office.context.mailbox.item.to;

    console.log("Message sent to:");

    for (var i = 0; i < msgTo.length; i++) {
      console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'to: EmailAddressDetails[];'
    return:
      type: <xref uid="outlook!Office.EmailAddressDetails:interface" />[]
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: outlook!Office.MessageRead#addHandlerAsync:member(1)
  package: outlook!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: >-
    ajoute un gestionnaire d’événements pour un événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.


    Reportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) de modèle d’objet d’élément pour les événements pris en charge.


    \[[Ensemble d’API : boîte aux lettres 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    function myHandlerFunction(eventarg) {
        if (eventarg.attachmentStatus === Office.MailboxEnums.AttachmentStatus.Added) {
            var attachment = eventarg.attachmentDetails;
            console.log("Event Fired and Attachment Added!");
            getAttachmentContentAsync(attachment.id, options, callback);
        }
    }


    Office.context.mailbox.item.addHandlerAsync(Office.EventType.AttachmentsChanged, myHandlerFunction, myCallback);

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType | string, handler: any, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Événement qui doit appeler le gestionnaire.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: handler
      description: Fonction qui gère l’événement. Cette fonction doit accepter un seul paramètre, qui est un littéral d’objet. La propriété type sur le paramètre correspondra à l’événement eventType `parameter` transmis à `addHandlerAsync`<!-- -->.
      type: any
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre, `asyncResult`<!-- -->, qui est un `Office.AsyncResult` objet.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: displayReplyAllForm(formData)
  uid: outlook!Office.MessageRead#displayReplyAllForm:member(1)
  package: outlook!
  fullName: displayReplyAllForm(formData)
  summary: >-
    Affiche un formulaire de réponse qui comprend soit l’expéditeur et tous les destinataires du message sélectionné, soit l’organisateur et tous les participants du rendez-vous sélectionné.


    Dans Outlook sur le Web, le formulaire de réponse s’affiche sous la forme d’un formulaire indépendant dans un affichage à 3 colonnes et sous forme de formulaire contextuel dans un affichage à 2 ou 2 colonnes.


    Si un des paramètres de chaîne dépasse la limite, `displayReplyAllForm` génère une exception.


    Lorsque des pièces jointes sont spécifiées dans le `formData.attachments` paramètre, Outlook tente de télécharger toutes les pièces jointes et de les joindre au formulaire de réponse. Si aucune pièce jointe n’est ajoutée, une erreur s’affiche dans l’interface utilisateur du formulaire. Si ce n’est pas possible, aucun message d’erreur n’est généré.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // The following code passes a string to the `displayReplyAllForm` function.

    Office.context.mailbox.item.displayReplyAllForm('hello there');

    Office.context.mailbox.item.displayReplyAllForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyAllForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyAllForm(

    {

    'htmlBody' : 'hi'

    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : Office.MailboxEnums.AttachmentType.File,
            'name' : 'squirrel.png',
            'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
            'type' : 'item',
            'name' : 'rand',
            'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyAllForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyAllForm("This is a reply ALL with <b>some bold text</b>.");

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyAllForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Chaîne qui contient du texte et des éléments HTML et qui représente le corps du formulaire de réponse. La chaîne est limitée à 32 Ko ou un objet [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) qui contient les données de corps ou de pièces jointes et une fonction de rappel.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: displayReplyForm(formData)
  uid: outlook!Office.MessageRead#displayReplyForm:member(1)
  package: outlook!
  fullName: displayReplyForm(formData)
  summary: >-
    Affiche un formulaire de réponse qui comprend uniquement l’expéditeur du message sélectionné ou l’organisateur du rendez-vous sélectionné.


    Dans Outlook sur le Web, le formulaire de réponse s’affiche sous la forme d’un formulaire indépendant dans un affichage à 3 colonnes et sous forme de formulaire contextuel dans un affichage à 2 ou 2 colonnes.


    Si un des paramètres de chaîne dépasse la limite, `displayReplyForm` génère une exception.


    Lorsque des pièces jointes sont spécifiées dans le `formData.attachments` paramètre, Outlook tente de télécharger toutes les pièces jointes et de les joindre au formulaire de réponse. Si aucune pièce jointe n’est ajoutée, une erreur s’affiche dans l’interface utilisateur du formulaire. Si ce n’est pas possible, aucun message d’erreur n’est généré.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // The following code passes a string to the `displayReplyForm` function.

    Office.context.mailbox.item.displayReplyForm('hello there');

    Office.context.mailbox.item.displayReplyForm('<b>hello there</b>');


    // Reply with an empty body.

    Office.context.mailbox.item.displayReplyForm({});


    // Reply with just a body.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi'
    });


    // Reply with a body and a file attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            }
        ]
    });


    // Reply with a body and an item attachment.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ]
    });


    // Reply with a body, file attachment, item attachment, and a callback.

    Office.context.mailbox.item.displayReplyForm(

    {
        'htmlBody' : 'hi',
        'attachments' :
        [
            {
                'type' : Office.MailboxEnums.AttachmentType.File,
                'name' : 'squirrel.png',
                'url' : 'http://i.imgur.com/sRgTlGR.jpg'
            },
            {
                'type' : 'item',
                'name' : 'rand',
                'itemId' : Office.context.mailbox.item.itemId
            }
        ],
        'callback' : function(asyncResult)
        {
            console.log(asyncResult.value);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-forms.yaml

    Office.context.mailbox.item.displayReplyForm("This is a reply with <i>some text in italics</i>.");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-reply-with-attachments.yaml

    Office.context.mailbox.item.displayReplyForm({
      htmlBody: "This is a reply with a couple of attachments - an inline image and an item<br><img src='cid:dog.jpg'>",
      attachments: [
        { type: "file", url: "http://i.imgur.com/9S36xvA.jpg", name: "dog.jpg", isInline: true },
        { type: "item", itemId: Office.context.mailbox.item.itemId, name: "test_email.msg" }
      ],
      options: { asyncContext: null },
      callback: function(result) {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Action failed with message ${result.error.message}`);
        }
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'displayReplyForm(formData: string | ReplyFormData): void;'
    parameters:
    - id: formData
      description: Chaîne qui contient du texte et des éléments HTML et qui représente le corps du formulaire de réponse. La chaîne est limitée à 32 Ko ou un objet [ReplyFormData](xref:outlook!Office.ReplyFormData:interface) qui contient les données de corps ou de pièces jointes et une fonction de rappel.
      type: string | <xref uid="outlook!Office.ReplyFormData:interface" />
    return:
      type: void
      description: ''
- name: getAllInternetHeadersAsync(options, callback)
  uid: outlook!Office.MessageRead#getAllInternetHeadersAsync:member(1)
  package: outlook!
  fullName: getAllInternetHeadersAsync(options, callback)
  summary: >-
    Obtient tous les en-têtes Internet pour le message sous forme de chaîne.


    \[[Ensemble d’API : boîte aux lettres 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Get the internet headers related to the mail.

    Office.context.mailbox.item.getAllInternetHeadersAsync(
        function(asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
                console.log(asyncResult.value);
            } else {
                if (asyncResult.error.code == 9020) {
                    // GenericResponseError returned when there is no context.
                    // Treat as no context.
                } else {
                    // Handle the error.
                }
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAllInternetHeadersAsync(options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre, `asyncResult`<!-- -->, qui est un `Office.AsyncResult` objet. En cas de réussite, les données des en-têtes Internet sont fournies dans la `asyncResult.value` propriété sous la forme d’une chaîne. Reportez-vous à la [norme RFC 2183](https://tools.ietf.org/html/rfc2183) pour les informations de mise en forme de la valeur de chaîne renvoyée. En cas d’échec de l’appel, la `asyncResult.error` propriété contient un code d’erreur correspondant à la raison de l’échec.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAttachmentContentAsync(attachmentId, options, callback)
  uid: outlook!Office.MessageRead#getAttachmentContentAsync:member(1)
  package: outlook!
  fullName: getAttachmentContentAsync(attachmentId, options, callback)
  summary: >-
    Obtient une pièce jointe à partir d’un message ou d’un rendez-vous et la renvoie en tant qu' `AttachmentContent` objet.


    La `getAttachmentContentAsync` méthode obtient la pièce jointe avec l’identificateur spécifié à partir de l’élément. Il est recommandé d’utiliser l’identificateur pour récupérer une pièce jointe dans la même session que l’attachmentIds a été récupérée avec l' `getAttachmentsAsync` appel ou `item.attachments` . Dans Outlook sur le web et sur les appareils mobiles, l’identificateur de pièce jointe n’est valable que dans la même session. Une session est terminée lorsque l’utilisateur ferme l’application, ou si l’utilisateur commence à composer un formulaire inséré, puis détoure ensuite le formulaire pour continuer dans une fenêtre distincte.


    \[[Ensemble d’API : boîte aux lettres 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    **Erreurs**:


    - `AttachmentTypeNotSupported`<!-- -->: Le type de la pièce jointe n’est pas pris en charge. Les types non pris en charge incluent les images incorporées au format RTF ou les éléments de pièces jointes autres que les éléments de messagerie ou de calendrier (par exemple, un contact ou un élément de tâche).


    - `InvalidAttachmentId`<!-- -->: L’identificateur de pièce jointe n’existe pas.


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/40-attachments/get-attachment-content.yaml

    var item = Office.context.mailbox.item;

    var options = {asyncContext: {currentItem: item}};

    item.getAttachmentsAsync(options, callback);


    function callback(result) {
        if (result.value.length > 0) {
            for (i = 0 ; i < result.value.length ; i++) {
                result.asyncContext.currentItem.getAttachmentContentAsync(result.value[i].id, handleAttachmentsCallback);
            }
        }
    }


    function handleAttachmentsCallback(result) {
        // Parse string to be a url, an .eml file, a base64-encoded string, or an .icalendar file.
        switch (result.value.format) {
            case Office.MailboxEnums.AttachmentContentFormat.Base64:
                // Handle file attachment.
                console.log(result.value.content);
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Eml:
                // Handle email item attachment.
                console.log("Attachment is a message.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.ICalendar:
                // Handle .icalender attachment.
                console.log("Attachment is a calendar item.");
                break;
            case Office.MailboxEnums.AttachmentContentFormat.Url:
                // Handle cloud attachment.
                console.log("Attachment is a cloud attachment.");
                break;
            default:
                // Handle attachment formats that are not supported.
        }
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAttachmentContentAsync(attachmentId: string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<AttachmentContent>) => void): void;'
    parameters:
    - id: attachmentId
      description: Identificateur de la pièce jointe que vous souhaitez obtenir.
      type: string
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre, `asyncResult`<!-- -->, qui est un `Office.AsyncResult` objet. En cas d’échec de l’appel, la `asyncResult.error` propriété contient un code d’erreur correspondant à la raison de l’échec.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.AttachmentContent:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getEntities()
  uid: outlook!Office.MessageRead#getEntities:member(1)
  package: outlook!
  fullName: getEntities()
  summary: >-
    Permet d’obtenir les entités figurant dans le corps de l’élément sélectionné.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    var entities = Office.context.mailbox.item.getEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.log("No entities found on this item.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getEntitiesByType(entityType)
  uid: outlook!Office.MessageRead#getEntitiesByType:member(1)
  package: outlook!
  fullName: getEntitiesByType(entityType)
  summary: >-
    Permet d’obtenir un tableau de toutes les entités du type spécifié trouvées dans le corps de l’élément sélectionné.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/basic-entities.yaml

    console.log(Office.context.mailbox.item.getEntitiesByType(Office.MailboxEnums.EntityType.Address));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getEntitiesByType(entityType: MailboxEnums.EntityType | string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: entityType
      description: >-
        Une des `EntityType` valeurs d’énumération.


        Tandis que le niveau d’autorisation minimal pour utiliser cette méthode est `Restricted`<!-- -->, certains types d’entité nécessitent l' `ReadItem` accès, comme indiqué dans le tableau suivant.


        <table> <tr> <th>Valeur d’entityType</th> <th>Type des objets du tableau renvoyé</th> <th>Niveau d’autorisation requis</th> </tr> <tr> <td>Adresse</td> <td>String</td> <td>Restreint</td> </tr> <tr> <td>Contact</td> <td>Contact</td> <td>ReadItem</td> </tr> <tr> <td>EmailAddress</td> <td>String</td> <td>ReadItem</td> </tr> <tr> <td>MeetingSuggestion</td> <td>MeetingSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>PhoneNumber</td> <td>PhoneNumber</td> <td>Restreint</td> </tr> <tr> <td>TaskSuggestion</td> <td>TaskSuggestion</td> <td>ReadItem</td> </tr> <tr> <td>URL</td> <td>String</td> <td>Restreint</td> </tr> </table>
      type: <xref uid="outlook!Office.MailboxEnums.EntityType:enum" /> | string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: Si la valeur transmise `entityType` n’est pas un membre valide de l' `EntityType` énumération, la méthode renvoie `null`<!-- -->. Si aucune entité du type spécifié n’est présente dans le corps de l’élément, la méthode renvoie un tableau vide. Sinon, le type des objets dans le tableau renvoyé dépend du type d’entité demandé dans le paramètre `entityType`.
- name: getFilteredEntitiesByName(name)
  uid: outlook!Office.MessageRead#getFilteredEntitiesByName:member(1)
  package: outlook!
  fullName: getFilteredEntitiesByName(name)
  summary: >-
    Renvoie des entités reconnues dans l’élément sélectionné, qui transmettent le filtre nommé défini au fichier manifeste XML.


    La `getFilteredEntitiesByName` méthode renvoie les entités qui correspondent à l’expression régulière définie dans l' `ItemHasKnownEntity` élément rule dans le fichier manifeste XML avec la `FilterName` valeur de l’élément spécifié.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted physical address that has the word "Way" in it.

    console.log(Office.context.mailbox.item.getFilteredEntitiesByName("sampleFilterName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilteredEntitiesByName(name: string): (string | Contact | MeetingSuggestion | PhoneNumber | TaskSuggestion)[];'
    parameters:
    - id: name
      description: Nom de l’élément de règle `ItemHasKnownEntity` qui définit le filtre à respecter.
      type: string
    return:
      type: (string | <xref uid="outlook!Office.Contact:interface" /> | <xref uid="outlook!Office.MeetingSuggestion:interface" /> | <xref uid="outlook!Office.PhoneNumber:interface" /> | <xref uid="outlook!Office.TaskSuggestion:interface" />)[]
      description: S’il n’existe aucun `ItemHasKnownEntity` élément dans le manifeste avec une `FilterName` valeur d’élément qui correspond au `name` paramètre, la méthode renvoie `null`<!-- -->. Si le paramètre `name` correspond à un élément `ItemHasKnownEntity` dans le manifeste, mais qu’aucune entité dans l’élément actif ne correspond, la méthode renvoie un tableau vide.
- name: getRegExMatches()
  uid: outlook!Office.MessageRead#getRegExMatches:member(1)
  package: outlook!
  fullName: getRegExMatches()
  summary: >-
    Renvoie des valeurs de chaîne dans l’élément sélectionné, qui correspondent aux expressions régulières définies dans le fichier manifeste XML.


    La méthode `getRegExMatches` renvoie les chaînes qui correspondent à l’expression régulière définie dans chaque élément de règle `ItemHasRegularExpressionMatch` ou `ItemHasKnownEntity` du fichier manifeste XML. Pour une règle `ItemHasRegularExpressionMatch`, une chaîne correspondante doit être présente dans la propriété de l’élément spécifié par cette règle. Le type simple `PropertyName` définit les propriétés prises en charge.


    Si vous spécifiez une `ItemHasRegularExpressionMatch` règle sur la propriété Body d’un élément, l’expression régulière doit ensuite filtrer le corps et ne doit pas essayer de renvoyer l’intégralité du corps de l’élément. L’utilisation d’une expression régulière telle que. * pour obtenir l’intégralité du corps d’un élément ne renvoie pas toujours les résultats attendus. À la place, utilisez la `Body.getAsync` méthode pour récupérer le corps entier.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of

    // matches for the regular expression rule elements `fruits`

    // and `veggies`, which are specified in the manifest.

    var allMatches = Office.context.mailbox.item.getRegExMatches();

    var fruits = allMatches.fruits;

    var veggies = allMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatches());

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatches(): any;'
    return:
      type: any
      description: Un objet qui contient les tableaux des chaînes correspondant aux expressions régulières définies dans le fichier manifeste XML. Le nom de chaque tableau est égal à la valeur correspondante de l’attribut `RegExName` de la règle `ItemHasRegularExpressionMatch` correspondante ou de l’attribut `FilterName` de la règle `ItemHasKnownEntity` correspondante.
- name: getRegExMatchesByName(name)
  uid: outlook!Office.MessageRead#getRegExMatchesByName:member(1)
  package: outlook!
  fullName: getRegExMatchesByName(name)
  summary: >-
    Renvoie des valeurs de chaîne dans l’élément sélectionné, qui correspondent aux expressions régulières nommées définies dans le fichier manifeste XML.


    La méthode `getRegExMatchesByName` renvoie les chaînes qui correspondent à l’expression régulière définie dans l’élément de règle `ItemHasRegularExpressionMatch` du fichier manifeste XML ayant la valeur de l’élément `RegExName` spécifié.


    Si vous spécifiez une `ItemHasRegularExpressionMatch` règle sur la propriété Body d’un élément, l’expression régulière doit ensuite filtrer le corps et ne doit pas essayer de renvoyer l’intégralité du corps de l’élément. L’utilisation d’une expression régulière telle que. * pour obtenir l’intégralité du corps d’un élément ne renvoie pas toujours les résultats attendus.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    var fruits = Office.context.mailbox.item.getRegExMatchesByName("fruits");

    var veggies = Office.context.mailbox.item.getRegExMatchesByName("veggies");

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/contextual.yaml

    // This API would only work when you click on highlighted word "ScriptLab".

    console.log(Office.context.mailbox.item.getRegExMatchesByName("sampleRegexName"));

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRegExMatchesByName(name: string): string[];'
    parameters:
    - id: name
      description: Nom de l’élément de règle `ItemHasRegularExpressionMatch` qui définit le filtre à respecter.
      type: string
    return:
      type: string[]
      description: Un tableau qui contient les chaînes correspondant à l’expression régulière définie dans le fichier manifeste XML.
- name: getSelectedEntities()
  uid: outlook!Office.MessageRead#getSelectedEntities:member(1)
  package: outlook!
  fullName: getSelectedEntities()
  summary: >-
    Obtient les entités figurant dans une correspondance en surbrillance qu’un utilisateur a sélectionné. Les correspondances en surbrillance s’appliquent aux compléments contextuels.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.


    \[[Ensemble d’API : boîte aux lettres 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var entities = Office.context.mailbox.item.getSelectedEntities();

    var entityTypesFound = 0;

    if (entities.addresses.length > 0) {
        console.warn("physical addresses: ");
        console.log(entities.addresses);
        entityTypesFound++;
    }

    if (entities.contacts.length > 0) {
        console.warn("contacts: ");
        entities.contacts.forEach(function (contact) { console.log(contact.personName); })
        entityTypesFound++;
    }

    if (entities.emailAddresses.length > 0) {
        console.warn("email addresses: ");
        console.log(entities.emailAddresses);
        entityTypesFound++;
    }

    if (entities.meetingSuggestions.length > 0) {
        console.warn("meetings suggestions: ");
        entities.meetingSuggestions.forEach(function (meetingSuggestion) { console.log(meetingSuggestion.meetingString); })
        entityTypesFound++;
    }

    if (entities.phoneNumbers.length > 0) {
        console.warn("phone numbers: ");
        entities.phoneNumbers.forEach(function (phoneNumber) { console.log(phoneNumber.originalPhoneString); })
        entityTypesFound++;
    }

    if (entities.taskSuggestions.length > 0) {
        console.warn("task suggestions: ");
        entities.taskSuggestions.forEach(function (taskSuggestion) { console.log(taskSuggestion.taskString); })
        entityTypesFound++;
    }

    if (entities.urls.length > 0) {
        console.warn("URLs: ");
        console.log(entities.urls);
        entityTypesFound++;
    }

    if (entityTypesFound == 0)

    {
        console.error("Open add-in by clicking on a highlighted entity, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedEntities(): Entities;'
    return:
      type: <xref uid="outlook!Office.Entities:interface" />
      description: ''
- name: getSelectedRegExMatches()
  uid: outlook!Office.MessageRead#getSelectedRegExMatches:member(1)
  package: outlook!
  fullName: getSelectedRegExMatches()
  summary: >-
    Renvoie des valeurs de chaîne dans une correspondance en surbrillance, qui correspondent aux expressions régulières définies dans le fichier manifeste XML. Les correspondances en surbrillance s’appliquent aux compléments contextuels.


    La méthode `getSelectedRegExMatches` renvoie les chaînes qui correspondent à l’expression régulière définie dans chaque élément de règle `ItemHasRegularExpressionMatch` ou `ItemHasKnownEntity` du fichier manifeste XML. Pour une règle `ItemHasRegularExpressionMatch`, une chaîne correspondante doit être présente dans la propriété de l’élément spécifié par cette règle. Le type simple `PropertyName` définit les propriétés prises en charge.


    Si vous spécifiez une `ItemHasRegularExpressionMatch` règle sur la propriété Body d’un élément, l’expression régulière doit ensuite filtrer le corps et ne doit pas essayer de renvoyer l’intégralité du corps de l’élément. L’utilisation d’une expression régulière telle que. * pour obtenir l’intégralité du corps d’un élément ne renvoie pas toujours les résultats attendus. À la place, utilisez la `Body.getAsync` méthode pour récupérer le corps entier.


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.


    \[[Ensemble d’API : boîte aux lettres 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Consider an add-in manifest has the following `Rule` element:

    //<Rule xsi:type="RuleCollection" Mode="And">

    //  <Rule xsi:type="ItemIs" FormType="Read" ItemType="Message" />

    //  <Rule xsi:type="RuleCollection" Mode="Or">

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="fruits" RegExValue="apple|banana|coconut" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //    <Rule xsi:type="ItemHasRegularExpressionMatch" RegExName="veggies" RegExValue="tomato|onion|spinach|broccoli" PropertyName="BodyAsPlaintext" IgnoreCase="true" />

    //  </Rule>

    //</Rule>


    // The object returned from `getRegExMatches` would have two properties: `fruits` and `veggies`.

    //{

    //'fruits': ['apple','banana','Banana','coconut'],

    //'veggies': ['tomato','onion','spinach','broccoli']

    //}


    // The following example shows how to access the array of matches for the

    // regular expression rule elements `fruits` and `veggies`, which are

    // specified in the manifest.

    var selectedMatches = Office.context.mailbox.item.getSelectedRegExMatches();

    var fruits = selectedMatches.fruits;

    var veggies = selectedMatches.veggies;

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/75-entities-and-regex-matches/selected.yaml

    var matches = Office.context.mailbox.item.getSelectedRegExMatches();

    if (matches) {
        console.log(matches);
    }

    else {
        console.error("Open add-in by clicking on a highlighted regex match, for this API to return something useful.");
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRegExMatches(): any;'
    return:
      type: any
      description: Un objet qui contient les tableaux des chaînes correspondant aux expressions régulières définies dans le fichier manifeste XML. Le nom de chaque tableau est égal à la valeur correspondante de l’attribut `RegExName` de la règle `ItemHasRegularExpressionMatch` correspondante ou de l’attribut `FilterName` de la règle `ItemHasKnownEntity` correspondante.
- name: getSharedPropertiesAsync(options, callback)
  uid: outlook!Office.MessageRead#getSharedPropertiesAsync:member(1)
  package: outlook!
  fullName: getSharedPropertiesAsync(options, callback)
  summary: >-
    Obtient les propriétés d’un rendez-vous ou d’un message dans un dossier partagé, un calendrier ou une boîte aux lettres.


    Pour plus d’informations sur l’utilisation de cette API, consultez l’article relatif [à l’accès délégué](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) .


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.


    \[[Ensemble d’API : boîte aux lettres 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on a message from a shared folder.");
      return;
    }


    Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function(result) {
      if (result.status === Office.AsyncResultStatus.Succeeded && result.value !== "") {
        Office.context.mailbox.item.getSharedPropertiesAsync(
          {
            // Pass auth token along.
            asyncContext: result.value
          },
          function(result2) {
            let sharedProperties = result2.value;
            let delegatePermissions = sharedProperties.delegatePermissions;

            // Determine if user has the appropriate permission to do the operation.
            if ((delegatePermissions & Office.MailboxEnums.DelegatePermissions.Read) != 0) {
              var ewsId = Office.context.mailbox.item.itemId;
              var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
              let rest_url =
                sharedProperties.targetRestUrl + "/v2.0/users/" + sharedProperties.targetMailbox + "/messages/" + restId;

              $.ajax({
                url: rest_url,
                dataType: "json",
                headers: { Authorization: "Bearer " + result2.asyncContext }
              })
                .done(function(response) {
                  console.log(response);
                })
                .fail(function(error) {
                  console.error(error);
                });
            }
          }
        );
      }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type `Office.AsyncResult`<!-- -->. La `value` propriété du résultat est les propriétés de l’élément partagé.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSharedPropertiesAsync(callback)
  uid: outlook!Office.MessageRead#getSharedPropertiesAsync:member(2)
  package: outlook!
  fullName: getSharedPropertiesAsync(callback)
  summary: >-
    Obtient les propriétés d’un rendez-vous ou d’un message dans un dossier partagé, un calendrier ou une boîte aux lettres.


    Pour plus d’informations sur l’utilisation de cette API, consultez l’article relatif [à l’accès délégué](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) .


    **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.


    \[[Ensemble d’API : boîte aux lettres 1,8](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/65-delegates-and-shared-folders/get-shared-properties.yaml

    if (!Office.context.mailbox.item.getSharedPropertiesAsync) {
      console.error("Try this sample on an item from a shared folder.");
      return;
    }


    Office.context.mailbox.item.getSharedPropertiesAsync(function(result) {
      console.log(result.value);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSharedPropertiesAsync(callback: (asyncResult: Office.AsyncResult<SharedProperties>) => void): void;'
    parameters:
    - id: callback
      description: Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type `Office.AsyncResult`<!-- -->. La `value` propriété du résultat est les propriétés de l’élément partagé.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.SharedProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: loadCustomPropertiesAsync(callback, userContext)
  uid: outlook!Office.MessageRead#loadCustomPropertiesAsync:member(1)
  package: outlook!
  fullName: loadCustomPropertiesAsync(callback, userContext)
  summary: >-
    Charge de manière asynchrone les propriétés personnalisées de ce complément vers l’élément sélectionné.


    Les propriétés personnalisées sont stockées sous la forme de paires clé/valeur qui s’appliquent à une application ou un élément. Cette méthode renvoie un objet `CustomProperties` dans le rappel, qui fournit des méthodes pour accéder aux propriétés personnalisées propres à l’élément et au complément actifs. Les propriétés personnalisées ne sont pas chiffrées dans l’élément, par conséquent elles ne doivent pas servir d’espace de stockage sécurisé.


    Les propriétés personnalisées sont fournies sous la forme d’un objet `CustomProperties` dans la propriété `asyncResult.value`. Cet objet peut être utilisé pour obtenir, définir et supprimer des propriétés personnalisées à partir de l’élément et réenregistrer les modifications apportées au jeu de propriétés personnalisées sur le serveur.
  remarks: "**<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`\n\n**<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// The following example shows how to use the loadCustomPropertiesAsync method\n// to asynchronously load custom properties that are specific to the current item.\n// The example also shows how to use the saveAsync method to save these properties\n// back to the server. After loading the custom properties, the example uses the\n// get method to read the custom property myProp, the set method to write the\n// custom property otherProp, and then finally calls the saveAsync method to save\n// the custom properties.\nOffice.initialize = function () {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n        // After the DOM is loaded, add-in-specific code can run.\n        var mailbox = Office.context.mailbox;\n        mailbox.item.loadCustomPropertiesAsync(customPropsCallback);\n    });\n};\n\nfunction customPropsCallback(asyncResult) {\n    var customProps = asyncResult.value;\n    var myProp = customProps.get(\"myProp\");\n\n    customProps.set(\"otherProp\", \"value\");\n    customProps.saveAsync(saveCallback);\n}\n\nfunction saveCallback(asyncResult) {\n}\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml\nOffice.context.mailbox.item.loadCustomPropertiesAsync(function (result) {\n  if (result.status === Office.AsyncResultStatus.Succeeded) {\n    console.log(\"Loaded following custom properties:\");\n    customProps = result.value;\n    var dataKey = Object.keys(customProps)[0];\n    var data = customProps[dataKey];\n    for (var propertyName in data)\n    {\n      var propertyValue = data[propertyName];\n      console.log(`${propertyName}: ${propertyValue}`);\n    }              \n  }\n  else {\n    console.error(`loadCustomPropertiesAsync failed with message ${result.error.message}`);\n  }\n});\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'loadCustomPropertiesAsync(callback: (asyncResult: Office.AsyncResult<CustomProperties>) => void, userContext?: any): void;'
    parameters:
    - id: callback
      description: Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type `Office.AsyncResult`<!-- -->.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="outlook!Office.CustomProperties:interface" />&gt;) =&gt; void'
    - id: userContext
      description: Facultatif. Les développeurs peuvent fournir un objet auquel ils souhaitent accéder dans la fonction de rappel. Cet objet est accessible via la propriété `asyncResult.asyncContext` dans la fonction de rappel.
      type: any
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: outlook!Office.MessageRead#removeHandlerAsync:member(1)
  package: outlook!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: >-
    Supprime les gestionnaires d’événements pour un type d’événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.


    Reportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.8/office.context.mailbox.item#events) de modèle d’objet d’élément pour les événements pris en charge.


    \[[Ensemble d’API : boîte aux lettres 1,7](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`


    **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture de message
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Événement qui doit révoquer le gestionnaire.
      type: <xref uid="office!Office.EventType:enum" /> | string
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre, `asyncResult`<!-- -->, qui est un `Office.AsyncResult` objet.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
extends: <xref uid="outlook!Office.Message:interface" />
metadata:
  ms.openlocfilehash: 2d91343a71f527721775297ac5fd650a26ccb902
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49340000"
