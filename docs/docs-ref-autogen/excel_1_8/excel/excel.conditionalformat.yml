### YamlMime:UniversalReference
items:
  - uid: excel.Excel.ConditionalFormat
    summary: |-
      <span data-ttu-id="eccb6-101">Objet qui encapsule une plage, un format, une règle et d’autres propriétés d’un format conditionnel.</span><span class="sxs-lookup"><span data-stu-id="eccb6-101">An object encapsulating a conditional format's range, format, rule, and other properties.</span></span>

      <span data-ttu-id="eccb6-102">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-102">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.ConditionalFormat.cellValue
      - excel.Excel.ConditionalFormat.cellValueOrNullObject
      - excel.Excel.ConditionalFormat.colorScale
      - excel.Excel.ConditionalFormat.colorScaleOrNullObject
      - excel.Excel.ConditionalFormat.context
      - excel.Excel.ConditionalFormat.custom
      - excel.Excel.ConditionalFormat.customOrNullObject
      - excel.Excel.ConditionalFormat.dataBar
      - excel.Excel.ConditionalFormat.dataBarOrNullObject
      - excel.Excel.ConditionalFormat.delete
      - excel.Excel.ConditionalFormat.getRange
      - excel.Excel.ConditionalFormat.getRangeOrNullObject
      - excel.Excel.ConditionalFormat.iconSet
      - excel.Excel.ConditionalFormat.iconSetOrNullObject
      - excel.Excel.ConditionalFormat.id
      - excel.Excel.ConditionalFormat.load
      - excel.Excel.ConditionalFormat.load_1
      - excel.Excel.ConditionalFormat.load_2
      - excel.Excel.ConditionalFormat.preset
      - excel.Excel.ConditionalFormat.presetOrNullObject
      - excel.Excel.ConditionalFormat.priority
      - excel.Excel.ConditionalFormat.set
      - excel.Excel.ConditionalFormat.set_1
      - excel.Excel.ConditionalFormat.stopIfTrue
      - excel.Excel.ConditionalFormat.textComparison
      - excel.Excel.ConditionalFormat.textComparisonOrNullObject
      - excel.Excel.ConditionalFormat.toJSON
      - excel.Excel.ConditionalFormat.topBottom
      - excel.Excel.ConditionalFormat.topBottomOrNullObject
      - excel.Excel.ConditionalFormat.type
  - uid: excel.Excel.ConditionalFormat.cellValue
    summary: |-
      <span data-ttu-id="eccb6-103">Renvoie les propriétés de mise en forme conditionnelle de la valeur de la cellule si le format conditionnel actuel est un type CellValue.</span><span class="sxs-lookup"><span data-stu-id="eccb6-103">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="eccb6-104">Par exemple, pour mettre en forme toutes les cellules comprises entre 5 et 10.</span><span class="sxs-lookup"><span data-stu-id="eccb6-104">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="eccb6-105">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-105">Read-only.</span></span>

      <span data-ttu-id="eccb6-106">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-106">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-107">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-107">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B21:E23");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.cellValueOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-108">Renvoie les propriétés de mise en forme conditionnelle de la valeur de la cellule si le format conditionnel actuel est un type CellValue.</span><span class="sxs-lookup"><span data-stu-id="eccb6-108">Returns the cell value conditional format properties if the current conditional format is a CellValue type.</span></span> <span data-ttu-id="eccb6-109">Par exemple, pour mettre en forme toutes les cellules comprises entre 5 et 10.</span><span class="sxs-lookup"><span data-stu-id="eccb6-109">For example to format all cells between 5 and 10.</span></span> <span data-ttu-id="eccb6-110">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-110">Read-only.</span></span>

      <span data-ttu-id="eccb6-111">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - excel.Excel.CellValueConditionalFormat
  - uid: excel.Excel.ConditionalFormat.colorScale
    summary: |-
      <span data-ttu-id="eccb6-112">Renvoie les propriétés de mise en forme conditionnelle ColorScale si le format conditionnel actuel est un type ColorScale.</span><span class="sxs-lookup"><span data-stu-id="eccb6-112">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="eccb6-113">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-113">Read-only.</span></span>

      <span data-ttu-id="eccb6-114">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-114">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-115">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-115">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              const criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.colorScaleOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-116">Renvoie les propriétés de mise en forme conditionnelle ColorScale si le format conditionnel actuel est un type ColorScale.</span><span class="sxs-lookup"><span data-stu-id="eccb6-116">Returns the ColorScale conditional format properties if the current conditional format is an ColorScale type.</span></span> <span data-ttu-id="eccb6-117">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-117">Read-only.</span></span>

      <span data-ttu-id="eccb6-118">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-118">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - excel.Excel.ColorScaleConditionalFormat
  - uid: excel.Excel.ConditionalFormat.context
    summary: <span data-ttu-id="eccb6-119">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="eccb6-119">The request context associated with the object.</span></span> <span data-ttu-id="eccb6-120">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="eccb6-120">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.ConditionalFormat.custom
    summary: |-
      <span data-ttu-id="eccb6-121">Renvoie les propriétés de mise en forme conditionnelle personnalisées si le format conditionnel actuel est un type personnalisé.</span><span class="sxs-lookup"><span data-stu-id="eccb6-121">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="eccb6-122">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-122">Read-only.</span></span>

      <span data-ttu-id="eccb6-123">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-123">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-124">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-124">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.customOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-125">Renvoie les propriétés de mise en forme conditionnelle personnalisées si le format conditionnel actuel est un type personnalisé.</span><span class="sxs-lookup"><span data-stu-id="eccb6-125">Returns the custom conditional format properties if the current conditional format is a custom type.</span></span> <span data-ttu-id="eccb6-126">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-126">Read-only.</span></span>

      <span data-ttu-id="eccb6-127">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-127">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - excel.Excel.CustomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.dataBar
    summary: |-
      <span data-ttu-id="eccb6-128">Renvoie les propriétés de la barre de données si le format conditionnel actuel est une barre de données.</span><span class="sxs-lookup"><span data-stu-id="eccb6-128">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="eccb6-129">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-129">Read-only.</span></span>

      <span data-ttu-id="eccb6-130">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-130">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-131">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-131">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.dataBarOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-132">Renvoie les propriétés de la barre de données si le format conditionnel actuel est une barre de données.</span><span class="sxs-lookup"><span data-stu-id="eccb6-132">Returns the data bar properties if the current conditional format is a data bar.</span></span> <span data-ttu-id="eccb6-133">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-133">Read-only.</span></span>

      <span data-ttu-id="eccb6-134">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-134">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - excel.Excel.DataBarConditionalFormat
  - uid: excel.Excel.ConditionalFormat.delete
    summary: |-
      <span data-ttu-id="eccb6-135">Supprime cette mise en forme conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="eccb6-135">Deletes this conditional format.</span></span>

      <span data-ttu-id="eccb6-136">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-136">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.ConditionalFormat.getRange
    summary: |-
      <span data-ttu-id="eccb6-137">Renvoie la plage à laquelle s’applique la mise en forme conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="eccb6-137">Returns the range the conditonal format is applied to.</span></span> <span data-ttu-id="eccb6-138">Renvoie une erreur si la mise en forme conditionnelle est appliquée à plusieurs plages.</span><span class="sxs-lookup"><span data-stu-id="eccb6-138">Throws an error if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="eccb6-139">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-139">Read-only.</span></span>

      <span data-ttu-id="eccb6-140">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-140">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-141">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```
  - uid: excel.Excel.ConditionalFormat.getRangeOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-142">Renvoie la plage à laquelle le format conditionnelle est appliqué ou un objet null si la mise en forme conditionnelle est appliquée à plusieurs plages.</span><span class="sxs-lookup"><span data-stu-id="eccb6-142">Returns the range the conditonal format is applied to, or a null object if the conditional format is applied to multiple ranges.</span></span> <span data-ttu-id="eccb6-143">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-143">Read-only.</span></span>

      <span data-ttu-id="eccb6-144">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-144">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel.Excel.ConditionalFormat.iconSet
    summary: |-
      <span data-ttu-id="eccb6-145">Renvoie les propriétés de format conditionnel IconSet si le format conditionnel actuel est un type IconSet.</span><span class="sxs-lookup"><span data-stu-id="eccb6-145">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="eccb6-146">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-146">Read-only.</span></span>

      <span data-ttu-id="eccb6-147">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-147">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-148">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-148">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.iconSetOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-149">Renvoie les propriétés de format conditionnel IconSet si le format conditionnel actuel est un type IconSet.</span><span class="sxs-lookup"><span data-stu-id="eccb6-149">Returns the IconSet conditional format properties if the current conditional format is an IconSet type.</span></span> <span data-ttu-id="eccb6-150">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-150">Read-only.</span></span>

      <span data-ttu-id="eccb6-151">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-151">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - excel.Excel.IconSetConditionalFormat
  - uid: excel.Excel.ConditionalFormat.id
    summary: |-
      <span data-ttu-id="eccb6-152">La priorité de la mise en forme conditionnelle dans la ConditionalFormatCollection actuelle.</span><span class="sxs-lookup"><span data-stu-id="eccb6-152">The Priority of the Conditional Format within the current ConditionalFormatCollection.</span></span> <span data-ttu-id="eccb6-153">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-153">Read-only.</span></span>

      <span data-ttu-id="eccb6-154">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-154">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.ConditionalFormat.load
    summary: "<span data-ttu-id=\"eccb6-155\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eccb6-155\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"eccb6-156\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"eccb6-156\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="eccb6-157">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="eccb6-157">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="eccb6-158">`load(option?: string | string[]): Excel.ConditionalFormat`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="eccb6-158">`load(option?: string | string[]): Excel.ConditionalFormat` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="eccb6-159">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="eccb6-159">`load(option?: { select?: string; expand?: string; }): Excel.ConditionalFormat` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="eccb6-160">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="eccb6-160">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ConditionalFormat` - Only available on collection types.</span></span> <span data-ttu-id="eccb6-161">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="eccb6-161">It is similar to the preceding signature.</span></span> <span data-ttu-id="eccb6-162">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="eccb6-162">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="eccb6-163">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="eccb6-163">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="eccb6-164">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="eccb6-164">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.ConditionalFormatLoadOptions): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.ConditionalFormatLoadOptions
  - uid: excel.Excel.ConditionalFormat.load_1
    summary: <span data-ttu-id="eccb6-165">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="eccb6-165">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eccb6-166">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="eccb6-166">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="eccb6-167">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="eccb6-167">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.ConditionalFormat.load_2
    summary: <span data-ttu-id="eccb6-168">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="eccb6-168">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="eccb6-169">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="eccb6-169">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.ConditionalFormat;'
      return:
        type:
          - excel.Excel.ConditionalFormat
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="eccb6-170">Où propertyNamesAndPaths. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="eccb6-170">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.ConditionalFormat.preset
    summary: |-
      <span data-ttu-id="eccb6-171">Renvoie le format conditionnel des critères prédéfinis.</span><span class="sxs-lookup"><span data-stu-id="eccb6-171">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="eccb6-172">Pour plus d’informations, voir Excel. PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="eccb6-172">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="eccb6-173">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-173">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-174">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-174">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:M5");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.presetOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-175">Renvoie le format conditionnel des critères prédéfinis.</span><span class="sxs-lookup"><span data-stu-id="eccb6-175">Returns the preset criteria conditional format.</span></span> <span data-ttu-id="eccb6-176">Pour plus d’informations, voir Excel. PresetCriteriaConditionalFormat.</span><span class="sxs-lookup"><span data-stu-id="eccb6-176">See Excel.PresetCriteriaConditionalFormat for more details.</span></span>

      <span data-ttu-id="eccb6-177">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-177">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - excel.Excel.PresetCriteriaConditionalFormat
  - uid: excel.Excel.ConditionalFormat.priority
    summary: |-
      <span data-ttu-id="eccb6-178">Priorité (ou index) dans la collection de mise en forme conditionnelle dans laquelle ce format conditionnel existe actuellement.</span><span class="sxs-lookup"><span data-stu-id="eccb6-178">The priority (or index) within the conditional format collection that this conditional format currently exists in.</span></span> <span data-ttu-id="eccb6-179">Cette modification modifie également les priorités des autres mises en forme conditionnelles afin d’autoriser un ordre de priorité contigu.</span><span class="sxs-lookup"><span data-stu-id="eccb6-179">Changing this also changes other conditional formats' priorities, to allow for a contiguous priority order.</span></span> <span data-ttu-id="eccb6-180">Utiliser une priorité négative pour commencer à partir de l’arrière.</span><span class="sxs-lookup"><span data-stu-id="eccb6-180">Use a negative priority to begin from the back.</span></span> <span data-ttu-id="eccb6-181">Les priorités supérieures aux limites reçoivent et définissent la priorité maximale (ou minimale si négative).</span><span class="sxs-lookup"><span data-stu-id="eccb6-181">Priorities greater than than bounds will get and set to the maximum (or minimum if negative) priority.</span></span> <span data-ttu-id="eccb6-182">Notez également que si vous modifiez la priorité, vous devez extraire à nouveau une nouvelle copie de l’objet à cet emplacement de priorité si vous souhaitez y apporter d’autres modifications.</span><span class="sxs-lookup"><span data-stu-id="eccb6-182">Also note that if you change the priority, you have to re-fetch a new copy of the object at that new priority location if you want to make further changes to it.</span></span> <span data-ttu-id="eccb6-183">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-183">Read-only.</span></span>

      <span data-ttu-id="eccb6-184">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-184">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: excel.Excel.ConditionalFormat.set
    summary: '<span data-ttu-id="eccb6-185">Définit plusieurs propriétés d’un objet en même temps.</span><span class="sxs-lookup"><span data-stu-id="eccb6-185">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="eccb6-186">Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.</span><span class="sxs-lookup"><span data-stu-id="eccb6-186">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="eccb6-187">Cette méthode est dotée de la signature supplémentaire suivante:</span><span class="sxs-lookup"><span data-stu-id="eccb6-187">This method has the following additional signature:</span></span>

      `set(properties: Excel.ConditionalFormat): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.ConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="eccb6-188">Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l’objet sur lequel la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="eccb6-188">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.ConditionalFormatUpdateData
        - id: options
          description: <span data-ttu-id="eccb6-189">Fournit une option permettant de supprimer les erreurs si l’objet Properties tente de définir des propriétés en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-189">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - OfficeExtension.UpdateOptions
  - uid: excel.Excel.ConditionalFormat.set_1
    summary: '<span data-ttu-id="eccb6-190">Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.</span><span class="sxs-lookup"><span data-stu-id="eccb6-190">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.ConditionalFormat
  - uid: excel.Excel.ConditionalFormat.stopIfTrue
    summary: |-
      <span data-ttu-id="eccb6-191">Si les conditions de cette mise en forme conditionnelle sont remplies, aucun format de priorité inférieure ne doit prendre effet sur cette cellule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-191">If the conditions of this conditional format are met, no lower-priority formats shall take effect on that cell.</span></span> <span data-ttu-id="eccb6-192">NULL sur barre, les jeux d’icônes et colorscales car il n’existe pas de concept de StopIfTrue pour ces</span><span class="sxs-lookup"><span data-stu-id="eccb6-192">Null on databars, icon sets, and colorscales as there's no concept of StopIfTrue for these</span></span>

      <span data-ttu-id="eccb6-193">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-193">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: excel.Excel.ConditionalFormat.textComparison
    summary: |-
      <span data-ttu-id="eccb6-194">Renvoie les propriétés de mise en forme conditionnelle de texte spécifiques si le format conditionnel actuel est un type de texte.</span><span class="sxs-lookup"><span data-stu-id="eccb6-194">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="eccb6-195">Par exemple, pour mettre en forme des cellules correspondant au mot «Text».</span><span class="sxs-lookup"><span data-stu-id="eccb6-195">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="eccb6-196">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-196">Read-only.</span></span>

      <span data-ttu-id="eccb6-197">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-197">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-198">Exemples</span><span class="sxs-lookup"><span data-stu-id="eccb6-198">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B16:D18");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          });
          ```
  - uid: excel.Excel.ConditionalFormat.textComparisonOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-199">Renvoie les propriétés de mise en forme conditionnelle de texte spécifiques si le format conditionnel actuel est un type de texte.</span><span class="sxs-lookup"><span data-stu-id="eccb6-199">Returns the specific text conditional format properties if the current conditional format is a text type.</span></span> <span data-ttu-id="eccb6-200">Par exemple, pour mettre en forme des cellules correspondant au mot «Text».</span><span class="sxs-lookup"><span data-stu-id="eccb6-200">For example to format cells matching the word "Text".</span></span> <span data-ttu-id="eccb6-201">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-201">Read-only.</span></span>

      <span data-ttu-id="eccb6-202">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-202">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - excel.Excel.TextConditionalFormat
  - uid: excel.Excel.ConditionalFormat.toJSON
    summary: '<span data-ttu-id="eccb6-203">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="eccb6-203">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="eccb6-204">.</span><span class="sxs-lookup"><span data-stu-id="eccb6-204"></span></span> <span data-ttu-id="eccb6-205">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="eccb6-205"></span></span><!-- --><span data-ttu-id="eccb6-206">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. ConditionalFormat d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.ConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="eccb6-206">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.ConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.ConditionalFormatData`</span></span><!-- --><span data-ttu-id="eccb6-207">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="eccb6-207">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.ConditionalFormatData;'
      return:
        type:
          - excel.Excel.Interfaces.ConditionalFormatData
        description: ''
  - uid: excel.Excel.ConditionalFormat.topBottom
    summary: |-
      <span data-ttu-id="eccb6-208">Renvoie les propriétés de mise en forme conditionnelle de haut en bas si le format conditionnel actuel est un type de niveau inférieur.</span><span class="sxs-lookup"><span data-stu-id="eccb6-208">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="eccb6-209">Par exemple, pour mettre en forme les 10% ou les 10 derniers éléments.</span><span class="sxs-lookup"><span data-stu-id="eccb6-209">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="eccb6-210">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-210">Read-only.</span></span>

      <span data-ttu-id="eccb6-211">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-211">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.topBottomOrNullObject
    summary: |-
      <span data-ttu-id="eccb6-212">Renvoie les propriétés de mise en forme conditionnelle de haut en bas si le format conditionnel actuel est un type de niveau inférieur.</span><span class="sxs-lookup"><span data-stu-id="eccb6-212">Returns the Top/Bottom conditional format properties if the current conditional format is an TopBottom type.</span></span> <span data-ttu-id="eccb6-213">Par exemple, pour mettre en forme les 10% ou les 10 derniers éléments.</span><span class="sxs-lookup"><span data-stu-id="eccb6-213">For example to format the top 10% or bottom 10 items.</span></span> <span data-ttu-id="eccb6-214">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-214">Read-only.</span></span>

      <span data-ttu-id="eccb6-215">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-215">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - excel.Excel.TopBottomConditionalFormat
  - uid: excel.Excel.ConditionalFormat.type
    summary: |-
      <span data-ttu-id="eccb6-216">Type de mise en forme conditionnelle.</span><span class="sxs-lookup"><span data-stu-id="eccb6-216">A type of conditional format.</span></span> <span data-ttu-id="eccb6-217">Une seule peut être définie à la fois.</span><span class="sxs-lookup"><span data-stu-id="eccb6-217">Only one can be set at a time.</span></span> <span data-ttu-id="eccb6-218">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="eccb6-218">Read-only.</span></span>

      <span data-ttu-id="eccb6-219">\[[Ensemble d’API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="eccb6-219">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
        description: |-


          #### <a name="examples"></a><span data-ttu-id="eccb6-220">範例</span><span class="sxs-lookup"><span data-stu-id="eccb6-220">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          });
          ```