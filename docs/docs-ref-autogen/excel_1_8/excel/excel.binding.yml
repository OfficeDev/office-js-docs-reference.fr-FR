### YamlMime:UniversalReference
items:
  - uid: excel.Excel.Binding
    summary: |-
      <span data-ttu-id="1321d-101">Représente une liaison Office.js définie dans le classeur.</span><span class="sxs-lookup"><span data-stu-id="1321d-101">Represents an Office.js binding that is defined in the workbook.</span></span>

      <span data-ttu-id="1321d-102">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Binding
    fullName: Excel.Binding
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.Binding.context
      - excel.Excel.Binding.delete
      - excel.Excel.Binding.getRange
      - excel.Excel.Binding.getTable
      - excel.Excel.Binding.getText
      - excel.Excel.Binding.id
      - excel.Excel.Binding.load
      - excel.Excel.Binding.load_1
      - excel.Excel.Binding.load_2
      - excel.Excel.Binding.onDataChanged
      - excel.Excel.Binding.onSelectionChanged
      - excel.Excel.Binding.toJSON
      - excel.Excel.Binding.type
  - uid: excel.Excel.Binding.context
    summary: <span data-ttu-id="1321d-103">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="1321d-103">The request context associated with the object.</span></span> <span data-ttu-id="1321d-104">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="1321d-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.Binding.delete
    summary: |-
      <span data-ttu-id="1321d-105">Supprime la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-105">Deletes the binding.</span></span>

      <span data-ttu-id="1321d-106">\[[Ensemble d’API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-106">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel.Excel.Binding.getRange
    summary: |-
      <span data-ttu-id="1321d-107">Renvoie la plage représentée par la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-107">Returns the range represented by the binding.</span></span> <span data-ttu-id="1321d-108">Génère une erreur si la liaison n’est pas du type approprié.</span><span class="sxs-lookup"><span data-stu-id="1321d-108">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="1321d-109">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1321d-110">Exemples</span><span class="sxs-lookup"><span data-stu-id="1321d-110">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var range = binding.getRange();
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getTable
    summary: |-
      <span data-ttu-id="1321d-111">Renvoie le tableau représenté par la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-111">Returns the table represented by the binding.</span></span> <span data-ttu-id="1321d-112">Génère une erreur si la liaison n’est pas du type approprié.</span><span class="sxs-lookup"><span data-stu-id="1321d-112">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="1321d-113">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-113">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getTable()
    fullName: getTable()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTable(): Excel.Table;'
      return:
        type:
          - excel.Excel.Table
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1321d-114">Exemples</span><span class="sxs-lookup"><span data-stu-id="1321d-114">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var table = binding.getTable();
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.getText
    summary: |-
      <span data-ttu-id="1321d-115">Renvoie le texte représenté par la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-115">Returns the text represented by the binding.</span></span> <span data-ttu-id="1321d-116">Génère une erreur si la liaison n’est pas du type approprié.</span><span class="sxs-lookup"><span data-stu-id="1321d-116">Will throw an error if binding is not of the correct type.</span></span>

      <span data-ttu-id="1321d-117">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1321d-118">Exemples</span><span class="sxs-lookup"><span data-stu-id="1321d-118">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              var text = binding.getText();
              binding.load('text');
              return ctx.sync().then(function() {
                  console.log(text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.Binding.id
    summary: |-
      <span data-ttu-id="1321d-119">Représente l’identificateur de liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-119">Represents binding identifier.</span></span> <span data-ttu-id="1321d-120">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="1321d-120">Read-only.</span></span>

      <span data-ttu-id="1321d-121">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-121">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: excel.Excel.Binding.load
    summary: "<span data-ttu-id=\"1321d-122\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1321d-122\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"1321d-123\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1321d-123\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="1321d-124">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="1321d-124">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="1321d-125">`load(option?: string | string[]): Excel.Binding`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="1321d-125">`load(option?: string | string[]): Excel.Binding` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="1321d-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="1321d-126">`load(option?: { select?: string; expand?: string; }): Excel.Binding` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="1321d-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="1321d-127">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Binding` - Only available on collection types.</span></span> <span data-ttu-id="1321d-128">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="1321d-128">It is similar to the preceding signature.</span></span> <span data-ttu-id="1321d-129">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="1321d-129">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="1321d-130">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="1321d-130">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="1321d-131">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="1321d-131">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.BindingLoadOptions): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.BindingLoadOptions
  - uid: excel.Excel.Binding.load_1
    summary: <span data-ttu-id="1321d-132">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="1321d-132">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1321d-133">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="1321d-133">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1321d-134">Exemples</span><span class="sxs-lookup"><span data-stu-id="1321d-134">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var binding = ctx.workbook.bindings.getItemAt(0);
              binding.load('type');
              return ctx.sync().then(function() {
                  console.log(binding.type);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="1321d-135">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="1321d-135">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.Binding.load_2
    summary: <span data-ttu-id="1321d-136">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="1321d-136">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="1321d-137">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="1321d-137">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Binding;'
      return:
        type:
          - excel.Excel.Binding
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="1321d-138">Où propertyNamesAndPaths. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="1321d-138">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel.Excel.Binding.onDataChanged
    summary: |-
      <span data-ttu-id="1321d-139">Se produit lors de la modification des données ou de la mise en forme dans la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-139">Occurs when data or formatting within the binding is changed.</span></span>

      <span data-ttu-id="1321d-140">\[[Ensemble d’API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-140">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onDataChanged
    fullName: onDataChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDataChanged: OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingDataChangedEventArgs>
        description: |-


          #### <a name="examples"></a><span data-ttu-id="1321d-141">Exemples</span><span class="sxs-lookup"><span data-stu-id="1321d-141">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");    
              const salesTable = sheet.tables.getItem("SalesTable");
              const salesByQuarterBinding = context.workbook.bindings.add(salesTable.getRange(), "Table", "SalesByQuarter");
              salesByQuarterBinding.onDataChanged.add(onSalesDataChanged);

              console.log("The data changed handler is registered.");

              await context.sync();
          });
          ```
  - uid: excel.Excel.Binding.onSelectionChanged
    summary: |-
      <span data-ttu-id="1321d-142">Se produit lorsque le contenu sélectionné dans la liaison est modifié.</span><span class="sxs-lookup"><span data-stu-id="1321d-142">Occurs when the selected content in the binding is changed.</span></span>

      <span data-ttu-id="1321d-143">\[[Ensemble d’API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-143">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>;'
      return:
        type:
          - OfficeExtension.EventHandlers<Excel.BindingSelectionChangedEventArgs>
  - uid: excel.Excel.Binding.toJSON
    summary: '<span data-ttu-id="1321d-144">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="1321d-144">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="1321d-145">.</span><span class="sxs-lookup"><span data-stu-id="1321d-145"></span></span> <span data-ttu-id="1321d-146">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="1321d-146"></span></span><!-- --><span data-ttu-id="1321d-147">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. Binding est un objet d’API `toJSON` , la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.BindingData`</span><span class="sxs-lookup"><span data-stu-id="1321d-147">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Binding object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.BindingData`</span></span><!-- --><span data-ttu-id="1321d-148">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="1321d-148">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.BindingData;'
      return:
        type:
          - excel.Excel.Interfaces.BindingData
        description: ''
  - uid: excel.Excel.Binding.type
    summary: |-
      <span data-ttu-id="1321d-149">Renvoie le type de la liaison.</span><span class="sxs-lookup"><span data-stu-id="1321d-149">Returns the type of the binding.</span></span> <span data-ttu-id="1321d-150">Pour plus d’informations, voir Excel. BindingType.</span><span class="sxs-lookup"><span data-stu-id="1321d-150">See Excel.BindingType for details.</span></span> <span data-ttu-id="1321d-151">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="1321d-151">Read-only.</span></span>

      <span data-ttu-id="1321d-152">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="1321d-152">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.BindingType | "Range" | "Table" | "Text";'
      return:
        type:
          - Excel.BindingType | "Range" | "Table" | "Text"