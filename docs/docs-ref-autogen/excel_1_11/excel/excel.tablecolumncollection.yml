### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableColumnCollection:class'
    summary: "Représente une collection de toutes les colonnes du tableau.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: Excel.TableColumnCollection
    fullName: Excel.TableColumnCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'office!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableColumnCollection#add:member(1)'
      - 'excel!Excel.TableColumnCollection#context:member'
      - 'excel!Excel.TableColumnCollection#count:member'
      - 'excel!Excel.TableColumnCollection#getCount:member(1)'
      - 'excel!Excel.TableColumnCollection#getItem:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
      - 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableColumnCollection#items:member'
      - 'excel!Excel.TableColumnCollection#load:member(1)'
      - 'excel!Excel.TableColumnCollection#load:member(2)'
      - 'excel!Excel.TableColumnCollection#load:member(3)'
      - 'excel!Excel.TableColumnCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableColumnCollection#add:member(1)'
    summary: "Ajoute une nouvelle colonne au tableau.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1 nécessite un index plus petit que le nombre total de colonnes\_; 1,4 permet à l’index d’être facultatif (null ou-1) et ajoute une colonne à la fin\_; 1,4 autorise le paramètre Name au moment de la création.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]"
    name: 'add(index, values, name)'
    fullName: 'add(index, values, name)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(index?: number, values?: Array<Array<boolean | string | number>> | boolean | string | number, name?: string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              var values = [["Sample"], ["Values"], ["For"], ["New"], ["Column"]];
              var column = tables.getItem("Table1").columns.add(null, values);
              column.load('name');
              return ctx.sync().then(function() {
                  console.log(column.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: 'Facultatif. Spécifie la position relative de la nouvelle colonne. Si la valeur est null ou -1, la ligne est ajoutée à la fin. Les colonnes avec un index supérieur seront décalées sur le côté. Avec indice zéro.'
          type:
            - number
        - id: values
          description: "Facultatif. Matrice\_2D des valeurs non mises en forme de la colonne du tableau."
          type:
            - 'excel!Excel.TableColumnCollection#add~0:complex'
        - id: name
          description: 'Facultatif. Spécifie le nom de la nouvelle colonne. Si la valeur est null, le nom par défaut est utilisé.'
          type:
            - string
  - uid: 'excel!Excel.TableColumnCollection#context:member'
    summary: Contexte de demande associé à l’objet. Cette opération connecte le processus du complément au processus de l’application hôte Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableColumnCollection#count:member'
    summary: "Renvoie le nombre de colonnes du tableau.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableColumnCollection#getCount:member(1)'
    summary: "Obtient le nombre de colonnes dans le tableau.\n\n\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableColumnCollection#getItem:member(1)'
    summary: "Obtient un objet de colonne par son nom ou son ID.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem('Table1').columns.getItem(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: Nom ou ID de la colonne.
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#getItemAt:member(1)'
    summary: "Obtient une colonne en fonction de sa position dans la collection.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumn = ctx.workbook.tables.getItem['Table1'].columns.getItemAt(0);
              tableColumn.load('name');
              return ctx.sync().then(function() {
                      console.log(tableColumn.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: Valeur d’indice de l’objet à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'excel!Excel.TableColumnCollection#getItemOrNullObject:member(1)'
    summary: "Obtient un objet de colonne par nom ou par ID. Si la colonne n’existe pas, renvoie un objet null.\n\n\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: number | string): Excel.TableColumn;'
      return:
        type:
          - 'excel!Excel.TableColumn:class'
        description: ''
      parameters:
        - id: key
          description: Nom ou ID de la colonne.
          type:
            - number | string
  - uid: 'excel!Excel.TableColumnCollection#items:member'
    summary: Obtient l’élément enfant chargé dans cette collection de sites.
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.TableColumn[];'
      return:
        type:
          - 'excel!Excel.TableColumnCollection#items~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: options
          description: Fournit des options pour les propriétés de l’objet à charger.
          type:
            - 'excel!Excel.TableColumnCollection#load~0:complex'
  - uid: 'excel!Excel.TableColumnCollection#load:member(2)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var tableColumns = ctx.workbook.tables.getItem('Table1').columns;
              tableColumns.load('items');
              return ctx.sync().then(function() {
                  console.log("tableColumns Count: " + tableColumns.count);
                  for (var i = 0; i < tableColumns.items.length; i++) {
                      console.log(tableColumns.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableColumnCollection#load:member(3)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableColumnCollection;'
      return:
        type:
          - 'excel!Excel.TableColumnCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`est une chaîne délimitée par des virgules qui spécifie les propriétés à `propertyNamesAndPaths.expand` charger et une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.'
          type:
            - 'office!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableColumnCollection#toJSON:member(1)'
    summary: "Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.TableColumnCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.TableColumnCollectionData`<!-- -->) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection."
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableColumnCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
        description: ''
references:
  - uid: 'office!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.TableColumn:class'
    name: Excel.TableColumn
  - uid: 'excel!Excel.TableColumnCollection#add~0:complex'
    name: Array<Array<boolean | string | number>> | boolean | string | number
    fullName: Array<Array<boolean | string | number>> | boolean | string | number
    spec.typeScript:
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <
        fullName: <
      - uid: '!Array:interface'
        name: Array
        fullName: Array
      - name: <boolean | string | number>> | boolean | string | number
        fullName: <boolean | string | number>> | boolean | string | number
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableColumnCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'office!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableColumnCollection#items~0:complex'
    name: 'Excel.TableColumn[]'
    fullName: 'Excel.TableColumn[]'
    spec.typeScript:
      - uid: 'excel!Excel.TableColumn:class'
        name: Excel.TableColumn
        fullName: Excel.TableColumn
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableColumnCollection:class'
    name: Excel.TableColumnCollection
  - uid: 'excel!Excel.TableColumnCollection#load~0:complex'
    name: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableColumnCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableColumnCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableColumnCollectionLoadOptions
        fullName: Excel.Interfaces.TableColumnCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'office!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.TableColumnCollectionData:interface'
    name: Excel.Interfaces.TableColumnCollectionData