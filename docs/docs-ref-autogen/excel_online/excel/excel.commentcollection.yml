### YamlMime:TSType
name: Excel.CommentCollection
uid: excel!Excel.CommentCollection:class
package: excel!
fullName: Excel.CommentCollection
summary: >-
  Représente une collection d’objets de commentaire qui font partie du manuel.


  \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.CommentCollection#context:member
  package: excel!
  fullName: context
  summary: Contexte de demande associé à l’objet. Cela connecte le processus du add-in au processus de l’application hôte Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: items
  uid: excel!Excel.CommentCollection#items:member
  package: excel!
  fullName: items
  summary: Obtient l’élément enfant chargé dans cette collection de sites.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Comment[];'
    return:
      type: <xref uid="excel!Excel.Comment:class" />[]
- name: onAdded
  uid: excel!Excel.CommentCollection#onAdded:member
  package: excel!
  fullName: onAdded
  summary: >-
    Se produit lorsque les commentaires sont ajoutés.


    \[[Ensemble d’API : ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.CommentAddedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.CommentAddedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nawait Excel.run(async (context) => {\n    const comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onAdded, onChanged, and onDeleted comment event handlers.\n    comments.onAdded.add(commentAdded);\n    comments.onChanged.add(commentChanged);\n    comments.onDeleted.add(commentDeleted);\n\n    await context.sync();\n\n    console.log(\"Added event handlers for when comments are added, changed, or deleted.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nasync function commentAdded(event: Excel.CommentAddedEventArgs) {\n    await Excel.run(async (context) => {\n        // Retrieve the added comment using the comment ID.\n        // Note: This method assumes only a single comment is added at a time. \n        const addedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);\n\n        // Load the added comment's data.\n        addedComment.load([\"content\", \"authorName\", \"creationDate\"]);\n\n        await context.sync();\n\n        // Print out the added comment's data.\n        console.log(`A comment was added:`);\n        console.log(`    ID: ${event.commentDetails[0].commentId}`);\n        console.log(`    Comment content:${addedComment.content}`);\n        console.log(`    Comment author:${addedComment.authorName}`);\n        console.log(`    Creation date:${addedComment.creationDate}`);\n    });\n}\n```"
- name: onChanged
  uid: excel!Excel.CommentCollection#onChanged:member
  package: excel!
  fullName: onChanged
  summary: >-
    Se produit lorsque des commentaires ou des réponses dans une collection de commentaires sont modifiés, y compris lorsque les réponses sont supprimées.


    \[[Ensemble d’API : ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.CommentChangedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.CommentChangedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nawait Excel.run(async (context) => {\n    const comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onAdded, onChanged, and onDeleted comment event handlers.\n    comments.onAdded.add(commentAdded);\n    comments.onChanged.add(commentChanged);\n    comments.onDeleted.add(commentDeleted);\n\n    await context.sync();\n\n    console.log(\"Added event handlers for when comments are added, changed, or deleted.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nasync function commentChanged(event: Excel.CommentChangedEventArgs) {\n    await Excel.run(async (context) => {\n        // Retrieve the changed comment using the comment ID.\n        // Note: This method assumes only a single comment is changed at a time. \n        const changedComment = context.workbook.comments.getItem(event.commentDetails[0].commentId);\n\n        // Load the changed comment's data.\n        changedComment.load([\"content\", \"authorName\", \"creationDate\"]);\n\n        await context.sync();\n\n        // Print out the changed comment's data.\n        console.log(`A comment was changed:`);\n        console.log(`    ID: ${event.commentDetails[0].commentId}`);\n        console.log(`    Updated comment content: ${changedComment.content}`);\n        console.log(`    Comment author: ${changedComment.authorName}`);\n        console.log(`    Creation date: ${changedComment.creationDate}`);\n    });\n}\n```"
- name: onDeleted
  uid: excel!Excel.CommentCollection#onDeleted:member
  package: excel!
  fullName: onDeleted
  summary: >-
    Se produit lorsque des commentaires sont supprimés dans la collection de commentaires.


    \[[Ensemble d’API : ExcelApi 1.12](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.CommentDeletedEventArgs>;'
    return:
      type: <xref uid="office!OfficeExtension.EventHandlers:class" />&lt;<xref uid="excel!Excel.CommentDeletedEventArgs:interface" />&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nawait Excel.run(async (context) => {\n    const comments = context.workbook.worksheets.getActiveWorksheet().comments;\n\n    // Register the onAdded, onChanged, and onDeleted comment event handlers.\n    comments.onAdded.add(commentAdded);\n    comments.onChanged.add(commentChanged);\n    comments.onDeleted.add(commentDeleted);\n\n    await context.sync();\n\n    console.log(\"Added event handlers for when comments are added, changed, or deleted.\");\n});\n```\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/30-events/events-comment-event-handler.yaml\nasync function commentDeleted(event: Excel.CommentDeletedEventArgs) {\n    await Excel.run(async (context) => {\n        // Print out the deleted comment's ID.\n        // Note: This method assumes only a single comment is deleted at a time. \n        console.log(`A comment was deleted:`);\n        console.log(`    ID: ${event.commentDetails[0].commentId}`);\n    });\n}\n```"
methods:
- name: add(cellAddress, content, contentType)
  uid: excel!Excel.CommentCollection#add:member(1)
  package: excel!
  fullName: add(cellAddress, content, contentType)
  summary: >-
    Crée un nouveau commentaire avec le contenu donné sur la cellule donnée. Une `InvalidArgument` erreur est lancée si la plage fournie est supérieure à une cellule.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(cellAddress: Range | string, content: CommentRichContent | string, contentType?: Excel.ContentType): Excel.Comment;'
    parameters:
    - id: cellAddress
      description: Cellule à laquelle le commentaire est ajouté. Il peut s’agit d’un objet Range ou d’une chaîne. S’il s’agit d’une chaîne, elle doit contenir l’adresse complète, y compris le nom de la feuille. Une `InvalidArgument` erreur est lancée si la plage fournie est supérieure à une cellule.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: content
      description: 'Contenu du commentaire. Il peut s’agit d’une chaîne ou d’un objet CommentRichContent. Les chaînes sont utilisées pour le texte simple. Les objets CommentRichContent permettent d’autres fonctionnalités de commentaire, telles que les mentions. \[Ensemble d’api : ExcelApi 1.10 pour la chaîne, 1,11 pour l’objet CommentRichContent\]'
      type: <xref uid="excel!Excel.CommentRichContent:interface" /> | string
    - id: contentType
      description: 'Facultatif. Type de contenu contenu dans le commentaire. La valeur par défaut est enum `ContentType.Plain`<!-- -->. \[Ensemble d’api : ExcelApi 1.10 pour Enum ContentType.Plain, 1,11 pour Enum ContentType.Mention\]'
      type: <xref uid="excel!Excel.ContentType:enum" />
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/12-comment/comment-basics.yaml\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Comments\");\n\n    // Note that an InvalidArgument error will be thrown if multiple cells passed to `comment.add`.\n    sheet.comments.add(\"A2\", \"TODO: add data.\");\n    await context.sync();\n});\n```"
- name: add(cellAddress, content, contentTypeString)
  uid: excel!Excel.CommentCollection#add:member(2)
  package: excel!
  fullName: add(cellAddress, content, contentTypeString)
  summary: >-
    Crée un nouveau commentaire avec le contenu donné sur la cellule donnée. Une `InvalidArgument` erreur est lancée si la plage fournie est supérieure à une cellule.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(cellAddress: Range | string, content: CommentRichContent | string, contentTypeString?: "Plain" | "Mention"): Excel.Comment;'
    parameters:
    - id: cellAddress
      description: Cellule à laquelle le commentaire est ajouté. Il peut s’agit d’un objet Range ou d’une chaîne. S’il s’agit d’une chaîne, elle doit contenir l’adresse complète, y compris le nom de la feuille. Une `InvalidArgument` erreur est lancée si la plage fournie est supérieure à une cellule.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: content
      description: 'Contenu du commentaire. Il peut s’agit d’une chaîne ou d’un objet CommentRichContent. Les chaînes sont utilisées pour le texte simple. Les objets CommentRichContent permettent d’autres fonctionnalités de commentaire, telles que les mentions. \[Ensemble d’api : ExcelApi 1.10 pour la chaîne, 1,11 pour l’objet CommentRichContent\]'
      type: <xref uid="excel!Excel.CommentRichContent:interface" /> | string
    - id: contentTypeString
      description: 'Facultatif. Type de contenu contenu dans le commentaire. La valeur par défaut est enum `ContentType.Plain`<!-- -->. \[Ensemble d’api : ExcelApi 1.10 pour Enum ContentType.Plain, 1,11 pour Enum ContentType.Mention\]'
      type: "\"Plain\" | \"Mention\""
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: ''
- name: getCount()
  uid: excel!Excel.CommentCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Obtient le nombre de commentaires de la collection.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(commentId)
  uid: excel!Excel.CommentCollection#getItem:member(1)
  package: excel!
  fullName: getItem(commentId)
  summary: >-
    Obtient un commentaire à partir de la collection de sites en fonction de son ID.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(commentId: string): Excel.Comment;'
    parameters:
    - id: commentId
      description: Identificateur du commentaire.
      type: string
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: ''
- name: getItemAt(index)
  uid: excel!Excel.CommentCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Obtient un commentaire en fonction de sa position dans la collection.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Comment;'
    parameters:
    - id: index
      description: Valeur d’indice de l’objet à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: ''
- name: getItemByCell(cellAddress)
  uid: excel!Excel.CommentCollection#getItemByCell:member(1)
  package: excel!
  fullName: getItemByCell(cellAddress)
  summary: >-
    Obtient le commentaire à partir de la cellule spécifiée.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemByCell(cellAddress: Range | string): Excel.Comment;'
    parameters:
    - id: cellAddress
      description: Cellule sur laquelle se trouve le commentaire. Il peut s’agit d’un objet Range ou d’une chaîne. S’il s’agit d’une chaîne, elle doit contenir l’adresse complète, y compris le nom de la feuille. Une `InvalidArgument` erreur est lancée si la plage fournie est supérieure à une cellule.
      type: <xref uid="excel!Excel.Range:class" /> | string
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: ''
- name: getItemByReplyId(replyId)
  uid: excel!Excel.CommentCollection#getItemByReplyId:member(1)
  package: excel!
  fullName: getItemByReplyId(replyId)
  summary: >-
    Obtient le commentaire auquel la réponse donnée est connectée.


    \[[Ensemble d’API : ExcelApi 1.10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemByReplyId(replyId: string): Excel.Comment;'
    parameters:
    - id: replyId
      description: Identificateur de la réponse de commentaire.
      type: string
    return:
      type: <xref uid="excel!Excel.Comment:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.CommentCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.CommentCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CommentCollection;'
    parameters:
    - id: options
      description: Fournit des options pour lesquelles les propriétés de l’objet à charger.
      type: <xref uid="excel!Excel.Interfaces.CommentCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.CommentCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.CommentCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.CommentCollection;'
    parameters:
    - id: propertyNames
      description: Chaîne délimitée par des virgules ou tableau de chaînes spécifiant les propriétés à charger.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.CommentCollection:class" />
      description: ''
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.CommentCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.CommentCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et est une chaîne délimitée par des virgules qui spécifie les propriétés de `propertyNamesAndPaths.expand` navigation à charger.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.CommentCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.CommentCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Remplace la méthode JavaScript afin de fournir une sortie plus utile lorsqu’un objet `toJSON()` API est transmis à `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est transmis.) Alors que `Excel.CommentCollection` l’objet d’origine est un objet API, la méthode renvoie un objet `toJSON` JavaScript simple (tapé sous la forme `Excel.Interfaces.CommentCollectionData`<!-- -->) qui contient un tableau « éléments » avec des copies peu profondes de toutes les propriétés chargées à partir des éléments de la collection.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.CommentCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.CommentCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 48445e09a4ba4458959a6b8f6308f90319e83e5d
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51293807"
