### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:class'
    summary: "Une feuille de calcul Excel est une grille de cellules. Il peut contenir des données, des tableaux, des graphiques, etc. Pour en savoir plus sur le modèle objet de feuille de calcul, consultez [travailler avec des feuilles de calcul à l’aide de l’API JavaScript pour Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets) .<!-- -->.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#context:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#copy:member(2)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#load:member(2)'
      - 'excel!Excel.Worksheet#load:member(3)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#onActivated:member'
      - 'excel!Excel.Worksheet#onCalculated:member'
      - 'excel!Excel.Worksheet#onChanged:member'
      - 'excel!Excel.Worksheet#onColumnSorted:member'
      - 'excel!Excel.Worksheet#onDeactivated:member'
      - 'excel!Excel.Worksheet#onFormatChanged:member'
      - 'excel!Excel.Worksheet#onRowSorted:member'
      - 'excel!Excel.Worksheet#onSelectionChanged:member'
      - 'excel!Excel.Worksheet#onSingleClicked:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#set:member(1)'
      - 'excel!Excel.Worksheet#set:member(2)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#toJSON:member(1)'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: "Active la feuille de calcul dans l’interface utilisateur Excel.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.activate();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: "Représente l’objet AutoFilter de filtre automatique de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: Excel.AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: "Calcule toutes les cellules d’une feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: 'True, pour marquer tout comme modifié.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: "Renvoie une collection de graphiques qui font partie de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: Excel.ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:class'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: "Renvoie une collection de tous les objets Lecteur sur l’ordinateur. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: Excel.CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:class'
  - uid: 'excel!Excel.Worksheet#context:member'
    summary: Contexte de demande associé à l’objet. Cette opération connecte le processus du complément au processus de l’application hôte Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: "Copie une feuille de calcul et la place à la position spécifiée.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionType?: Excel.WorksheetPositionType, relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-
          Feuille de calcul nouvellement créée.

          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {

              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          });
          ```
      parameters:
        - id: positionType
          description: "Emplacement dans le classeur où placer la feuille de calcul nouvellement créée. La valeur par défaut est «\_None\_», qui insère la feuille de calcul au début de la feuille de calcul."
          type:
            - 'excel!Excel.WorksheetPositionType:enum'
        - id: relativeTo
          description: "Feuille de calcul existante qui détermine la position de la nouvelle feuille de calcul. Cette condition n’est nécessaire `positionType` que si le est «\_Before\_» ou «\_after\_»."
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#copy:member(2)'
    summary: "Copie une feuille de calcul et la place à la position spécifiée.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'copy(positionTypeString, relativeTo)'
    fullName: 'copy(positionTypeString, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copy(positionTypeString?: "None" | "Before" | "After" | "Beginning" | "End", relativeTo?: Excel.Worksheet): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: Feuille de calcul nouvellement créée.
      parameters:
        - id: positionTypeString
          description: "Emplacement dans le classeur où placer la feuille de calcul nouvellement créée. La valeur par défaut est «\_None\_», qui insère la feuille de calcul au début de la feuille de calcul."
          type:
            - '"None" | "Before" | "After" | "Beginning" | "End"'
        - id: relativeTo
          description: "Feuille de calcul existante qui détermine la position de la nouvelle feuille de calcul. Cette condition n’est nécessaire `positionType` que si le est «\_Before\_» ou «\_after\_»."
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: "Supprime la feuille de calcul du classeur. Notez que si la visibilité de la feuille de calcul est définie sur «\_VeryHidden\_», l’opération de suppression `InvalidOperation` échoue avec une exception. Vous devez d’abord modifier sa visibilité sur masquée ou visible avant de la supprimer.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.delete();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: "Obtient ou définit EnableCalculation, propriété de la feuille de calcul. La valeur true si Excel recalcule la feuille de calcul lorsque cela est nécessaire. Elle a la valeur False si Excel ne recalcule pas la feuille.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: "Trouve toutes les occurrences de la chaîne donnée en fonction des critères spécifiées et renvoie un objet RangeAreas comprenant une ou plusieurs plages rectangulaires.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: 'Objet RangeArea, comprenant une ou plusieurs plages rectangulaires, qui correspondent aux critères de recherche. Si aucune cellule ne répond à ce critère, une erreur ItemNotFound est générée.'
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: criteria
          description: 'Critères de recherche supplémentaires, notamment si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: "Trouve toutes les occurrences de la chaîne donnée en fonction des critères spécifiées et renvoie un objet RangeAreas comprenant une ou plusieurs plages rectangulaires.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAllOrNullObject(text: string, criteria: Excel.WorksheetSearchCriteria): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-
          Objet RangeArea, comprenant une ou plusieurs plages rectangulaires, qui correspondent aux critères de recherche. S’il n’y a aucune correspondance, cette fonction renverra un objet null.

          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          });
          ```
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: criteria
          description: 'Critères de recherche supplémentaires, notamment si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: "Obtient un objet qui peut être utilisé pour manipuler les volets figés de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: Excel.WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:class'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: "Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne. La cellule peut être située en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var cell = worksheet.getCell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: Numéro de ligne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
        - id: column
          description: Numéro de colonne de la cellule à récupérer. Avec indice zéro.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: "Obtient la feuille de calcul qui suit celle-ci. S’il n’existe aucune feuille de calcul à la suite de celle-ci, cette méthode génère une erreur.\n\n\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: "Obtient la feuille de calcul qui suit celle-ci. S’il n’existe aucune feuille de calcul à la suite de celle-ci, cette méthode renvoie un objet null.\n\n\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: "Obtient la feuille de calcul qui précède celle-ci. S’il n’y a pas de feuille de calcul précédente, cette méthode génère une erreur.\n\n\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;
              const currentSheet = sheets.getActiveWorksheet();
              const previousYearSheet = currentSheet.getPrevious();
              const currentTaxDueRange = currentSheet.getRange("C2");
              const previousTaxDueRange = previousYearSheet.getRange("C2");

              currentSheet.load("name");
              previousYearSheet.load("name");
              currentTaxDueRange.load("text");
              previousTaxDueRange.load("text");

              await context.sync();

              let currentYear = currentSheet.name.substr(5, 4);
              let previousYear = previousYearSheet.name.substr(5, 4);
              console.log("Two Year Tax Due Comparison", `Tax due for ${currentYear} was ${currentTaxDueRange.text[0][0]}\nTax due for ${previousYear} was ${previousTaxDueRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: "Obtient la feuille de calcul qui précède celle-ci. S’il n’y a pas de feuille de calcul précédente, cette méthode renvoie une valeur null.\n\n\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Facultatif. Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: "Obtient l’objet de plage, représentant un seul bloc de cellules rectangulaires, spécifié par l’adresse ou le nom.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeName = 'MyRange';
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeName);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: "Facultatif. La chaîne représentant l’adresse ou le nom de la plage. Par exemple, «\_a1\_: B2\_». Si cette propriété n’est pas définie, la plage de la feuille de calcul toute entière est renvoyée."
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: "Obtient l’objet plage commençant à un index de ligne et de colonne particulier et couvrant un certain nombre de lignes et de colonnes.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeByIndexes(startRow: number, startColumn: number, rowCount: number, columnCount: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: startRow
          description: Ligne de début (indexé à zéro).
          type:
            - number
        - id: startColumn
          description: Colonne de début (indexée à zéro).
          type:
            - number
        - id: rowCount
          description: Nombre de lignes à inclure dans la plage.
          type:
            - number
        - id: columnCount
          description: Nombre de colonnes à inclure dans la plage.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: "Obtient l’objet RangeAreas représentant un ou plusieurs blocs de plages rectangulaires, spécifiés par nom ou l’adresse.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: "Facultatif. Chaîne contenant les adresses ou les noms des plages individuelles séparées par des virgules. Par exemple, «\_a1\_: B2, A5\_: B5\_». Si ce n’est pas spécifié, un objet RangeArea est renvoyé pour l’intégralité de la feuille de calcul."
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: "La plage utilisée est la plus petite plage qui englobe toutes les cellules auxquelles une valeur ou un format est affecté. Si la feuille de calcul entière est vide, cette fonction renvoie la cellule supérieure gauche (autrement dit, elle ne génère *pas* d’erreur).\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              var usedRange = worksheet.getUsedRange();
              usedRange.load('address');
              return ctx.sync().then(function() {
                      console.log(usedRange.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: valuesOnly
          description: "Facultatif. Si la valeur est true, ne prend en compte que les cellules contenant des valeurs comme cellules utilisées (en ignorant la mise en forme). \\[Ensemble d’API\_: ExcelApi 1,2\\]"
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: "La plage utilisée est la plus petite plage qui englobe toutes les cellules auxquelles une valeur ou un format est affecté. Si la feuille de calcul entière est vide, cette fonction renvoie un objet null.\n\n\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: valuesOnly
          description: Facultatif. Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: "Obtient la collection de saut de page horizontal pour la feuille de calcul. Cette collection contient uniquement les sauts de page manuels.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: "Renvoie une valeur qui permet d’identifier la feuille de calcul de façon unique dans un classeur donné. La valeur de l’identificateur reste identique, même lorsque la feuille de calcul est renommée ou déplacée. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.WorksheetLoadOptions): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: options
          description: Fournit des options pour les propriétés de l’objet à charger.
          type:
            - 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
  - uid: 'excel!Excel.Worksheet#load:member(2)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          // Get worksheet properties based on sheet name.
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.load('position')
              return ctx.sync().then(function() {
                      console.log(worksheet.position);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#load:member(3)'
    summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler `context.sync()` avant de lire les propriétés.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`est une chaîne délimitée par des virgules qui spécifie les propriétés à `propertyNamesAndPaths.expand` charger et une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: "Nom complet de la feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: "Collection de noms inclus dans l’étendue de la feuille de calcul active. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: Excel.NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:class'
  - uid: 'excel!Excel.Worksheet#onActivated:member'
    summary: "Se produit lorsque la feuille de calcul est activée.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onActivated
    fullName: onActivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onActivated~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onActivated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The activated worksheet ID is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onCalculated:member'
    summary: "Se produit lors du calcul de la feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onCalculated
    fullName: onCalculated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onCalculated: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onCalculated~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onCalculated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The worksheet has recalculated.");
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onChanged:member'
    summary: "Se produit lorsque des données sont modifiées dans une feuille de calcul spécifique.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onChanged.add(onChange);
              await context.sync();

              console.log("Added a worksheet-level data-changed event handler.");
          });
          ```
  - uid: 'excel!Excel.Worksheet#onColumnSorted:member'
    summary: "Se produit lorsqu’une ou plusieurs colonnes ont été triées. Ce problème se produit en raison de l’opération de tri de gauche à droite.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onColumnSorted
    fullName: onColumnSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onColumnSorted: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onColumnSorted~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding column handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a column has been moved as the result of a sort action.
              sheet.onColumnSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Column sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onDeactivated:member'
    summary: "Se produit lorsque la feuille de calcul est désactivée.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onDeactivated
    fullName: onDeactivated
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onDeactivated~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onDeactivated.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The deactivated worksheet is: " + event.worksheetId);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onFormatChanged:member'
    summary: "Se produit lorsque le filtre est modifié sur un tableau spécifique.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onFormatChanged
    fullName: onFormatChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onFormatChanged: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onFormatChanged~0:complex'
  - uid: 'excel!Excel.Worksheet#onRowSorted:member'
    summary: "Se produit lorsqu’une ou plusieurs lignes ont été triées. Cela se produit en raison d’une opération de tri de haut en bas.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onRowSorted
    fullName: onRowSorted
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onRowSorted: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onRowSorted~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              console.log("Adding row handler");
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This will fire whenever a row has been moved as the result of a sort action.
              sheet.onRowSorted.add((event) => {
                  return Excel.run((context) => {
                      console.log("Row sorted: " + event.address);
                      const sheet = context.workbook.worksheets.getActiveWorksheet();

                      // Clear formatting for section, then highlight the sorted area.
                      sheet.getRange("A1:E5").format.fill.clear();
                      if (event.address !== "") {
                          sheet.getRanges(event.address).format.fill.color = "yellow";
                      }

                      return context.sync();
                  });
              });
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSelectionChanged:member'
    summary: "Se produit lorsque la sélection change dans une feuille de calcul spécifique.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onSelectionChanged
    fullName: onSelectionChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSelectionChanged: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function (context) {
              var sheet = context.workbook.worksheets.getItem("Sample");
              sheet.onSelectionChanged.add(function (event) {
                  return Excel.run(function (context) {
                      console.log("The selected range has changed to: " + event.address);
                      return context.sync();
                  });
              });
              return context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#onSingleClicked:member'
    summary: "Se produit lorsqu’une action de l’utilisateur clique sur la feuille de calcul. Cet événement ne sera pas déclenché lorsque vous cliquerez dans les cas suivants\_:\n\n- L’utilisateur fait glisser la souris pour sélectionner plusieurs sélections.\n\n- L’utilisateur sélectionne une cellule dans le mode lorsque les arguments de la cellule sont sélectionnés pour les références de formule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: onSingleClicked
    fullName: onSingleClicked
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onSingleClicked: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>;'
      return:
        type:
          - 'excel!Excel.Worksheet#onSingleClicked~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.onSingleClicked.add((event) => {
                  return Excel.run((context) => {
                      console.log(`Click detected at ${event.address} (pixel offset from upper-left cell corner: ${event.offsetX}, ${event.offsetY})`);
                      return context.sync();
                  });
              });

              console.log("The worksheet click handler is registered.");

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: "Obtient l’objet PageLayout de la feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: Excel.PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:class'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: "Collection de tableaux croisés dynamiques qui font partie de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: Excel.PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:class'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: "Position de la feuille de calcul au sein du classeur (sur une base zéro).\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          // Set worksheet position. 
          Excel.run(function (ctx) { 
              var wSheetName = 'Sheet1';
              var worksheet = ctx.workbook.worksheets.getItem(wSheetName);
              worksheet.position = 2;
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: "Renvoie un objet de protection de feuille pour une feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: Excel.WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Excel.run(function(ctx) {
            // get a reference to Sheet1
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");

            // Protect inserting or deleting rows in Sheet1
            sheet.protection.protect({
              allowInsertRows: false,
              allowDeleteRows: false
            });

            return ctx.sync();
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Unprotecting a worksheet with unprotect() will remove all 
          // WorksheetProtectionOptions options applied to a worksheet.
          // To remove only a subset of WorksheetProtectionOptions use the 
          // protect() method and set the options you wish to remove to true.
          Excel.run(function(ctx) {
            var sheet = ctx.workbook.worksheets.getItem("Sheet1");
            sheet.protection.protect({
              allowInsertRows: false, // Protect row insertion
              allowDeleteRows: true // Unprotect row deletion
            });
          });
          ```
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: "Détecte et remplace la chaîne donnée basée sur les critères spécifiés dans la plage active.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: Nombre de remplacements effectués.
      parameters:
        - id: text
          description: Chaîne à rechercher.
          type:
            - string
        - id: replacement
          description: Chaîne de remplacement de l’original par.
          type:
            - string
        - id: criteria
          description: Critères de remplacement supplémentaires.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#set:member(1)'
    summary: 'Définit plusieurs propriétés d’un objet en même temps. Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.'
    remarks: "Cette méthode est dotée de la signature supplémentaire suivante\_:\n\n`set(properties: Excel.Worksheet): void`"
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.WorksheetUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l’objet sur lequel la méthode est appelée.
          type:
            - 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
        - id: options
          description: Fournit une option permettant de supprimer les erreurs si l’objet Properties tente de définir des propriétés en lecture seule.
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Worksheet#set:member(2)'
    summary: 'Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Worksheet): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Worksheet:class'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: "Renvoie une collection de tous les objets Forme sur la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: Excel.ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:class'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: "Obtient ou définit l’indicateur de quadrillage de la feuille de calcul. Cet indicateur détermine si le quadrillage est visible par l’utilisateur.\n\n\\[[Ensemble d’API\_: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: "Obtient ou définit l’indicateur d’en-tête de la feuille de calcul. Cet indicateur détermine si les en-têtes sont visibles par l’utilisateur.\n\n\\[[Ensemble d’API\_: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: "Affiche les groupes de lignes ou de colonnes en fonction de leurs niveaux hiérarchiques. Contourne le groupe et résume une liste de données dans la feuille de calcul. Les `rowLevels` paramètres `columnLevels` et spécifient le nombre de niveaux du plan qui seront affichés. La plage d’arguments acceptable est comprise entre 0 et 8. La valeur 0 ne change pas l’affichage actuel. Une valeur supérieure au nombre actuel de niveaux affiche tous les niveaux.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This collapses the entire outline.
              sheet.showOutlineLevels(1, 1);
              await context.sync();
          });
          ```
          ```typescript
          Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // This shows the top 3 outline levels; collapsing any additional sublevels.
              sheet.showOutlineLevels(3, 3);
              await context.sync();
          });
          ```
      parameters:
        - id: rowLevels
          description: Nombre de niveaux de ligne d’un plan à afficher.
          type:
            - number
        - id: columnLevels
          description: Nombre de niveaux de colonne d’un plan à afficher.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: "Renvoie une collection de segments qui font partie de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,10](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: Excel.SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:class'
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Pivot");
              const slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: "Renvoie la hauteur standard (par défaut) de toutes les lignes dans la feuille de calcul, en points. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: "Renvoie ou définit la largeur standard (par défaut) de toutes les colonnes dans la feuille de calcul. Une unité de largeur de colonne est égale à la largeur d'un caractère du style Normal. Dans le cas des polices proportionnelles, la largeur du caractère 0 (zéro) est utilisée.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: "Obtient ou modifie la couleur d’onglet de la feuille de calcul. Lors de l’extraction de la couleur d’onglet, si la feuille de calcul est invisible, la valeur est null. Si la feuille de calcul est visible mais que la couleur d’onglet est définie sur auto, une chaîne vide est renvoyée. Dans le cas contraire, la propriété est définie sur une couleur, au format\\#«\_123456\_» lors de la définition de la couleur, utilisez une chaîne vide pour définir une couleur «\_automatique\_» ou une autre couleur réelle.\n\n\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```typescript
          await Excel.run(async (context) => {
              const activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: "Collection de tableaux qui font partie de la feuille de calcul. En lecture seule.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
  - uid: 'excel!Excel.Worksheet#toJSON:member(1)'
    summary: 'Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. Worksheet d’origine est un objet `toJSON` API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.WorksheetData`<!-- -->) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetData;'
      return:
        type:
          - 'excel!Excel.Interfaces.WorksheetData:interface'
        description: ''
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: "Obtient la collection de saut de page vertical pour la feuille de calcul. Cette collection contient uniquement les sauts de page manuels.\n\n\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]"
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: Excel.PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:class'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: "Visibilité de la feuille de calcul.\n\n\\[[Ensemble d’API\_: ExcelApi 1,1 pour la lecture de la visibilité\_; 1,2 pour le définir.](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]"
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.AutoFilter:class'
    name: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:class'
    name: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:class'
    name: Excel.CommentCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet
  - uid: 'excel!Excel.WorksheetPositionType:enum'
    name: Excel.WorksheetPositionType
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:class'
    name: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:class'
    name: Excel.PageBreakCollection
  - uid: 'excel!Excel.Interfaces.WorksheetLoadOptions:interface'
    name: Excel.Interfaces.WorksheetLoadOptions
  - uid: 'excel!Excel.NamedItemCollection:class'
    name: Excel.NamedItemCollection
  - uid: 'excel!Excel.Worksheet#onActivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetActivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetActivatedEventArgs:interface'
        name: Excel.WorksheetActivatedEventArgs
        fullName: Excel.WorksheetActivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onCalculated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetCalculatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetCalculatedEventArgs:interface'
        name: Excel.WorksheetCalculatedEventArgs
        fullName: Excel.WorksheetCalculatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetChangedEventArgs:interface'
        name: Excel.WorksheetChangedEventArgs
        fullName: Excel.WorksheetChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onColumnSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetColumnSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetColumnSortedEventArgs:interface'
        name: Excel.WorksheetColumnSortedEventArgs
        fullName: Excel.WorksheetColumnSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onDeactivated~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetDeactivatedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetDeactivatedEventArgs:interface'
        name: Excel.WorksheetDeactivatedEventArgs
        fullName: Excel.WorksheetDeactivatedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onFormatChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetFormatChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetFormatChangedEventArgs:interface'
        name: Excel.WorksheetFormatChangedEventArgs
        fullName: Excel.WorksheetFormatChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onRowSorted~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetRowSortedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetRowSortedEventArgs:interface'
        name: Excel.WorksheetRowSortedEventArgs
        fullName: Excel.WorksheetRowSortedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSelectionChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSelectionChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSelectionChangedEventArgs:interface'
        name: Excel.WorksheetSelectionChangedEventArgs
        fullName: Excel.WorksheetSelectionChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Worksheet#onSingleClicked~0:complex'
    name: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.WorksheetSingleClickedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.WorksheetSingleClickedEventArgs:interface'
        name: Excel.WorksheetSingleClickedEventArgs
        fullName: Excel.WorksheetSingleClickedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.PageLayout:class'
    name: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:class'
    name: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:class'
    name: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.WorksheetUpdateData:interface'
    name: Interfaces.WorksheetUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.ShapeCollection:class'
    name: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:class'
    name: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.Interfaces.WorksheetData:interface'
    name: Excel.Interfaces.WorksheetData
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: Excel.SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'