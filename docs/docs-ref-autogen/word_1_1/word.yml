### YamlMime:TSPackage
uid: word!
name: word
type: package
summary: ''
enums:
- word!Word.Alignment:enum
- word!Word.BodyType:enum
- word!Word.BorderLocation:enum
- word!Word.BorderType:enum
- word!Word.BreakType:enum
- word!Word.CellPaddingLocation:enum
- word!Word.ContentControlAppearance:enum
- word!Word.ContentControlType:enum
- word!Word.DocumentPropertyType:enum
- word!Word.ErrorCodes:enum
- word!Word.EventType:enum
- word!Word.FileContentFormat:enum
- word!Word.HeaderFooterType:enum
- word!Word.ImageFormat:enum
- word!Word.InsertLocation:enum
- word!Word.ListBullet:enum
- word!Word.ListLevelType:enum
- word!Word.ListNumbering:enum
- word!Word.LocationRelation:enum
- word!Word.RangeLocation:enum
- word!Word.SelectionMode:enum
- word!Word.Style:enum
- word!Word.TapObjectType:enum
- word!Word.UnderlineType:enum
- word!Word.VerticalAlignment:enum
classes:
- word!Word.Body:class
- word!Word.ContentControl:class
- word!Word.ContentControlCollection:class
- word!Word.Document:class
- word!Word.Font:class
- word!Word.InlinePicture:class
- word!Word.InlinePictureCollection:class
- word!Word.Paragraph:class
- word!Word.ParagraphCollection:class
- word!Word.Range:class
- word!Word.RangeCollection:class
- word!Word.RequestContext:class
- word!Word.SearchOptions:class
- word!Word.Section:class
- word!Word.SectionCollection:class
interfaces:
- word!Word.Interfaces.BodyData:interface
- word!Word.Interfaces.BodyLoadOptions:interface
- word!Word.Interfaces.BodyUpdateData:interface
- word!Word.Interfaces.CollectionLoadOptions:interface
- word!Word.Interfaces.ContentControlCollectionData:interface
- word!Word.Interfaces.ContentControlCollectionLoadOptions:interface
- word!Word.Interfaces.ContentControlCollectionUpdateData:interface
- word!Word.Interfaces.ContentControlData:interface
- word!Word.Interfaces.ContentControlLoadOptions:interface
- word!Word.Interfaces.ContentControlUpdateData:interface
- word!Word.Interfaces.CustomPropertyCollectionData:interface
- word!Word.Interfaces.CustomPropertyCollectionUpdateData:interface
- word!Word.Interfaces.CustomPropertyData:interface
- word!Word.Interfaces.CustomPropertyUpdateData:interface
- word!Word.Interfaces.DocumentCreatedData:interface
- word!Word.Interfaces.DocumentCreatedUpdateData:interface
- word!Word.Interfaces.DocumentData:interface
- word!Word.Interfaces.DocumentLoadOptions:interface
- word!Word.Interfaces.DocumentPropertiesData:interface
- word!Word.Interfaces.DocumentPropertiesUpdateData:interface
- word!Word.Interfaces.DocumentUpdateData:interface
- word!Word.Interfaces.FontData:interface
- word!Word.Interfaces.FontLoadOptions:interface
- word!Word.Interfaces.FontUpdateData:interface
- word!Word.Interfaces.InlinePictureCollectionData:interface
- word!Word.Interfaces.InlinePictureCollectionLoadOptions:interface
- word!Word.Interfaces.InlinePictureCollectionUpdateData:interface
- word!Word.Interfaces.InlinePictureData:interface
- word!Word.Interfaces.InlinePictureLoadOptions:interface
- word!Word.Interfaces.InlinePictureUpdateData:interface
- word!Word.Interfaces.ListCollectionData:interface
- word!Word.Interfaces.ListCollectionUpdateData:interface
- word!Word.Interfaces.ListData:interface
- word!Word.Interfaces.ListItemData:interface
- word!Word.Interfaces.ListItemUpdateData:interface
- word!Word.Interfaces.ParagraphCollectionData:interface
- word!Word.Interfaces.ParagraphCollectionLoadOptions:interface
- word!Word.Interfaces.ParagraphCollectionUpdateData:interface
- word!Word.Interfaces.ParagraphData:interface
- word!Word.Interfaces.ParagraphLoadOptions:interface
- word!Word.Interfaces.ParagraphUpdateData:interface
- word!Word.Interfaces.RangeCollectionData:interface
- word!Word.Interfaces.RangeCollectionLoadOptions:interface
- word!Word.Interfaces.RangeCollectionUpdateData:interface
- word!Word.Interfaces.RangeData:interface
- word!Word.Interfaces.RangeLoadOptions:interface
- word!Word.Interfaces.RangeUpdateData:interface
- word!Word.Interfaces.SearchOptionsData:interface
- word!Word.Interfaces.SearchOptionsLoadOptions:interface
- word!Word.Interfaces.SearchOptionsUpdateData:interface
- word!Word.Interfaces.SectionCollectionData:interface
- word!Word.Interfaces.SectionCollectionLoadOptions:interface
- word!Word.Interfaces.SectionCollectionUpdateData:interface
- word!Word.Interfaces.SectionData:interface
- word!Word.Interfaces.SectionLoadOptions:interface
- word!Word.Interfaces.SectionUpdateData:interface
- word!Word.Interfaces.TableBorderData:interface
- word!Word.Interfaces.TableBorderUpdateData:interface
- word!Word.Interfaces.TableCellCollectionData:interface
- word!Word.Interfaces.TableCellCollectionUpdateData:interface
- word!Word.Interfaces.TableCellData:interface
- word!Word.Interfaces.TableCellUpdateData:interface
- word!Word.Interfaces.TableCollectionData:interface
- word!Word.Interfaces.TableCollectionUpdateData:interface
- word!Word.Interfaces.TableData:interface
- word!Word.Interfaces.TableRowCollectionData:interface
- word!Word.Interfaces.TableRowCollectionUpdateData:interface
- word!Word.Interfaces.TableRowData:interface
- word!Word.Interfaces.TableRowUpdateData:interface
- word!Word.Interfaces.TableUpdateData:interface
functions:
- name: Word.run(objects, batch)
  uid: word!Word.run:function(1)
  package: word!
  summary: Exécute un script de commandes qui effectue des actions sur le modèle objet Word, à l’aide de RequestContext des objets d’API créés précédemment.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Tableau d’objets d’API créés précédemment. Le tableau est validé afin de s’assurer que tous les objets partagent le même contexte. Le lot utilisera RequestContext partagé, ce qui signifie que les modifications apportées à ces objets seront récupérées par « Context. Sync () ».
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application Word. Étant donné que le complément Office et l’application Word s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet Word à partir du complément.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Word.run(object, batch)
  uid: word!Word.run:function(2)
  package: word!
  summary: Exécute un script de traitement par lots qui effectue des actions sur le modèle objet Word, à l’aide de RequestContext d’un objet API créé précédemment. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Objet API créé précédemment. Le lot utilise le même RequestContext que l’objet transmis, ce qui signifie que toute modification apportée à l’objet est sélectionnée par « Context. Sync () ».
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application Word. Étant donné que le complément Office et l’application Word s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet Word à partir du complément.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: Word.run(batch)
  uid: word!Word.run:function(3)
  package: word!
  summary: Exécute un script de commandes qui effectue des actions sur le modèle objet Word, à l’aide d’un nouveau RequestContext. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.
  remarks: >-
    En plus de cette signature, la méthode comporte également les signatures suivantes, qui vous permettent de reprendre à l’aide du contexte de requête des objets créés précédemment :


    exécuter <T> (objet : objet officeextension. clientObject, batch : (Context : Word. RequestContext) =<!-- -->&gt; Promesse <T> ) : promise <T> ;


    exécuter <T> (objets : objet officeextension. clientObject \[ \] , batch : (Context : Word. RequestContext) =<!-- -->&gt; Promesse <T> ) : promise <T> ;
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: Word.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application Word. Étant donné que le complément Office et l’application Word s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet Word à partir du complément.
      type: '(context: <xref uid="word!Word.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: c02c3844f164e7c7ce70a14f23d9eb8e20672b01
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49249000"
