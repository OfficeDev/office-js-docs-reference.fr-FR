### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Recipients:interface'
    summary: "Représente les destinataires d’un élément. Mode composition uniquement.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition
    name: Office.Recipients
    fullName: Office.Recipients
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Recipients#addAsync:member(1)'
      - 'outlook!Office.Recipients#addAsync:member(2)'
      - 'outlook!Office.Recipients#getAsync:member(1)'
      - 'outlook!Office.Recipients#getAsync:member(2)'
      - 'outlook!Office.Recipients#setAsync:member(1)'
      - 'outlook!Office.Recipients#setAsync:member(2)'
  - uid: 'outlook!Office.Recipients#addAsync:member(1)'
    summary: "Ajoute une liste de destinataires aux destinataires existants d’un rendez-vous ou d’un message.\n\nLe paramètre Recipients peut être un tableau d’un des éléments suivants\_:\n\n- Chaînes contenant des adresses de messagerie SMTP\n\n- Objets [EmailUser](xref:outlook!Office.EmailUser:interface)\n\n- Objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition

      **Erreurs**:

      - `NumberOfRecipientsExceeded`<!-- -->: Le nombre de destinataires est supérieur à 100 entrées.
    name: 'addAsync(recipients, options, callback)'
    fullName: 'addAsync(recipients, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinataires à ajouter à la liste des destinataires.
          type:
            - 'outlook!Office.Recipients#addAsync~0:complex'
        - id: options
          description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. En cas d’échec de l’ajout des destinataires, la propriété `asyncResult.error` contient un code d’erreur.'
          type:
            - 'outlook!Office.Recipients#addAsync~1:complex'
  - uid: 'outlook!Office.Recipients#addAsync:member(2)'
    summary: "Ajoute une liste de destinataires aux destinataires existants d’un rendez-vous ou d’un message.\n\nLe paramètre Recipients peut être un tableau d’un des éléments suivants\_:\n\n- Chaînes contenant des adresses de messagerie SMTP\n\n- Objets [EmailUser](xref:outlook!Office.EmailUser:interface)\n\n- Objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition

      **Erreurs**:

      - `NumberOfRecipientsExceeded`<!-- -->: Le nombre de destinataires est supérieur à 100 entrées.

      #### <a name="examples"></a>Exemples

      ```javascript
      // The following example creates an array of EmailUser objects
      // and adds them to the To recipients of the message.
      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];

      Office.context.mailbox.item.to.addAsync(newRecipients, function(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Recipients added");
          }
      });
      ```
    name: 'addAsync(recipients, callback)'
    fullName: 'addAsync(recipients, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addAsync(recipients: (string | EmailUser | EmailAddressDetails)[], callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinataires à ajouter à la liste des destinataires.
          type:
            - 'outlook!Office.Recipients#addAsync~2:complex'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. En cas d’échec de l’ajout des destinataires, la propriété `asyncResult.error` contient un code d’erreur.'
          type:
            - 'outlook!Office.Recipients#addAsync~3:complex'
  - uid: 'outlook!Office.Recipients#getAsync:member(1)'
    summary: "Obtient une liste de destinataires pour un rendez-vous ou un message.\n\nUne fois l’appel terminé, la `asyncResult.value` propriété contient un tableau d’objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) .\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition
    name: 'getAsync(options, callback)'
    fullName: 'getAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. La `value` propriété du résultat est un tableau d'' `EmailAddressDetails` objets.'
          type:
            - 'outlook!Office.Recipients#getAsync~0:complex'
  - uid: 'outlook!Office.Recipients#getAsync:member(2)'
    summary: "Obtient une liste de destinataires pour un rendez-vous ou un message.\n\nUne fois l’appel terminé, la `asyncResult.value` propriété contient un tableau d’objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) .\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml
      Office.context.mailbox.item.bcc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgBcc = asyncResult.value;
          console.log("Message being blind-copied to:");
          for (var i = 0; i < msgBcc.length; i++) {
            console.log(msgBcc[i].displayName + " (" + msgBcc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml
      Office.context.mailbox.item.cc.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgCc = asyncResult.value;
          console.log("Message being copied to:");
          for (var i = 0; i < msgCc.length; i++) {
            console.log(msgCc[i].displayName + " (" + msgCc[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.optionalAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptOptionalAttendees = asyncResult.value;
          for (var i = 0; i < apptOptionalAttendees.length; i++) {
            console.log(
              "Optional attendees: " +
                apptOptionalAttendees[i].displayName +
                " (" +
                apptOptionalAttendees[i].emailAddress +
                ") - response: " +
                apptOptionalAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      Office.context.mailbox.item.requiredAttendees.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var apptRequiredAttendees = asyncResult.value;
          for (var i = 0; i < apptRequiredAttendees.length; i++) {
            console.log(
              "Required attendees: " +
                apptRequiredAttendees[i].displayName +
                " (" +
                apptRequiredAttendees[i].emailAddress +
                ") - response: " +
                apptRequiredAttendees[i].appointmentResponse
            );
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml
      Office.context.mailbox.item.to.getAsync(function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          var msgTo = asyncResult.value;
          console.log("Message being sent to:");
          for (var i = 0; i < msgTo.length; i++) {
            console.log(msgTo[i].displayName + " (" + msgTo[i].emailAddress + ")");
          }
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: getAsync(callback)
    fullName: getAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAsync(callback: (asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. La `value` propriété du résultat est un tableau d'' `EmailAddressDetails` objets.'
          type:
            - 'outlook!Office.Recipients#getAsync~1:complex'
  - uid: 'outlook!Office.Recipients#setAsync:member(1)'
    summary: "Définit une liste de destinataires pour un rendez-vous ou un message.\n\nLa méthode `setAsync` remplace la liste des destinataires active.\n\nLe paramètre Recipients peut être un tableau d’un des éléments suivants\_:\n\n- Chaînes contenant des adresses de messagerie SMTP\n\n- Objets [EmailUser](xref:outlook!Office.EmailUser:interface)\n\n- Objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition

      **Erreurs**:

      - `NumberOfRecipientsExceeded`<!-- -->: Le nombre de destinataires est supérieur à 100 entrées.
    name: 'setAsync(recipients, options, callback)'
    fullName: 'setAsync(recipients, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(recipients: (string | EmailUser | EmailAddressDetails)[], options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinataires à ajouter à la liste des destinataires.
          type:
            - 'outlook!Office.Recipients#setAsync~0:complex'
        - id: options
          description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: Les développeurs peuvent fournir n’importe quel objet auquel ils souhaitent accéder dans la méthode de rappel.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. En cas d’échec de la définition des destinataires, la propriété `asyncResult.error` contient un code indiquant toute erreur survenue lors de l’ajout des données.'
          type:
            - 'outlook!Office.Recipients#setAsync~1:complex'
  - uid: 'outlook!Office.Recipients#setAsync:member(2)'
    summary: "Définit une liste de destinataires pour un rendez-vous ou un message.\n\nLa méthode `setAsync` remplace la liste des destinataires active.\n\nLe paramètre Recipients peut être un tableau d’un des éléments suivants\_:\n\n- Chaînes contenant des adresses de messagerie SMTP\n\n- Objets [EmailUser](xref:outlook!Office.EmailUser:interface)\n\n- Objets [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface)\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition

      **Erreurs**:

      - `NumberOfRecipientsExceeded`<!-- -->: Le nombre de destinataires est supérieur à 100 entrées.

      #### <a name="examples"></a>Exemples

      ```javascript
      // The following example creates an array of EmailUser objects and
      // replaces the CC recipients of the message with the array.
      var newRecipients = [
          {
              "displayName": "Allie Bellew",
              "emailAddress": "allieb@contoso.com"
          },
          {
              "displayName": "Alex Darrow",
              "emailAddress": "alexd@contoso.com"
          }
      ];

      Office.context.mailbox.item.cc.setAsync(newRecipients, function(result) {
          if (result.error) {
              console.log(result.error);
          } else {
              console.log("Recipients overwritten");
          }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-bcc-message-compose.yaml
      var email = $("#emailBcc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.bcc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Bcc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-cc-message-compose.yaml
      var email = $("#emailCc")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.cc.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting Cc field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-optional-attendees-appointment-organizer.yaml
      var email = $("#emailOptional")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.optionalAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting optional attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-required-attendees-appointment-organizer.yaml
      var email = $("#emailRequired")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.requiredAttendees.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting required attendees field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/30-recipients-and-attendees/get-set-to-message-compose.yaml
      var email = $("#emailTo")
        .val()
        .toString();
      var emailArray = [email];
      Office.context.mailbox.item.to.setAsync(emailArray, function(asyncResult) {
        if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {
          console.log("Succeeded in setting To field.");
        } else {
          console.error(asyncResult.error);
        }
      });
      ```
    name: 'setAsync(recipients, callback)'
    fullName: 'setAsync(recipients, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setAsync(recipients: (string | EmailUser | EmailAddressDetails)[], callback: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: recipients
          description: Destinataires à ajouter à la liste des destinataires.
          type:
            - 'outlook!Office.Recipients#setAsync~2:complex'
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. En cas d’échec de la définition des destinataires, la propriété `asyncResult.error` contient un code indiquant toute erreur survenue lors de l’ajout des données.'
          type:
            - 'outlook!Office.Recipients#setAsync~3:complex'
references:
  - uid: 'outlook!Office.Recipients#addAsync~0:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Recipients#addAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#addAsync~2:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#addAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#getAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.EmailAddressDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.Recipients#getAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<EmailAddressDetails[]>) => void'
    fullName: '(asyncResult: Office.AsyncResult<Office.EmailAddressDetails[]>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'outlook!Office.Recipients#setAsync~0:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#setAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Recipients#setAsync~2:complex'
    name: '(string | EmailUser | EmailAddressDetails)[]'
    fullName: '(string | Office.EmailUser | Office.EmailAddressDetails)[]'
    spec.typeScript:
      - name: '(string | '
        fullName: '(string | '
      - uid: 'outlook!Office.EmailUser:interface'
        name: EmailUser
        fullName: Office.EmailUser
      - name: ' | '
        fullName: ' | '
      - uid: 'outlook!Office.EmailAddressDetails:interface'
        name: EmailAddressDetails
        fullName: Office.EmailAddressDetails
      - name: ')[]'
        fullName: ')[]'
  - uid: 'outlook!Office.Recipients#setAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void