### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    summary: "<span data-ttu-id=\"e5977-101\">Représente un critère IconSet pour la mise en forme conditionnelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-101\">Represents an IconSet criteria for conditional formatting.</span></span>\n\n<span data-ttu-id=\"e5977-102\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-102\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.IconSetConditionalFormat
    fullName: Excel.IconSetConditionalFormat
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.IconSetConditionalFormat#context:member'
      - 'excel!Excel.IconSetConditionalFormat#criteria:member'
      - 'excel!Excel.IconSetConditionalFormat#load:member(1)'
      - 'excel!Excel.IconSetConditionalFormat#load:member(2)'
      - 'excel!Excel.IconSetConditionalFormat#load:member(3)'
      - 'excel!Excel.IconSetConditionalFormat#reverseIconOrder:member'
      - 'excel!Excel.IconSetConditionalFormat#set:member(1)'
      - 'excel!Excel.IconSetConditionalFormat#set:member(2)'
      - 'excel!Excel.IconSetConditionalFormat#showIconOnly:member'
      - 'excel!Excel.IconSetConditionalFormat#style:member'
      - 'excel!Excel.IconSetConditionalFormat#toJSON:member(1)'
  - uid: 'excel!Excel.IconSetConditionalFormat#context:member'
    summary: <span data-ttu-id="e5977-103">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="e5977-103">The request context associated with the object.</span></span> <span data-ttu-id="e5977-104">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="e5977-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.IconSetConditionalFormat#criteria:member'
    summary: "<span data-ttu-id=\"e5977-105\">Un tableau de critères et de IconSets pour les règles et les icônes personnalisées potentielles pour les icônes conditionnelles.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-105\">An array of Criteria and IconSets for the rules and potential custom icons for conditional icons.</span></span> <span data-ttu-id=\"e5977-106\">Notez que pour le premier critère, seule l’icône personnalisée peut être modifiée, tandis que le type, la formule et l’opérateur seront ignorés lors de la définition.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-106\">Note that for the first criterion only the custom icon can be modified, while type, formula, and operator will be ignored when set.</span></span>\n\n<span data-ttu-id=\"e5977-107\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-107\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: criteria
    fullName: criteria
    langs:
      - typeScript
    type: property
    syntax:
      content: 'criteria: Excel.ConditionalIconCriterion[];'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat#criteria~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e5977-108">Exemples</span><span class="sxs-lookup"><span data-stu-id="e5977-108">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.IconSetConditionalFormat#load:member(1)'
    summary: <span data-ttu-id="e5977-109">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="e5977-109">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e5977-110">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="e5977-110">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.IconSetConditionalFormatLoadOptions): Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="e5977-111">Fournit des options pour les propriétés de l’objet à charger.</span><span class="sxs-lookup"><span data-stu-id="e5977-111">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.Interfaces.IconSetConditionalFormatLoadOptions:interface'
  - uid: 'excel!Excel.IconSetConditionalFormat#load:member(2)'
    summary: <span data-ttu-id="e5977-112">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="e5977-112">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e5977-113">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="e5977-113">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="e5977-114">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="e5977-114">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.IconSetConditionalFormat#load:member(3)'
    summary: <span data-ttu-id="e5977-115">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="e5977-115">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="e5977-116">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="e5977-116">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.IconSetConditionalFormat;
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="e5977-117">`propertyNamesAndPaths.select`est une chaîne délimitée par des virgules qui spécifie les propriétés à `propertyNamesAndPaths.expand` charger et une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="e5977-117">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.IconSetConditionalFormat#reverseIconOrder:member'
    summary: "<span data-ttu-id=\"e5977-118\">Si la valeur est true, inverse l’ordre des icônes pour la IconSet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-118\">If true, reverses the icon orders for the IconSet.</span></span> <span data-ttu-id=\"e5977-119\">Notez que cette valeur ne peut pas être définie si des icônes personnalisées sont utilisées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-119\">Note that this cannot be set if custom icons are used.</span></span>\n\n<span data-ttu-id=\"e5977-120\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-120\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: reverseIconOrder
    fullName: reverseIconOrder
    langs:
      - typeScript
    type: property
    syntax:
      content: 'reverseIconOrder: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.IconSetConditionalFormat#set:member(1)'
    summary: '<span data-ttu-id="e5977-121">Définit plusieurs propriétés d’un objet en même temps.</span><span class="sxs-lookup"><span data-stu-id="e5977-121">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="e5977-122">Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.</span><span class="sxs-lookup"><span data-stu-id="e5977-122">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: "<span data-ttu-id=\"e5977-123\">Cette méthode est dotée de la signature supplémentaire suivante\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-123\">This method has the following additional signature:</span></span>\n\n`set(properties: Excel.IconSetConditionalFormat): void`"
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.IconSetConditionalFormatUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="e5977-124">Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l’objet sur lequel la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="e5977-124">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.IconSetConditionalFormatUpdateData:interface'
        - id: options
          description: <span data-ttu-id="e5977-125">Fournit une option permettant de supprimer les erreurs si l’objet Properties tente de définir des propriétés en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="e5977-125">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.IconSetConditionalFormat#set:member(2)'
    summary: '<span data-ttu-id="e5977-126">Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.</span><span class="sxs-lookup"><span data-stu-id="e5977-126">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.IconSetConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.IconSetConditionalFormat:class'
  - uid: 'excel!Excel.IconSetConditionalFormat#showIconOnly:member'
    summary: "<span data-ttu-id=\"e5977-127\">Si la valeur est True, masque les valeurs et affiche uniquement les icônes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-127\">If true, hides the values and only shows icons.</span></span>\n\n<span data-ttu-id=\"e5977-128\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-128\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: showIconOnly
    fullName: showIconOnly
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showIconOnly: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.IconSetConditionalFormat#style:member'
    summary: "<span data-ttu-id=\"e5977-129\">Si ce paramètre est défini, il affiche l’option IconSet pour le format conditionnel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-129\">If set, displays the IconSet option for the conditional format.</span></span>\n\n<span data-ttu-id=\"e5977-130\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"e5977-130\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon";'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat#style~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="e5977-131">Exemples</span><span class="sxs-lookup"><span data-stu-id="e5977-131">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B8:E13");
              const conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              const iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.IconSetConditionalFormat#toJSON:member(1)'
    summary: '<span data-ttu-id="e5977-132">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="e5977-132">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="e5977-133">.</span><span class="sxs-lookup"><span data-stu-id="e5977-133"></span></span> <span data-ttu-id="e5977-134">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="e5977-134"></span></span><!-- --><span data-ttu-id="e5977-135">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. IconSetConditionalFormat d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.IconSetConditionalFormatData`</span><span class="sxs-lookup"><span data-stu-id="e5977-135">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.IconSetConditionalFormat object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.IconSetConditionalFormatData`</span></span><!-- --><span data-ttu-id="e5977-136">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="e5977-136">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.IconSetConditionalFormatData;'
      return:
        type:
          - 'excel!Excel.Interfaces.IconSetConditionalFormatData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.IconSetConditionalFormat#criteria~0:complex'
    name: 'Excel.ConditionalIconCriterion[]'
    fullName: 'Excel.ConditionalIconCriterion[]'
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalIconCriterion:interface'
        name: Excel.ConditionalIconCriterion
        fullName: Excel.ConditionalIconCriterion
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    name: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.Interfaces.IconSetConditionalFormatLoadOptions:interface'
    name: Excel.Interfaces.IconSetConditionalFormatLoadOptions
  - uid: 'excel!Excel.Interfaces.IconSetConditionalFormatUpdateData:interface'
    name: Interfaces.IconSetConditionalFormatUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.IconSetConditionalFormat#style~0:complex'
    name: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"
    fullName: Excel.IconSet | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"
    spec.typeScript:
      - uid: 'excel!Excel.IconSet:enum'
        name: Excel.IconSet
        fullName: Excel.IconSet
      - name: ' | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"'
        fullName: ' | "Invalid" | "ThreeArrows" | "ThreeArrowsGray" | "ThreeFlags" | "ThreeTrafficLights1" | "ThreeTrafficLights2" | "ThreeSigns" | "ThreeSymbols" | "ThreeSymbols2" | "FourArrows" | "FourArrowsGray" | "FourRedToBlack" | "FourRating" | "FourTrafficLights" | "FiveArrows" | "FiveArrowsGray" | "FiveRating" | "FiveQuarters" | "ThreeStars" | "ThreeTriangles" | "FiveBoxes" | "LinkedEntityFinanceIcon" | "LinkedEntityMapIcon"'
  - uid: 'excel!Excel.Interfaces.IconSetConditionalFormatData:interface'
    name: Excel.Interfaces.IconSetConditionalFormatData