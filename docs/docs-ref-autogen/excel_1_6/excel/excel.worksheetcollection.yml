### YamlMime:UniversalReference
items:
  - uid: excel.Excel.WorksheetCollection
    summary: |-
      <span data-ttu-id="13ac6-101">Représente une collection d’objets de feuille de calcul qui font partie du classeur.</span><span class="sxs-lookup"><span data-stu-id="13ac6-101">Represents a collection of worksheet objects that are part of the workbook.</span></span>

      <span data-ttu-id="13ac6-102">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.WorksheetCollection
    fullName: Excel.WorksheetCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'OfficeExtension.ClientObject '
    package: excel
    children:
      - excel.Excel.WorksheetCollection.add
      - excel.Excel.WorksheetCollection.context
      - excel.Excel.WorksheetCollection.getActiveWorksheet
      - excel.Excel.WorksheetCollection.getCount
      - excel.Excel.WorksheetCollection.getFirst
      - excel.Excel.WorksheetCollection.getItem
      - excel.Excel.WorksheetCollection.getItemOrNullObject
      - excel.Excel.WorksheetCollection.getLast
      - excel.Excel.WorksheetCollection.items
      - excel.Excel.WorksheetCollection.load
      - excel.Excel.WorksheetCollection.load_1
      - excel.Excel.WorksheetCollection.load_2
      - excel.Excel.WorksheetCollection.toJSON
  - uid: excel.Excel.WorksheetCollection.add
    summary: |-
      <span data-ttu-id="13ac6-p101">Ajoute une nouvelle feuille de calcul au classeur. La feuille de calcul est ajoutée à la fin des feuilles de calcul existantes. Si vous souhaitez activer la feuille de calcul nouvellement ajoutée, appelez la méthode .activate() pour cette feuille.</span><span class="sxs-lookup"><span data-stu-id="13ac6-p101">Adds a new worksheet to the workbook. The worksheet will be added at the end of existing worksheets. If you wish to activate the newly added worksheet, call ".activate() on it.</span></span>

      <span data-ttu-id="13ac6-106">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: add(name)
    fullName: add(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(name?: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="13ac6-107">Exemples</span><span class="sxs-lookup"><span data-stu-id="13ac6-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var wSheetName = 'Sample Name';
              var worksheet = ctx.workbook.worksheets.add(wSheetName);
              worksheet.load('name');
              return ctx.sync().then(function() {
                  console.log(worksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: name
          description: '<span data-ttu-id="13ac6-p102">Facultatif. Nom de la feuille de calcul à ajouter. Si cette propriété est définie, le nom doit être unique. Si cette propriété n’est pas définie, Excel détermine le nom de la nouvelle feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="13ac6-p102">Optional. The name of the worksheet to be added. If specified, name should be unqiue. If not specified, Excel determines the name of the new worksheet.</span></span>'
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.context
    summary: <span data-ttu-id="13ac6-112">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="13ac6-112">The request context associated with the object.</span></span> <span data-ttu-id="13ac6-113">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="13ac6-113">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - excel.Excel.RequestContext
  - uid: excel.Excel.WorksheetCollection.getActiveWorksheet
    summary: |-
      <span data-ttu-id="13ac6-114">Obtient la feuille de calcul active du classeur.</span><span class="sxs-lookup"><span data-stu-id="13ac6-114">Gets the currently active worksheet in the workbook.</span></span>

      <span data-ttu-id="13ac6-115">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-115">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getActiveWorksheet()
    fullName: getActiveWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getActiveWorksheet(): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="13ac6-116">Exemples</span><span class="sxs-lookup"><span data-stu-id="13ac6-116">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {  
              var activeWorksheet = ctx.workbook.worksheets.getActiveWorksheet();
              activeWorksheet.load('name');
              return ctx.sync().then(function() {
                      console.log(activeWorksheet.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel.Excel.WorksheetCollection.getCount
    summary: |-
      <span data-ttu-id="13ac6-117">Obtient le nombre de feuilles de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="13ac6-117">Gets the number of worksheets in the collection.</span></span>

      <span data-ttu-id="13ac6-118">\[[Ensemble d’API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-118">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getCount(visibleOnly)
    fullName: getCount(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(visibleOnly?: boolean): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - OfficeExtension.ClientResult<number>
        description: ''
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="13ac6-119">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="13ac6-119">Optional.</span></span> <span data-ttu-id="13ac6-120">Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.</span><span class="sxs-lookup"><span data-stu-id="13ac6-120">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getFirst
    summary: |-
      <span data-ttu-id="13ac6-121">Obtient la première feuille de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="13ac6-121">Gets the first worksheet in the collection.</span></span>

      <span data-ttu-id="13ac6-122">\[[Ensemble d’API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-122">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getFirst(visibleOnly)
    fullName: getFirst(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFirst(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="13ac6-123">Exemples</span><span class="sxs-lookup"><span data-stu-id="13ac6-123">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="13ac6-124">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="13ac6-124">Optional.</span></span> <span data-ttu-id="13ac6-125">Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.</span><span class="sxs-lookup"><span data-stu-id="13ac6-125">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.getItem
    summary: |-
      <span data-ttu-id="13ac6-126">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID.</span><span class="sxs-lookup"><span data-stu-id="13ac6-126">Gets a worksheet object using its Name or ID.</span></span>

      <span data-ttu-id="13ac6-127">\[[Ensemble d’API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-127">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="13ac6-128">Nom ou ID de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="13ac6-128">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getItemOrNullObject
    summary: |-
      <span data-ttu-id="13ac6-129">Obtient un objet de feuille de calcul à l’aide de son nom ou de son ID.</span><span class="sxs-lookup"><span data-stu-id="13ac6-129">Gets a worksheet object using its Name or ID.</span></span> <span data-ttu-id="13ac6-130">Si la feuille de calcul n’existe pas, renvoie un objet null.</span><span class="sxs-lookup"><span data-stu-id="13ac6-130">If the worksheet does not exist, will return a null object.</span></span>

      <span data-ttu-id="13ac6-131">\[[Ensemble d’API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-131">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="13ac6-132">Nom ou ID de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="13ac6-132">The Name or ID of the worksheet.</span></span>
          type:
            - string
  - uid: excel.Excel.WorksheetCollection.getLast
    summary: |-
      <span data-ttu-id="13ac6-133">Obtient la dernière feuille de calcul dans la collection.</span><span class="sxs-lookup"><span data-stu-id="13ac6-133">Gets the last worksheet in the collection.</span></span>

      <span data-ttu-id="13ac6-134">\[[Ensemble d’API: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="13ac6-134">\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getLast(visibleOnly)
    fullName: getLast(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLast(visibleOnly?: boolean): Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet
        description: |-


          #### <a name="examples"></a><span data-ttu-id="13ac6-135">Exemples</span><span class="sxs-lookup"><span data-stu-id="13ac6-135">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheets = context.workbook.worksheets;

              // We don't want to include the default worksheet that was created
              // when the workbook was created, so our "firstSheet" will be the one
              // after the literal first. Note chaining of navigation methods.
              const firstSheet = sheets.getFirst().getNext();
              const lastSheet = sheets.getLast();
              const firstTaxRateRange = firstSheet.getRange("B2");
              const lastTaxRateRange = lastSheet.getRange("B2");

              firstSheet.load("name");
              lastSheet.load("name");
              firstTaxRateRange.load("text");
              lastTaxRateRange.load("text");

              await context.sync();

              let firstYear = firstSheet.name.substr(5, 4);
              let lastYear = lastSheet.name.substr(5, 4);
              console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)

              await context.sync();
          });
          ```
      parameters:
        - id: visibleOnly
          description: '<span data-ttu-id="13ac6-136">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="13ac6-136">Optional.</span></span> <span data-ttu-id="13ac6-137">Si la valeur est true, ne prend en compte que les feuilles de calcul visibles, en ignorant celles qui sont masquées.</span><span class="sxs-lookup"><span data-stu-id="13ac6-137">If true, considers only visible worksheets, skipping over any hidden ones.</span></span>'
          type:
            - boolean
  - uid: excel.Excel.WorksheetCollection.items
    summary: <span data-ttu-id="13ac6-138">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="13ac6-138">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Worksheet[];'
      return:
        type:
          - 'Excel.Worksheet[]'
  - uid: excel.Excel.WorksheetCollection.load
    summary: "<span data-ttu-id=\"13ac6-139\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"13ac6-139\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"13ac6-140\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"13ac6-140\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="13ac6-141">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="13ac6-141">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="13ac6-142">`load(option?: string | string[]): Excel.WorksheetCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="13ac6-142">`load(option?: string | string[]): Excel.WorksheetCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="13ac6-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="13ac6-143">`load(option?: { select?: string; expand?: string; }): Excel.WorksheetCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="13ac6-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="13ac6-144">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.WorksheetCollection` - Only available on collection types.</span></span> <span data-ttu-id="13ac6-145">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="13ac6-145">It is similar to the preceding signature.</span></span> <span data-ttu-id="13ac6-146">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="13ac6-146">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="13ac6-147">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="13ac6-147">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="13ac6-148">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="13ac6-148">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - Excel.Interfaces.WorksheetCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
  - uid: excel.Excel.WorksheetCollection.load_1
    summary: <span data-ttu-id="13ac6-149">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="13ac6-149">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="13ac6-150">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="13ac6-150">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: |-


          #### <a name="examples"></a><span data-ttu-id="13ac6-151">Exemples</span><span class="sxs-lookup"><span data-stu-id="13ac6-151">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var worksheets = ctx.workbook.worksheets;
              worksheets.load('items');
              return ctx.sync().then(function() {
                  for (var i = 0; i < worksheets.items.length; i++)
                  {
                      console.log(worksheets.items[i].name);
                      console.log(worksheets.items[i].index);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="13ac6-152">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="13ac6-152">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel.Excel.WorksheetCollection.load_2
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.WorksheetCollection;'
      return:
        type:
          - excel.Excel.WorksheetCollection
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - OfficeExtension.LoadOption
  - uid: excel.Excel.WorksheetCollection.toJSON
    summary: '<span data-ttu-id="13ac6-153">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="13ac6-153">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="13ac6-154">.</span><span class="sxs-lookup"><span data-stu-id="13ac6-154"></span></span> <span data-ttu-id="13ac6-155">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="13ac6-155"></span></span><!-- --><span data-ttu-id="13ac6-156">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.WorksheetCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.WorksheetCollectionData`</span><span class="sxs-lookup"><span data-stu-id="13ac6-156">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.WorksheetCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.WorksheetCollectionData`</span></span><!-- --><span data-ttu-id="13ac6-157">) qui contient un tableau «éléments» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="13ac6-157">) that contains an "items" array with shallow copies of any loaded properties from the collection''s items.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.WorksheetCollectionData;'
      return:
        type:
          - excel.Excel.Interfaces.WorksheetCollectionData
        description: ''