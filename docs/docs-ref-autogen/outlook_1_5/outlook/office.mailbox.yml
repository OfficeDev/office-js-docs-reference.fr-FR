### YamlMime:UniversalReference
items:
  - uid: Outlook.Office.Mailbox
    summary: "Permet d’accéder au modèle d’objet du complément Outlook pour Microsoft\_Outlook et Microsoft\_Outlook\_sur\_le\_web.\n\nEspaces\n\n- diagnostics\_: Fournit des informations de diagnostic à un complément Outlook.\n\n- item\_: Fournit des méthodes et des propriétés pour accéder à un message ou un rendez-vous dans un complément Outlook.\n\n- userProfile\_: Fournit des informations sur l’utilisateur dans un complément Outlook.\n\n\\[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restreint

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: Outlook
    children:
      - Outlook.Office.Mailbox.addHandlerAsync
      - Outlook.Office.Mailbox.addHandlerAsync_1
      - Outlook.Office.Mailbox.convertToEwsId
      - Outlook.Office.Mailbox.convertToLocalClientTime
      - Outlook.Office.Mailbox.convertToRestId
      - Outlook.Office.Mailbox.convertToUtcClientTime
      - Outlook.Office.Mailbox.displayAppointmentForm
      - Outlook.Office.Mailbox.displayMessageForm
      - Outlook.Office.Mailbox.displayNewAppointmentForm
      - Outlook.Office.Mailbox.getCallbackTokenAsync
      - Outlook.Office.Mailbox.getCallbackTokenAsync_1
      - Outlook.Office.Mailbox.getUserIdentityTokenAsync
      - Outlook.Office.Mailbox.makeEwsRequestAsync
      - Outlook.Office.Mailbox.removeHandlerAsync
      - Outlook.Office.Mailbox.removeHandlerAsync_1
      - Outlook.Office.Mailbox.diagnostics
      - Outlook.Office.Mailbox.ewsUrl
      - Outlook.Office.Mailbox.item
      - Outlook.Office.Mailbox.restUrl
      - Outlook.Office.Mailbox.userProfile
  - uid: Outlook.Office.Mailbox.addHandlerAsync
    summary: |-
      ajoute un gestionnaire d’événements pour un événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.

      Actuellement, le seul type d’événement pris en charge est`Office.EventType.ItemChanged`<!-- -->.

      \[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit appeler le gestionnaire.
          type:
            - Office.EventType | string
        - id: handler
          description: 'Fonction qui gère l’événement. Cette fonction doit accepter un seul paramètre, qui est un littéral d’objet. La propriété type sur le paramètre correspond au paramètre eventType transmis à addHandlerAsync.'
          type:
            - '(type: Office.EventType) => void'
        - id: options
          description: 'Facultatif. Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.Mailbox.addHandlerAsync_1
    summary: |-
      ajoute un gestionnaire d’événements pour un événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.

      Actuellement, le seul type d’événement pris en charge est`Office.EventType.ItemChanged`<!-- -->.

      \[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      Office.initialize = function (reason) {
          $(document).ready(function () {
              Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
              if (result.status === Office.AsyncResultStatus.Failed) {
                      // Handle error.
                  }
              });
          });
      };

      function loadNewItem(eventArgs) {
          // Load the properties of the newly selected item.
          loadProps(Office.context.mailbox.item);
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit appeler le gestionnaire.
          type:
            - Office.EventType | string
        - id: handler
          description: 'Fonction qui gère l’événement. Cette fonction doit accepter un seul paramètre, qui est un littéral d’objet. La propriété type sur le paramètre correspond au paramètre eventType transmis à addHandlerAsync.'
          type:
            - '(type: Office.EventType) => void'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.Mailbox.convertToEwsId
    summary: |-
      Convertit un ID d’élément mis en forme pour REST au format EWS.

      Les ID d’élément extraits via une API REST (telle que l’API Courrier Outlook ou Microsoft Graph) utilisent un format différent de celui employé par les services web Exchange (EWS). La méthode convertToEwsId convertit un ID mis en forme REST au format approprié pour EWS.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.

      \[[Ensemble d’API: boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restreint

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Get an item's ID from a REST API.
      var restId = 'AAMkAGVlOTZjNTM3LW...';

      // Treat restId as coming from the v2.0 version of the Outlook Mail API.
      var ewsId = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToEwsId(itemId, restVersion)'
    fullName: 'convertToEwsId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: ID d’élément mis en forme pour les API REST Outlook.
          type:
            - string
        - id: restVersion
          description: Valeur indiquant la version de l’API REST Outlook utilisée pour récupérer l’ID d’élément.
          type:
            - MailboxEnums.RestVersion | string
  - uid: Outlook.Office.Mailbox.convertToLocalClientTime
    summary: |-
      Obtient un dictionnaire contenant les informations d’heure dans l’heure locale du client.

      Les dates et heures utilisées par une application de messagerie pour Outlook sur le Web ou les clients de bureau peuvent utiliser différents fuseaux horaires. Outlook utilise le fuseau horaire de l’ordinateur client; Outlook sur le Web utilise le fuseau horaire défini dans le centre d’administration Exchange. Vous devez gérer les valeurs de date et d’heure afin que les valeurs que vous affichez sur l’interface utilisateur soient toujours cohérentes avec le fuseau horaire attendu par l’utilisateur.

      Si l’application de messagerie est en cours d’exécution dans Outlook sur des clients de bureau, la méthode convertToLocalClientTime renvoie un objet Dictionary dont les valeurs sont définies sur le fuseau horaire de l’ordinateur client. Si l’application de messagerie est en cours d’exécution dans Outlook sur le Web, la méthode convertToLocalClientTime renvoie un objet Dictionary dont les valeurs sont définies sur le fuseau horaire spécifié dans le centre d’administration Exchange.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - Outlook.Office.LocalClientTime
        description: ''
      parameters:
        - id: timeValue
          description: Objet date.
          type:
            - Date
  - uid: Outlook.Office.Mailbox.convertToRestId
    summary: |-
      Convertit un ID d’élément mis en forme pour EWS au format REST.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.

      \[[Ensemble d’API: boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: restreint

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      Les ID d’élément extraits via EWS ou via la propriété itemId utilisent un format différent du format utilisé par les API REST (telles que l' [API de messagerie Outlook](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) ou [Microsoft Graph](https://graph.microsoft.io/)<!-- -->. La méthode convertToRestId convertit un ID au format EWS au format approprié pour REST.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Get the currently selected item's ID.
      var ewsId = Office.context.mailbox.item.itemId;

      // Convert to a REST ID for the v2.0 version of the Outlook Mail API.
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      ```
    name: 'convertToRestId(itemId, restVersion)'
    fullName: 'convertToRestId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: ID d’élément mis en forme pour les services web Exchange (EWS)
          type:
            - string
        - id: restVersion
          description: Valeur indiquant la version de l’API REST Outlook avec laquelle l’ID converti sera utilisé.
          type:
            - MailboxEnums.RestVersion | string
  - uid: Outlook.Office.Mailbox.convertToUtcClientTime
    summary: |-
      Obtient un objet Date à partir d’un dictionnaire contenant des informations d’heure.

      La méthode convertToUtcClientTime convertit un dictionnaire contenant une date et heure locales en objet Date avec les valeurs appropriées pour la date et l’heure locales.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - Date
        description: "Objet Date avec l’heure exprimée au format\_UTC."
      parameters:
        - id: input
          description: Valeur de l’heure locale à convertir.
          type:
            - Outlook.Office.LocalClientTime
  - uid: Outlook.Office.Mailbox.displayAppointmentForm
    summary: |-
      Affiche un rendez-vous de calendrier existant.

      La méthode displayAppointmentForm ouvre un rendez-vous du calendrier existant dans une nouvelle fenêtre du Bureau ou dans une boîte de dialogue sur les appareils mobiles.

      Dans Outlook sur Mac, vous pouvez utiliser cette méthode pour afficher un seul rendez-vous qui ne fait pas partie d’une série périodique ou le rendez-vous principal d’une série périodique, mais vous ne pouvez pas afficher une instance de la série. En effet, dans Outlook sur Mac, vous ne pouvez pas accéder aux propriétés (y compris l’ID d’élément) des instances d’une série périodique.

      Dans Outlook sur le Web, cette méthode ouvre le formulaire spécifié uniquement si le corps du formulaire est inférieur ou égal à 32KO nombre de caractères.

      Si l’identificateur de l’élément spécifié n’identifie aucun rendez-vous existant, un volet vierge s’ouvre sur l’ordinateur ou l’appareil client. Par ailleurs, aucun message d’erreur n’est retourné.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      Office.context.mailbox.displayAppointmentForm(appointmentId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: Identificateur des services web Exchange pour un rendez-vous du calendrier existant.
          type:
            - string
  - uid: Outlook.Office.Mailbox.displayMessageForm
    summary: |-
      Affiche un message existant.

      La méthode displayMessageForm ouvre un message existant dans une nouvelle fenêtre du Bureau ou dans une boîte de dialogue sur les appareils mobiles.

      Dans Outlook sur le Web, cette méthode ouvre le formulaire spécifié uniquement si le corps du formulaire est inférieur ou égal à 32 Ko nombre de caractères.

      Si l’identificateur de l’élément spécifié n’identifie aucun message existant, aucun message ne s’affiche sur l’ordinateur client. Par ailleurs, aucun message d’erreur n’est retourné.

      N’utilisez pas la méthode displayMessageForm avec une valeur itemId qui représente un rendez-vous. Utilisez la méthode displayAppointmentForm pour afficher un rendez-vous existant et displayNewAppointmentForm pour afficher un formulaire afin de créer un rendez-vous.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      Office.context.mailbox.displayMessageForm(messageId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: Identificateur des services web Exchange pour un message existant.
          type:
            - string
  - uid: Outlook.Office.Mailbox.displayNewAppointmentForm
    summary: |-
      Affiche un formulaire permettant de créer un rendez-vous du calendrier.

      La méthode displayNewAppointmentForm ouvre un formulaire qui permet à l’utilisateur de créer un rendez-vous ou une réunion. Si des paramètres sont spécifiés, les champs du formulaire de rendez-vous sont remplis automatiquement avec le contenu des paramètres.

      Dans Outlook sur le Web, cette méthode affiche toujours un formulaire avec un champ participants. Si vous ne spécifiez pas de participants comme arguments d’entrée, la méthode affiche un formulaire contenant le bouton Enregistrer. Si vous avez spécifié des participants, le formulaire inclut ces derniers, en plus du bouton Envoyer.

      Dans le client riche Outlook et Outlook RT, si vous spécifiez des participants ou des ressources dans le paramètre requiredAttendees, optionalAttendees ou Resources, cette méthode affiche un formulaire de réunion avec un bouton Envoyer. Si vous ne spécifiez pas de destinataires, cette méthode affiche un formulaire de &amp; rendez-vous avec un bouton Enregistrer Fermer.

      Si l’un des paramètres dépasse les limites définies en matière de taille ou si un nom de paramètre inconnu est spécifié, une exception est levée.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm(
      {
          requiredAttendees: ['bob@contoso.com'],
          optionalAttendees: ['sam@contoso.com'],
          start: start,
          end: end,
          location: 'Home',
          resources: ['projector@contoso.com'],
          subject: 'meeting',
          body: 'Hello World!'
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: AppointmentForm décrivant le nouveau rendez-vous. Toutes les propriétés sont facultatives.
          type:
            - Outlook.Office.AppointmentForm
  - uid: Outlook.Office.Mailbox.getCallbackTokenAsync
    summary: "Obtient une chaîne contenant un jeton utilisé pour appeler les API\_REST ou les services web\_Exchange.\n\nLa méthode getCallbackTokenAsync effectue un appel asynchrone pour obtenir un jeton opaque à partir du serveur Exchange qui héberge la boîte aux lettres de l’utilisateur. La durée de vie du jeton de rappel est de 5\_minutes.\n\n*Jetons\_REST*\n\nLorsqu’un jeton REST est demandé (options. isRest = true), le jeton résultant ne fonctionnera pas pour authentifier les appels des services Web Exchange. Le jeton est limité dans le cadre d’un accès en lecture seule à l’élément actuel et à ses pièces jointes, sauf si le complément a spécifié l’autorisation ReadWriteMailbox dans son manifeste. Si l’autorisation ReadWriteMailbox est spécifiée, le jeton résultant accorde un accès en lecture/écriture à la messagerie, au calendrier et aux contacts, y compris la possibilité d’envoyer des messages.\n\nLe complément doit utiliser la propriété restUrl pour déterminer l’URL correcte à utiliser lors de l’exécution d’appels d’API REST.\n\n*Jetons\_EWS*\n\nLorsqu’un jeton EWS est demandé (options. isRest = false), le jeton résultant ne fonctionne pas pour authentifier les appels d’API REST. Le jeton peut uniquement accéder à l’élément actif.\n\nLe complément doit utiliser la propriété ewsUrl pour déterminer l’URL correcte à utiliser lors des appels EWS.\n\n**Remarque**: il est recommandé que les compléments utilisent les API REST à la place des services Web Exchange chaque fois que cela est possible.\n\n\\[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      function getCallbackToken() {
          var options = {
              isRest: true,
              asyncContext: { message: 'Hello World!' }
          };

          Office.context.mailbox.getCallbackTokenAsync(options, cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(options, callback)'
    fullName: 'getCallbackTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. isRest: détermine si le jeton fourni sera utilisé pour les API REST Outlook ou les services Web Exchange. La valeur par défaut est false. asyncContext: toutes les données d’État transmises à la méthode asynchrone.'
          type:
            - 'Office.AsyncContextOptions & { isRest?: boolean }'
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult. Le jeton est fourni sous forme de chaîne dans la propriété `asyncResult.value`. Si une erreur s’est produite, les `asyncResult.error` propriétés `asyncResult.diagnostics` et peuvent fournir des informations supplémentaires.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
  - uid: Outlook.Office.Mailbox.getCallbackTokenAsync_1
    summary: "Obtient une chaîne qui contient un jeton servant à obtenir une pièce jointe ou un élément à partir d’un serveur Exchange.\n\nLa méthode getCallbackTokenAsync effectue un appel asynchrone pour obtenir un jeton opaque à partir du serveur Exchange qui héberge la boîte aux lettres de l’utilisateur. La durée de vie du jeton de rappel est de 5\_minutes.\n\nVous pouvez passer le jeton et un identificateur de pièce jointe ou d’élément à un système tiers. Celui-ci utilise le jeton en tant que jeton d’autorisation de support pour appeler l’opération GetAttachment ou GetItem des services web Exchange (EWS) afin de retourner une pièce jointe ou un élément. Par exemple, vous pouvez créer un service distant pour obtenir des pièces jointes à partir de l’élément sélectionné.\n\nVotre application doit avoir l’autorisation ReadItem spécifiée dans son manifeste pour appeler la méthode getCallbackTokenAsync en mode lecture.\n\nEn mode composition, vous devez appeler la méthode saveAsync pour obtenir un identificateur d’élément à transmettre à la méthode getCallbackTokenAsync. Votre application doit disposer d’autorisations ReadWriteItem pour appeler la méthode saveAsync.\n\n\\[[Ensemble d’API: boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      function getCallbackToken() {
          Office.context.mailbox.getCallbackTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult. Le jeton est fourni sous forme de chaîne dans la propriété `asyncResult.value`. Si une erreur s’est produite, les `asyncResult.error` propriétés `asyncResult.diagnostics` et peuvent fournir des informations supplémentaires.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: Outlook.Office.Mailbox.getUserIdentityTokenAsync
    summary: |-
      Obtient un jeton qui identifie l’utilisateur et le complément Office.

      Le jeton est fourni sous forme de chaîne dans la propriété asyncResult. Value.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      La méthode getUserIdentityTokenAsync renvoie un jeton qui vous permet d’identifier et d' [authentifier le complément et l’utilisateur à l’aide d’un système tiers](https://docs.microsoft.com/outlook/add-ins/authentication) .<!-- -->.

      #### <a name="examples"></a>Exemples

      ```javascript
      function getIdentityToken() {
          Office.context.mailbox.getUserIdentityTokenAsync(cb);
      }

      function cb(asyncResult) {
          var token = asyncResult.value;
      }
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult. Le jeton est fourni sous forme de chaîne dans la propriété `asyncResult.value`. Si une erreur s’est produite, les `asyncResult.error` propriétés `asyncResult.diagnostics` et peuvent fournir des informations supplémentaires.'
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: Outlook.Office.Mailbox.makeEwsRequestAsync
    summary: "Effectue une demande asynchrone à un service des services Web Exchange (EWS) sur le serveur Exchange qui héberge la boîte aux lettres de l’utilisateur.\n\nDans ces cas de figure, les compléments doivent utiliser les API REST pour accéder à la boîte aux lettres de l’utilisateur.\n\nLa méthode makeEwsRequestAsync envoie une demande EWS de la part du complément à Exchange.\n\nVous ne pouvez pas demander des éléments associés à un dossier avec la méthode makeEwsRequestAsync.\n\nLa demande\_XML doit spécifier l’encodage\_UTF-8. &lt;<!-- -->? XML version = \"1.0\" Encoding = \"UTF-8\"?<!-- -->&gt;\n\nVotre complément doit disposer de l’autorisation ReadWriteMailbox pour utiliser la méthode makeEwsRequestAsync. Pour plus d’informations sur l’utilisation de l’autorisation ReadWriteMailbox et des opérations EWS que vous pouvez appeler avec la méthode makeEwsRequestAsync, reportez-vous à la rubrique [spécifier les autorisations pour l’accès des compléments de messagerie à la boîte aux lettres de l’utilisateur](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)<!-- -->.\n\nLe résultat XML de l’appel EWS est fourni sous forme de chaîne dans la propriété asyncResult. Value. Si la taille du résultat est supérieure à 1\_Mo, un message d’erreur est renvoyé.\n\n**Remarque**: cette méthode n’est pas prise en charge dans les scénarios suivants:\n\n- Dans Outlook sur iOS ou Android.\n\n- Lorsque le complément est chargé dans une boîte aux lettres gmail.\n\n**Remarque**: l’administrateur de serveur doit définir OAuthAuthentication sur true dans le répertoire EWS du serveur d’accès au client pour permettre à la méthode makeEwsRequestAsync d’effectuer des demandes EWS.\n\n*Différences entre les versions*\n\nLorsque vous utilisez la méthode makeEwsRequestAsync dans les applications de messagerie exécutées dans des versions d’Outlook inférieures à\_15.0.4535.1004, vous devez définir la valeur d’encodage sur\_ISO-8859-1.\n\n`<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>`\n\nLorsque votre application de messagerie s’exécute dans Outlook\_sur\_le\_web, vous n’avez pas à définir la valeur d’encodage. Pour déterminer si votre application de messagerie s’exécute dans Outlook ou Outlook\_sur\_le\_web, utilisez la propriété mailbox.diagnostics.hostName. Pour déterminer la version d’Outlook qui est exécutée, utilisez la propriété mailbox.diagnostics.hostVersion.\n\n\\[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadWriteMailbox

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: Demande EWS.
          type:
            - any
        - id: callback
          description: "Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult. La `value` propriété du résultat est le code XML de la demande EWS fournie sous forme de chaîne. Si la taille du résultat est supérieure à 1\_Mo, un message d’erreur est renvoyé."
          type:
            - '(asyncResult: Office.AsyncResult<string>) => void'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: Outlook.Office.Mailbox.removeHandlerAsync
    summary: |-
      Supprime les gestionnaires d’événements pour un type d’événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.

      Actuellement, le seul type d’événement pris en charge est`Office.EventType.ItemChanged`<!-- -->.

      \[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit révoquer le gestionnaire.
          type:
            - Office.EventType | string
        - id: options
          description: 'Facultatif. Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.Mailbox.removeHandlerAsync_1
    summary: |-
      Supprime les gestionnaires d’événements pour un type d’événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.

      Actuellement, le seul type d’événement pris en charge est`Office.EventType.ItemChanged`<!-- -->.

      \[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit révoquer le gestionnaire.
          type:
            - Office.EventType | string
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type Office. AsyncResult.'
          type:
            - '(asyncResult: Office.AsyncResult<void>) => void'
  - uid: Outlook.Office.Mailbox.diagnostics
    summary: |-
      Fournit des informations de diagnostic à un complément Outlook.

      Contient les membres suivants:

      - hostName (String): chaîne qui représente le nom de l’application hôte. Il s’agit de l’une des valeurs suivantes: Outlook, Mac Outlook, OutlookIOS ou OutlookWebApp.

      - hostVersion (String): une chaîne qui représente la version de l’application hôte ou du serveur Exchange. Si le complément de messagerie est exécuté dans Outlook sur les clients de bureau ou iOS, la propriété hostVersion renvoie la version de l’application hôte, Outlook. Dans Outlook sur le Web, la propriété renvoie la version du serveur Exchange. La chaîne 15.0.468.0 est un exemple.

      - OWAView (MailboxEnums. OWAView ou chaîne): énumération (ou littéral de chaîne) qui représente la vue actuelle d’Outlook sur le Web. Si l’application hôte n’est pas Outlook sur le Web, l’accès à cette propriété entraîne l’absence de définition. Outlook sur le Web comporte trois vues (OneColumn-affiché lorsque l’écran est étroit, TwoColumns-affiché lorsque l’écran est plus large et ThreeColumns-affiché lorsque l’écran est large) qui correspond à la largeur de l’écran et de la fenêtre, et au nombre de colonnes qui peut être affiché.

      Pour plus d’informations, reportez-vous à [Office. Diagnostics](xref:Outlook.Office.Diagnostics)<!-- -->.

      \[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - Outlook.Office.Diagnostics
  - uid: Outlook.Office.Mailbox.ewsUrl
    summary: "Obtient l’URL du point de terminaison des services\_Web Exchange (EWS) pour ce compte de messagerie. Mode lecture uniquement.\n\nVotre application doit avoir l’autorisation ReadItem spécifiée dans son manifeste pour pouvoir appeler le membre ewsUrl en mode de lecture.\n\nEn mode composition, vous devez appeler la méthode saveAsync avant de pouvoir utiliser le membre ewsUrl. Votre application doit disposer d’autorisations ReadWriteItem pour appeler la méthode saveAsync.\n\n\\[[Ensemble d’API: boîte aux lettres 1,0](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      La valeur ewsUrl peut être utilisée par un service distant pour effectuer des appels EWS à la boîte aux lettres de l’utilisateur. Par exemple, vous pouvez créer un service distant pour [obtenir des pièces jointes à partir de l’élément sélectionné](https://docs.microsoft.com/outlook/add-ins/get-attachments-of-an-outlook-item) .<!-- -->.

      **Remarque**: ce membre n’est pas pris en charge dans Outlook sur iOS ou Android.
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.Mailbox.item
    summary: 'Élément de boîte aux lettres. Selon le contexte dans lequel le complément est ouvert, l’élément peut être de n’importe quel nombre de types. Si vous souhaitez afficher IntelliSense uniquement pour un type spécifique, vous devez effectuer un cast de cet élément en l’un des éléments suivants:`ItemCompose`<!-- -->, `ItemRead`<!-- -->, `MessageCompose`<!-- -->, `MessageRead`<!-- -->, `AppointmentCompose`<!-- -->, `AppointmentRead`'
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose;'
      return:
        type:
          - Item & ItemCompose & ItemRead & MessageRead & MessageCompose & AppointmentRead & AppointmentCompose
  - uid: Outlook.Office.Mailbox.restUrl
    summary: "obtient l’URL du point de terminaison\_REST de ce compte de messagerie.\n\nVotre application doit avoir l’autorisation ReadItem spécifiée dans son manifeste pour pouvoir appeler le membre restUrl en mode de lecture.\n\nEn mode composition, vous devez appeler la méthode saveAsync avant de pouvoir utiliser le membre restUrl. Votre application doit disposer d’autorisations ReadWriteItem pour appeler la méthode saveAsync.\n\n\\[[Ensemble d’API: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      **<!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)**: ReadItem

      **<!-- --> [Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)**: composition ou lecture

      La valeur restUrl peut être utilisée pour effectuer des appels d' [API REST](https://docs.microsoft.com/outlook/rest/) à la boîte aux lettres de l’utilisateur.
    name: restUrl
    fullName: restUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restUrl: string;'
      return:
        type:
          - string
  - uid: Outlook.Office.Mailbox.userProfile
    summary: |-
      Informations sur l’utilisateur associé à la boîte aux lettres. Cela inclut le type de compte, le nom d’affichage, l’adresse de messagerie et le fuseau horaire.

      Pour plus d’informations, reportez-vous à [Office. UserProfile](xref:Outlook.Office.UserProfile)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - Outlook.Office.UserProfile