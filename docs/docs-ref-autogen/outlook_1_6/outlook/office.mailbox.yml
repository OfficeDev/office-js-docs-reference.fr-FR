### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.Mailbox:interface'
    summary: "Permet d’accéder au modèle objet de complément Microsoft Outlook.\n\nPrincipales propriétés\_:\n\n- `diagnostics`<!-- -->: Fournit des informations de diagnostic à un complément Outlook.\n\n- `item`<!-- -->: Fournit des méthodes et des propriétés permettant d’accéder à un message ou un rendez-vous dans un complément Outlook.\n\n- `userProfile`<!-- -->: Fournit des informations sur l’utilisateur dans un complément Outlook."
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: Office.Mailbox
    fullName: Office.Mailbox
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.Mailbox#addHandlerAsync:member(1)'
      - 'outlook!Office.Mailbox#addHandlerAsync:member(2)'
      - 'outlook!Office.Mailbox#convertToEwsId:member(1)'
      - 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
      - 'outlook!Office.Mailbox#convertToRestId:member(1)'
      - 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
      - 'outlook!Office.Mailbox#diagnostics:member'
      - 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#displayMessageForm:member(1)'
      - 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
      - 'outlook!Office.Mailbox#displayNewMessageForm:member(1)'
      - 'outlook!Office.Mailbox#ewsUrl:member'
      - 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#getCallbackTokenAsync:member(2)'
      - 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
      - 'outlook!Office.Mailbox#item:member'
      - 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
      - 'outlook!Office.Mailbox#removeHandlerAsync:member(1)'
      - 'outlook!Office.Mailbox#removeHandlerAsync:member(2)'
      - 'outlook!Office.Mailbox#restUrl:member'
      - 'outlook!Office.Mailbox#userProfile:member'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync:member(1)'
    summary: "ajoute un gestionnaire d’événements pour un événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.\n\nReportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox#events) de modèle objet boîte aux lettres pour les événements pris en charge.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit appeler le gestionnaire.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~0:complex'
        - id: handler
          description: 'Fonction qui gère l’événement. Cette fonction doit accepter un seul paramètre, qui est un littéral d’objet. La propriété type sur le paramètre correspond au `eventType` paramètre transmis à`addHandlerAsync`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~1:complex'
        - id: options
          description: 'Facultatif. Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~2:complex'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync:member(2)'
    summary: "ajoute un gestionnaire d’événements pour un événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.\n\nReportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox#events) de modèle objet boîte aux lettres pour les événements pris en charge.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      Office.initialize = function (reason) {
          $(document).ready(function () {
              Office.context.mailbox.addHandlerAsync(Office.EventType.ItemChanged, loadNewItem, function (result) {
              if (result.status === Office.AsyncResultStatus.Failed) {
                      // Handle error.
                  }
              });
          });
      };

      function loadNewItem(eventArgs) {
          // Load the properties of the newly selected item.
          loadProps(Office.context.mailbox.item);
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType | string, handler: (type: Office.EventType) => void, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit appeler le gestionnaire.
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~3:complex'
        - id: handler
          description: 'Fonction qui gère l’événement. Cette fonction doit accepter un seul paramètre, qui est un littéral d’objet. La propriété type sur le paramètre correspond au `eventType` paramètre transmis à`addHandlerAsync`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~4:complex'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#addHandlerAsync~5:complex'
  - uid: 'outlook!Office.Mailbox#convertToEwsId:member(1)'
    summary: "Convertit un ID d’élément mis en forme pour REST au format EWS.\n\nLes ID d’élément extraits via une API REST (telle que l’API Courrier Outlook ou Microsoft Graph) utilisent un format différent de celui employé par les services web Exchange (EWS). La méthode `convertToEwsId` convertit un ID mis en forme pour REST au format approprié pour EWS.\n\n**Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: 'convertToEwsId(itemId, restVersion)'
    fullName: 'convertToEwsId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToEwsId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: ID d’élément mis en forme pour les API REST Outlook.
          type:
            - string
        - id: restVersion
          description: Valeur indiquant la version de l’API REST Outlook utilisée pour récupérer l’ID d’élément.
          type:
            - 'outlook!Office.Mailbox#convertToEwsId~0:complex'
  - uid: 'outlook!Office.Mailbox#convertToLocalClientTime:member(1)'
    summary: "Obtient un dictionnaire contenant les informations d’heure dans l’heure locale du client.\n\nLes dates et heures utilisées par une application de messagerie pour Outlook sur le Web ou les clients de bureau peuvent utiliser différents fuseaux horaires. Outlook utilise le fuseau horaire de l’ordinateur client\_; Outlook sur le Web utilise le fuseau horaire défini dans le centre d’administration Exchange. Vous devez gérer les valeurs de date et d’heure afin que les valeurs que vous affichez sur l’interface utilisateur soient toujours cohérentes avec le fuseau horaire attendu par l’utilisateur.\n\nSi l’application de messagerie est en cours d’exécution dans Outlook sur des clients de bureau, la `convertToLocalClientTime` méthode renvoie un objet Dictionary dont les valeurs sont définies sur le fuseau horaire de l’ordinateur client. Si l’application de messagerie est en cours d’exécution dans Outlook sur le Web, la `convertToLocalClientTime` méthode renvoie un objet Dictionary dont les valeurs sont définies sur le fuseau horaire spécifié dans le centre d’administration Exchange."
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: convertToLocalClientTime(timeValue)
    fullName: convertToLocalClientTime(timeValue)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLocalClientTime(timeValue: Date): LocalClientTime;'
      return:
        type:
          - 'outlook!Office.LocalClientTime:interface'
        description: ''
      parameters:
        - id: timeValue
          description: Objet `Date`.
          type:
            - '!Date:interface'
  - uid: 'outlook!Office.Mailbox#convertToRestId:member(1)'
    summary: "Convertit un ID d’élément mis en forme pour EWS au format REST.\n\n**Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`Restricted`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      Les ID d’élément extraits via EWS ou via la `itemId` propriété utilisent un format différent du format utilisé par les API REST (telles que l' [API de messagerie Outlook](https://docs.microsoft.com/previous-versions/office/office-365-api/api/version-2.0/mail-rest-operations) ou [Microsoft Graph](https://graph.microsoft.io/)<!-- -->. La méthode `convertToRestId` convertit un ID mis en forme pour EWS au format approprié pour REST.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml
      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          var ewsId = Office.context.mailbox.item.itemId;
          var token = result.value;
          var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          var xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: 'convertToRestId(itemId, restVersion)'
    fullName: 'convertToRestId(itemId, restVersion)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToRestId(itemId: string, restVersion: MailboxEnums.RestVersion | string): string;'
      return:
        type:
          - string
        description: ''
      parameters:
        - id: itemId
          description: ID d’élément mis en forme pour les services web Exchange (EWS)
          type:
            - string
        - id: restVersion
          description: Valeur indiquant la version de l’API REST Outlook avec laquelle l’ID converti sera utilisé.
          type:
            - 'outlook!Office.Mailbox#convertToRestId~0:complex'
  - uid: 'outlook!Office.Mailbox#convertToUtcClientTime:member(1)'
    summary: |-
      Obtient un `Date` objet d’un dictionnaire contenant des informations d’heure.

      La `convertToUtcClientTime` méthode convertit un dictionnaire contenant une date et une heure locales en `Date` objet avec les valeurs appropriées pour la date et l’heure locales.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Represents 3:37 PM PDT on Monday, August 26, 2019.
      var input = {
          date: 26,
          hours: 15,
          milliseconds: 2,
          minutes: 37,
          month: 7,
          seconds: 2,
          timezoneOffset: -420,
          year: 2019
      };

      // result should be a Date object.
      var result = Office.context.mailbox.convertToUtcClientTime(input);

      // Output should be "2019-08-26T22:37:02.002Z".
      console.log(result.toISOString());
      ```
    name: convertToUtcClientTime(input)
    fullName: convertToUtcClientTime(input)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToUtcClientTime(input: LocalClientTime): Date;'
      return:
        type:
          - '!Date:interface'
        description: "Objet Date avec l’heure exprimée au format\_UTC."
      parameters:
        - id: input
          description: Valeur de l’heure locale à convertir.
          type:
            - 'outlook!Office.LocalClientTime:interface'
  - uid: 'outlook!Office.Mailbox#diagnostics:member'
    summary: "Fournit des informations de diagnostic à un complément Outlook.\n\nContient les membres suivants\_:\n\n- `hostName`(String)\_: une chaîne qui représente le nom de l’application hôte. Il doit prendre la valeur de l’une des valeurs suivantes\_:`Outlook`<!-- -->, `OutlookWebApp`<!-- -->, `OutlookIOS`<!-- -->, ou`OutlookAndroid`<!-- -->. **Remarque**: la valeur «\_Outlook\_» est renvoyée pour Outlook sur les clients de bureau (par exemple, Windows et Mac).\n\n- `hostVersion`(chaîne)\_: une chaîne qui représente la version de l’application hôte ou du serveur Exchange (par exemple, «\_15.0.468.0\_»). Si le complément de messagerie est en cours d’exécution dans Outlook sur un ordinateur de bureau ou un client mobile, la `hostVersion` propriété renvoie la version de l’application hôte, Outlook. Dans Outlook sur le Web, la propriété renvoie la version du serveur Exchange.\n\n- `OWAView`( `MailboxEnums.OWAView` ou chaîne)\_: énumération (ou littéral de chaîne) qui représente la vue actuelle d’Outlook sur le Web. Si l’application hôte n’est pas Outlook sur le Web, l’accès à cette propriété entraîne l’absence de définition. Outlook sur le Web comporte trois vues ( `OneColumn` -s’affiche lorsque l’écran est étroit, `TwoColumns` -s’affiche lorsque l’écran est plus large et `ThreeColumns` -affiché lorsque l’écran est large) qui correspondent à la largeur de l’écran et de la fenêtre, ainsi qu’au nombre de colonnes pouvant être affichées.\n\nPour plus d’informations, reportez-vous à [Office. Diagnostics](xref:outlook!Office.Diagnostics:interface)<!-- -->."
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: diagnostics
    fullName: diagnostics
    langs:
      - typeScript
    type: property
    syntax:
      content: 'diagnostics: Diagnostics;'
      return:
        type:
          - 'outlook!Office.Diagnostics:interface'
  - uid: 'outlook!Office.Mailbox#displayAppointmentForm:member(1)'
    summary: |-
      Affiche un rendez-vous de calendrier existant.

      La méthode `displayAppointmentForm` ouvre un rendez-vous du calendrier existant dans une nouvelle fenêtre du Bureau ou dans une boîte de dialogue sur les appareils mobiles.

      Dans Outlook sur Mac, vous pouvez utiliser cette méthode pour afficher un seul rendez-vous qui ne fait pas partie d’une série périodique ou le rendez-vous principal d’une série périodique. Toutefois, vous ne pouvez pas afficher une instance de la série car vous ne pouvez pas accéder aux propriétés (y compris l’ID d’élément) des instances d’une série périodique.

      Dans Outlook sur le Web, cette méthode ouvre le formulaire spécifié uniquement si le corps du formulaire est inférieur ou égal à 32 Ko de caractères.

      Si l’identificateur d’élément spécifié n’identifie pas un rendez-vous existant, un volet vide s’ouvre sur l’ordinateur ou le périphérique client, et aucun message d’erreur n’est renvoyé.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-appointment.yaml
      var itemId = $("#itemId").val();
      Office.context.mailbox.displayAppointmentForm(itemId);
      ```
    name: displayAppointmentForm(itemId)
    fullName: displayAppointmentForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayAppointmentForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: Identificateur des services web Exchange pour un rendez-vous du calendrier existant.
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayMessageForm:member(1)'
    summary: |-
      Affiche un message existant.

      La méthode `displayMessageForm` ouvre un message existant dans une nouvelle fenêtre du Bureau ou dans une boîte de dialogue sur les appareils mobiles.

      Dans Outlook sur le Web, cette méthode ouvre le formulaire spécifié uniquement si le corps du formulaire est inférieur ou égal à 32 Ko de caractères.

      Si l’identificateur d’élément spécifié n’identifie pas un message existant, aucun message ne s’affiche sur l’ordinateur client et aucun message d’erreur n’est renvoyé.

      N’utilisez pas `displayMessageForm` avec un ItemId qui représente un rendez-vous. Utilisez la méthode `displayAppointmentForm` pour afficher un rendez-vous existant, et `displayNewAppointmentForm` pour afficher un formulaire afin de créer un nouveau rendez-vous.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-existing-message.yaml
      var itemId = $("#itemId").val();
      Office.context.mailbox.displayMessageForm(itemId);
      ```
    name: displayMessageForm(itemId)
    fullName: displayMessageForm(itemId)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayMessageForm(itemId: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: itemId
          description: Identificateur des services web Exchange pour un message existant.
          type:
            - string
  - uid: 'outlook!Office.Mailbox#displayNewAppointmentForm:member(1)'
    summary: |-
      Affiche un formulaire permettant de créer un rendez-vous du calendrier.

      The `displayNewAppointmentForm` method opens a form that enables the user to create a new appointment or meeting. If parameters are specified, the appointment form fields are automatically populated with the contents of the parameters.

      Dans Outlook sur le Web, cette méthode affiche toujours un formulaire avec un champ participants. Si vous ne spécifiez pas de participants comme arguments d’entrée, la méthode affiche un formulaire contenant le bouton **Enregistrer**. Si vous avez spécifié des participants, le formulaire inclut ces derniers, en plus du bouton **Envoyer**.

      Dans le client riche Outlook et Outlook RT, si vous spécifiez des participants ou des ressources dans le`requiredAttendees`<!-- -->, `optionalAttendees`<!-- -->ou `resources` le paramètre, cette méthode affiche un formulaire de réunion avec un bouton **Envoyer** . Si vous ne spécifiez pas de destinataires, cette méthode affiche un formulaire de rendez-vous avec un bouton **Enregistrer &amp; Fermer** .

      Si l’un des paramètres dépasse les limites définies en matière de taille ou si un nom de paramètre inconnu est spécifié, une exception est levée.

      **Remarque**: cette méthode n’est pas prise en charge dans Outlook sur iOS ou Android.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-appointment.yaml
      var start = new Date();
      var end = new Date();
      end.setHours(start.getHours() + 1);

      Office.context.mailbox.displayNewAppointmentForm(
      {
          requiredAttendees: ['bob@contoso.com'],
          optionalAttendees: ['sam@contoso.com'],
          start: start,
          end: end,
          location: 'Home',
          subject: 'meeting',
          resources: ['projector@contoso.com'],
          body: 'Hello World!'
      });
      ```
    name: displayNewAppointmentForm(parameters)
    fullName: displayNewAppointmentForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewAppointmentForm(parameters: AppointmentForm): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: Une `AppointmentForm` Description du nouveau rendez-vous. Toutes les propriétés sont facultatives.
          type:
            - 'outlook!Office.AppointmentForm:interface'
  - uid: 'outlook!Office.Mailbox#displayNewMessageForm:member(1)'
    summary: "Affiche un formulaire permettant de créer un message.\n\nLa `displayNewMessageForm` méthode ouvre un formulaire qui permet à l’utilisateur de créer un message. Si les paramètres sont spécifiés, les champs du formulaire de message sont automatiquement renseignés avec le contenu des paramètres.\n\nSi l’un des paramètres dépasse les limites définies en matière de taille ou si un nom de paramètre inconnu est spécifié, une exception est levée.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,6](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/55-display-items/display-new-message.yaml
      Office.context.mailbox.displayNewMessageForm(
      {
          toRecipients: Office.context.mailbox.item.to, // Copies the To line from current item
          ccRecipients: ['sam@contoso.com'],
          subject: 'Outlook add-ins are cool!',
          htmlBody: 'Hello <b>World</b>!<br/><img src="cid:image.png"></i>',
          attachments:
          [
              {
                  type: 'file',
                  name: 'image.png',
                  url: 'http://www.cutestpaw.com/wp-content/uploads/2011/11/Cute-Black-Dogs-s.jpg',
                  isInline: true
              }
          ]
      });
      ```
    name: displayNewMessageForm(parameters)
    fullName: displayNewMessageForm(parameters)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'displayNewMessageForm(parameters: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: parameters
          description: "Dictionnaire contenant toutes les valeurs à remplir pour l’utilisateur dans le nouveau formulaire. Tous les paramètres sont facultatifs.\n\n`toRecipients`<!-- -->: Tableau de chaînes contenant les adresses de messagerie ou tableau contenant un objet [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) pour chacun des destinataires de la ligne à. Le tableau est limité à 100\_entrées maximum.\n\n`ccRecipients`<!-- -->: Tableau de chaînes contenant les adresses de messagerie ou tableau contenant un objet [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) pour chacun des destinataires de la ligne CC. Le tableau est limité à 100\_entrées maximum.\n\n`bccRecipients`<!-- -->: Tableau de chaînes contenant les adresses de messagerie ou tableau contenant un objet [EmailAddressDetails](xref:outlook!Office.EmailAddressDetails:interface) pour chacun des destinataires de la ligne CCI. Le tableau est limité à 100\_entrées maximum.\n\n`subject`<!-- -->: Chaîne contenant l’objet du message. La chaîne est limitée à 255\_caractères maximum.\n\n`htmlBody`<!-- -->: Corps HTML du message. La taille du corps du message est limitée à 32\_Ko.\n\n`attachments`<!-- -->: Tableau d’objets JSON qui sont des pièces jointes de fichier ou d’élément.\n\n`attachments.type`<!-- -->: Indique le type de pièce jointe. Doit être un fichier pour une pièce jointe ou un élément pour une pièce jointe d’un élément.\n\n`attachments.name`<!-- -->: Chaîne qui contient le nom de la pièce jointe, jusqu’à 255 caractères de longueur.\n\n`attachments.url`<!-- -->: Utilisé uniquement si type est défini sur file. Il s’agit de l’URI de l’emplacement du fichier.\n\n`attachments.isInline`<!-- -->: Utilisé uniquement si type est défini sur file. Si la valeur est true, indique que la pièce jointe est affichée en ligne dans le corps du message et qu’elle ne doit pas être affichée dans la liste des pièces jointes.\n\n`attachments.itemId`<!-- -->: Utilisé uniquement si type est défini sur Item. ID d’élément EWS du message électronique existant que vous souhaitez joindre au nouveau message. Il s’agit d’une chaîne comportant un maximum de 100\_caractères."
          type:
            - any
  - uid: 'outlook!Office.Mailbox#ewsUrl:member'
    summary: "Obtient l’URL du point de terminaison des services\_Web Exchange (EWS) pour ce compte de messagerie. Mode lecture uniquement.\n\nVotre application doit disposer de l' `ReadItem` autorisation spécifiée dans son manifeste pour pouvoir appeler le `ewsUrl` membre en mode lecture.\n\nEn mode composition, vous devez appeler la méthode `saveAsync` avant de pouvoir utiliser le membre `ewsUrl`. Votre application doit disposer `ReadWriteItem` d’autorisations pour appeler la `saveAsync` méthode.\n\n**Remarque**: ce membre n’est pas pris en charge dans Outlook sur iOS ou Android."
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      La valeur `ewsUrl` peut être utilisée par un service distant pour émettre des appels EWS vers la boîte aux lettres de l’utilisateur. Par exemple, vous pouvez créer un service distant pour [obtenir des pièces jointes à partir de l’élément sélectionné](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item) .<!-- -->.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml
      console.log("EWS URL: " + Office.context.mailbox.ewsUrl);
      var ewsId = Office.context.mailbox.item.itemId;
      console.log("EWS item ID: " + Office.context.mailbox.item.itemId);

      console.log("REST URL: " + Office.context.mailbox.restUrl);
      var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("REST item ID: " + restId);

      var ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);
      console.log("EWS ID (from REST ID): " + ewsId2);
      ```
    name: ewsUrl
    fullName: ewsUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ewsUrl: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(1)'
    summary: "Obtient une chaîne contenant un jeton utilisé pour appeler les API\_REST ou les services web\_Exchange.\n\nThe `getCallbackTokenAsync` method makes an asynchronous call to get an opaque token from the Exchange Server that hosts the user's mailbox. The lifetime of the callback token is 5 minutes.\n\nLe jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété.\n\nL’appel de la `getCallbackTokenAsync` méthode en mode lecture requiert un niveau d’autorisation minimal de`ReadItem`<!-- -->.\n\nPour appeler la `getCallbackTokenAsync` méthode en mode composition, vous devez avoir enregistré l’élément. La `saveAsync` méthode requiert un niveau d’autorisation minimum de`ReadWriteItem`<!-- -->.\n\n*Jetons\_REST*\n\nLorsqu’un jeton REST est demandé (`options.isRest` = `true`<!-- -->), le jeton résultant ne fonctionnera pas pour authentifier les appels des services Web Exchange. Le jeton peut uniquement accéder en lecture seule à l’élément actif et à ses pièces jointes, sauf si l’autorisation `ReadWriteMailbox` est spécifiée dans le manifeste du complément. Si l’autorisation `ReadWriteMailbox` est spécifiée, le jeton fourni accorde un accès en lecture/écriture au courrier, au calendrier et aux contacts, ainsi que la possibilité d’envoyer des messages.\n\nLe complément doit utiliser la propriété `restUrl` pour déterminer l’URL à utiliser pendant les appels de l’API\_REST.\n\nCette API fonctionne pour les étendues suivantes\_:\n\n- `Mail.ReadWrite`\n\n- `Mail.Send`\n\n- `Calendars.ReadWrite`\n\n- `Contacts.ReadWrite`\n\n*Jetons\_EWS*\n\nLorsqu’un jeton EWS est demandé (`options.isRest` = `false`<!-- -->), le jeton résultant ne fonctionnera pas pour authentifier les appels d’API REST. Le jeton peut uniquement accéder à l’élément actif.\n\nLe complément doit utiliser la propriété `ewsUrl` pour déterminer l’URL à utiliser pendant les appels\_EWS.\n\nVous pouvez passer à la fois le jeton et un identifiant de pièce jointe ou un identifiant d'élément à un système tiers. Le système tiers utilise le jeton en tant que jeton d’autorisation de support pour appeler l’opération [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) ou [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) des services web Exchange (EWS) afin de retourner une pièce jointe ou un élément. Par exemple, vous pouvez créer un service distant pour [obtenir des pièces jointes à partir de l’élément sélectionné](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item) .<!-- -->.\n\n**Remarque**: il est recommandé que les compléments utilisent les API REST à la place des services Web Exchange chaque fois que cela est possible.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      **Erreurs**:

      - `HTTPRequestFailure`<!-- -->: La demande a échoué. Veuillez rechercher le code d’erreur HTTP dans l’objet de diagnostics.

      - `InternalServerError`<!-- -->: Le serveur Exchange a renvoyé une erreur. Pour plus d’informations, veuillez consulter l’objet de diagnostics.

      - `NetworkError`<!-- -->: L’utilisateur n’est plus connecté au réseau. Veuillez vérifier la connexion réseau et réessayer.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml
      Office.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {
          var ewsId = Office.context.mailbox.item.itemId;
          var token = result.value;
          var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);
          var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;
                  
          var xhr = new XMLHttpRequest();
          xhr.open('GET', getMessageUrl);
          xhr.setRequestHeader("Authorization", "Bearer " + token);
          xhr.onload = function (e) {
              console.log(this.response);
          }
          xhr.send();
      });
      ```
    name: 'getCallbackTokenAsync(options, callback)'
    fullName: 'getCallbackTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(options: Office.AsyncContextOptions & { isRest?: boolean }, callback: (asyncResult: Office.AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `isRest`<!-- -->: Détermine si le jeton fourni sera utilisé pour les API REST Outlook ou les services Web Exchange. Valeur par défaut est`false`<!-- -->. `asyncContext`<!-- -->: Toutes les données d’État transmises à la méthode asynchrone.'
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
        - id: callback
          description: 'Une fois la méthode terminée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. Le jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété. En cas d’erreur, les propriétés `asyncResult.error` et `asyncResult.diagnostics` peuvent fournir des informations supplémentaires.'
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~1:complex'
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync:member(2)'
    summary: "Obtient une chaîne qui contient un jeton servant à obtenir une pièce jointe ou un élément à partir d’un serveur Exchange.\n\nThe `getCallbackTokenAsync` method makes an asynchronous call to get an opaque token from the Exchange Server that hosts the user's mailbox. The lifetime of the callback token is 5 minutes.\n\nLe jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété.\n\nVous pouvez passer à la fois le jeton et un identifiant de pièce jointe ou un identifiant d'élément à un système tiers. Le système tiers utilise le jeton en tant que jeton d’autorisation de support pour appeler l’opération [GetAttachment](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getattachment-operation) ou [GetItem](https://docs.microsoft.com/exchange/client-developer/web-service-reference/getitem-operation) des services web Exchange (EWS) afin de retourner une pièce jointe ou un élément. Par exemple, vous pouvez créer un service distant pour [obtenir des pièces jointes à partir de l’élément sélectionné](https://docs.microsoft.com/office/dev/add-ins/outlook/get-attachments-of-an-outlook-item) .<!-- -->.\n\nL’appel de la `getCallbackTokenAsync` méthode en mode lecture requiert un niveau d’autorisation minimal de`ReadItem`<!-- -->.\n\nPour appeler la `getCallbackTokenAsync` méthode en mode composition, vous devez avoir enregistré l’élément. La `saveAsync` méthode requiert un niveau d’autorisation minimum de`ReadWriteItem`<!-- -->.\n\n\\[[Ensemble d’API\_: tous prennent en charge le mode de lecture\_; La boîte aux lettres 1,3 a introduit la prise en charge du mode composition](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      **Erreurs**:

      - `HTTPRequestFailure`<!-- -->: La demande a échoué. Veuillez rechercher le code d’erreur HTTP dans l’objet de diagnostics.

      - `InternalServerError`<!-- -->: Le serveur Exchange a renvoyé une erreur. Pour plus d’informations, veuillez consulter l’objet de diagnostics.

      - `NetworkError`<!-- -->: L’utilisateur n’est plus connecté au réseau. Veuillez vérifier la connexion réseau et réessayer.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-callback-token.yaml
      Office.context.mailbox.getCallbackTokenAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`Token retrieval failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: 'getCallbackTokenAsync(callback, userContext)'
    fullName: 'getCallbackTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCallbackTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Une fois la méthode terminée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. Le jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété. En cas d’erreur, les propriétés `asyncResult.error` et `asyncResult.diagnostics` peuvent fournir des informations supplémentaires.'
          type:
            - 'outlook!Office.Mailbox#getCallbackTokenAsync~2:complex'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync:member(1)'
    summary: |-
      Obtient un jeton qui identifie l’utilisateur et le complément Office.

      Le jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      La `getUserIdentityTokenAsync` méthode renvoie un jeton qui vous permet d’identifier et d' [authentifier le complément et l’utilisateur à l’aide d’un système tiers](https://docs.microsoft.com/office/dev/add-ins/outlook/authentication) .<!-- -->.

      **Erreurs**:

      - `HTTPRequestFailure`<!-- -->: La demande a échoué. Veuillez rechercher le code d’erreur HTTP dans l’objet de diagnostics.

      - `InternalServerError`<!-- -->: Le serveur Exchange a renvoyé une erreur. Pour plus d’informations, veuillez consulter l’objet de diagnostics.

      - `NetworkError`<!-- -->: L’utilisateur n’est plus connecté au réseau. Veuillez vérifier la connexion réseau et réessayer.

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/user-identity-token.yaml
      Office.context.mailbox.getUserIdentityTokenAsync(function (result) {
          if (result.status !== Office.AsyncResultStatus.Succeeded) {
              console.error(`Token retrieval failed with message: ${result.error.message}`);
          } else {
              console.log(result.value);
          }
      });
      ```
    name: 'getUserIdentityTokenAsync(callback, userContext)'
    fullName: 'getUserIdentityTokenAsync(callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUserIdentityTokenAsync(callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Une fois la méthode terminée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. Le jeton est renvoyé sous forme de chaîne dans la `asyncResult.value` propriété. En cas d’erreur, les propriétés `asyncResult.error` et `asyncResult.diagnostics` peuvent fournir des informations supplémentaires.'
          type:
            - 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: 'outlook!Office.Mailbox#item:member'
    summary: "Élément de boîte aux lettres. Selon le contexte dans lequel le complément est ouvert, le type d’élément peut varier. Si vous souhaitez afficher IntelliSense uniquement pour un type ou un mode spécifique, effectuez un cast de cet élément sur l’un des éléments suivants\_:\n\n[MessageCompose](xref:outlook!Office.MessageCompose:interface)<!-- -->, [MessageRead](xref:outlook!Office.MessageRead:interface)<!-- -->, [AppointmentCompose](xref:outlook!Office.AppointmentCompose:interface)<!-- -->, [AppointmentRead](xref:outlook!Office.AppointmentRead:interface)"
    name: item
    fullName: item
    langs:
      - typeScript
    type: property
    syntax:
      content: 'item: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead;'
      return:
        type:
          - 'outlook!Office.Mailbox#item~0:complex'
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync:member(1)'
    summary: "Effectue une demande asynchrone à un service des services Web Exchange (EWS) sur le serveur Exchange qui héberge la boîte aux lettres de l’utilisateur.\n\nDans ces cas de figure, les compléments doivent utiliser les API REST pour accéder à la boîte aux lettres de l’utilisateur.\n\nLa méthode `makeEwsRequestAsync` envoie une demande EWS à Exchange de la part du complément.\n\nVous ne pouvez pas demander des éléments associés à un dossier avec la méthode `makeEwsRequestAsync`.\n\nLa demande XML doit spécifier le codage UTF-8\_:`\\<?xml version=\"1.0\" encoding=\"utf-8\"?\\>`<!-- -->.\n\nVotre complément doit disposer de l' `ReadWriteMailbox` autorisation d’utiliser la `makeEwsRequestAsync` méthode. Pour plus d’informations sur l’utilisation de l' `ReadWriteMailbox` autorisation et des opérations EWS que vous pouvez appeler avec la `makeEwsRequestAsync` méthode, voir [spécifier les autorisations pour l’accès des compléments de messagerie à la boîte aux lettres de l’utilisateur](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) .<!-- -->.\n\nLe résultat XML de l’appel EWS est fourni sous forme de chaîne dans la propriété `asyncResult.value`. Si la taille du résultat est supérieure à 1\_Mo, un message d’erreur est renvoyé.\n\n**Remarque**: cette méthode n’est pas prise en charge dans les scénarios suivants\_:\n\n- Dans Outlook sur iOS ou Android.\n\n- Lorsque le complément est chargé dans une boîte aux lettres gmail.\n\n**Remarque**: l’administrateur de serveur doit `OAuthAuthentication` définir `true` sur dans le répertoire EWS du serveur d’accès au client pour permettre `makeEwsRequestAsync` à la méthode d’effectuer des demandes EWS.\n\n*Différences entre les versions*\n\nLorsque vous utilisez la `makeEwsRequestAsync` méthode dans les applications de messagerie s’exécutant dans les versions d’Outlook antérieures à la version 15.0.4535.1004, vous devez définir la valeur de codage sur ISO-8859-1.\n\n`<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>`\n\nLorsque votre application de messagerie s’exécute dans Outlook\_sur\_le\_web, vous n’avez pas à définir la valeur d’encodage. Vous pouvez déterminer si votre application de messagerie est en cours d’exécution dans Outlook ou Outlook sur le Web à l’aide de la `mailbox.diagnostics.hostName` propriété. Vous pouvez déterminer la version d’Outlook qui est en cours d’exécution à l’aide de la `mailbox.diagnostics.hostVersion` propriété."
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadWriteMailbox`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      function getSubjectRequest(id) {
          // Return a GetItem operation request for the subject of the specified item.
          var request =
              '<?xml version="1.0" encoding="utf-8"?>' +
              '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' +
              '               xmlns:xsd="http://www.w3.org/2001/XMLSchema"' +
              '               xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"' +
              '               xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types">' +
              '  <soap:Header>' +
              '    <RequestServerVersion Version="Exchange2013" xmlns="http://schemas.microsoft.com/exchange/services/2006/types" soap:mustUnderstand="0" />' +
              '  </soap:Header>' +
              '  <soap:Body>' +
              '    <GetItem xmlns="http://schemas.microsoft.com/exchange/services/2006/messages">' +
              '      <ItemShape>' +
              '        <t:BaseShape>IdOnly</t:BaseShape>' +
              '        <t:AdditionalProperties>' +
              '            <t:FieldURI FieldURI="item:Subject"/>' +
              '        </t:AdditionalProperties>' +
              '      </ItemShape>' +
              '      <ItemIds><t:ItemId Id="' + id + '"/></ItemIds>' +
              '    </GetItem>' +
              '  </soap:Body>' +
              '</soap:Envelope>';

          return request;
      }

      function sendRequest() {
          // Create a local variable that contains the mailbox.
          Office.context.mailbox.makeEwsRequestAsync(
              getSubjectRequest(mailbox.item.itemId), callback);
      }

      function callback(asyncResult)  {
          var result = asyncResult.value;
          var context = asyncResult.asyncContext;

          // Process the returned response here.
      }
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/make-ews-request-async.yaml
      var ewsId = Office.context.mailbox.item.itemId;
      var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">' +
          '  <soap:Header><t:RequestServerVersion Version="Exchange2013" /></soap:Header>' +
          '  <soap:Body>' +
          '    <m:GetItem>' +
          '      <m:ItemShape>' +
          '        <t:BaseShape>IdOnly</t:BaseShape>' +
          '      </m:ItemShape >' +
          '      <m:ItemIds>' +
          '        <t:ItemId Id="' + ewsId + '" />' +
          '      </m:ItemIds>' +
          '    </m:GetItem>' +
          '  </soap:Body>' +
          '</soap:Envelope>';

      Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
          console.log(result);
      });
      ```
      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/send-message-using-make-ews-request-async.yaml
      var request = '<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">'+
          '  <soap:Header><t:RequestServerVersion Version="Exchange2010" /></soap:Header>'+
          '  <soap:Body>'+
          '    <m:CreateItem MessageDisposition="SendAndSaveCopy">'+
          '      <m:SavedItemFolderId><t:DistinguishedFolderId Id="sentitems" /></m:SavedItemFolderId>'+
          '      <m:Items>'+
          '        <t:Message>'+
          '          <t:Subject>Hello, Outlook!</t:Subject>'+
          '          <t:Body BodyType="HTML">This message was sent from a ScriptLab code sample, used from ' + Office.context.mailbox.diagnostics.hostName + ', version ' + Office.context.mailbox.diagnostics.hostVersion + '!</t:Body>'+
          '          <t:ToRecipients>'+
          '            <t:Mailbox><t:EmailAddress>' + Office.context.mailbox.userProfile.emailAddress + '</t:EmailAddress></t:Mailbox>'+
          '          </t:ToRecipients>'+
          '        </t:Message>'+
          '      </m:Items>'+
          '    </m:CreateItem>'+
          '  </soap:Body>'+
          '</soap:Envelope>';

      Office.context.mailbox.makeEwsRequestAsync(request, function (result) {
          console.log(result);
      });
      ```
    name: 'makeEwsRequestAsync(data, callback, userContext)'
    fullName: 'makeEwsRequestAsync(data, callback, userContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'makeEwsRequestAsync(data: any, callback: (asyncResult: Office.AsyncResult<string>) => void, userContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: Demande EWS.
          type:
            - any
        - id: callback
          description: "Une fois la méthode terminée, la fonction transmise au paramètre callback est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->. La `value` propriété du résultat est le code XML de la demande EWS fournie sous forme de chaîne. Si la taille du résultat est supérieure à 1\_Mo, un message d’erreur est renvoyé."
          type:
            - 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
        - id: userContext
          description: Facultatif. Données d’état transmises à la méthode asynchrone.
          type:
            - any
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync:member(1)'
    summary: "Supprime les gestionnaires d’événements pour un type d’événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.\n\nReportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox#events) de modèle objet boîte aux lettres pour les événements pris en charge.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit révoquer le gestionnaire.
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~0:complex'
        - id: options
          description: 'Facultatif. Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~1:complex'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync:member(2)'
    summary: "Supprime les gestionnaires d’événements pour un type d’événement pris en charge. **Remarque**: les événements ne sont disponibles qu’avec le volet Office.\n\nReportez-vous à la [section événements](https://docs.microsoft.com/office/dev/add-ins/reference/objectmodel/requirement-set-1.6/office.context.mailbox#events) de modèle objet boîte aux lettres pour les événements pris en charge.\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType | string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: Événement qui doit révoquer le gestionnaire.
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~2:complex'
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.Mailbox#removeHandlerAsync~3:complex'
  - uid: 'outlook!Office.Mailbox#restUrl:member'
    summary: "obtient l’URL du point de terminaison\_REST de ce compte de messagerie.\n\nVotre application doit disposer de l' `ReadItem` autorisation spécifiée dans son manifeste pour pouvoir appeler le `restUrl` membre en mode lecture.\n\nEn mode composition, vous devez appeler la méthode `saveAsync` avant de pouvoir utiliser le membre `restUrl`. Votre application doit disposer `ReadWriteItem` d’autorisations pour appeler la `saveAsync` méthode.\n\nToutefois, dans les scénarios de délégué ou partagés, vous devez utiliser à la place la `targetRestUrl` propriété de l' `SharedProperties` objet (introduite dans l’ensemble de conditions requises 1,8). Pour plus d’informations, consultez l’article relatif [à l’accès délégué](https://docs.microsoft.com/office/dev/add-ins/outlook/delegate-access) .\n\n\\[[Ensemble d’API\_: boîte aux lettres 1,5](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: "** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`\n\n** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture\n\nLa valeur `restUrl` peut être utilisée pour que l’[API\_REST](https://docs.microsoft.com/outlook/rest/) appelle la boîte aux lettres de l’utilisateur.\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/basic-rest-cors.yaml\nOffice.context.mailbox.getCallbackTokenAsync({ isRest: true }, function (result) {\n    var ewsId = Office.context.mailbox.item.itemId;\n    var token = result.value;\n    var restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\n    var getMessageUrl = Office.context.mailbox.restUrl + '/v2.0/me/messages/' + restId;\n            \n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', getMessageUrl);\n    xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n    xhr.onload = function (e) {\n        console.log(this.response);\n    }\n    xhr.send();\n});\n```\n```javascript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/85-tokens-and-service-calls/ids-and-urls.yaml\nconsole.log(\"EWS URL: \" + Office.context.mailbox.ewsUrl);\nvar ewsId = Office.context.mailbox.item.itemId;\nconsole.log(\"EWS item ID: \" + Office.context.mailbox.item.itemId);\n\nconsole.log(\"REST URL: \" + Office.context.mailbox.restUrl);\nvar restId = Office.context.mailbox.convertToRestId(ewsId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"REST item ID: \" + restId);\n\nvar ewsId2 = Office.context.mailbox.convertToEwsId(restId, Office.MailboxEnums.RestVersion.v2_0);\nconsole.log(\"EWS ID (from REST ID): \" + ewsId2);\n```"
    name: restUrl
    fullName: restUrl
    langs:
      - typeScript
    type: property
    syntax:
      content: 'restUrl: string;'
      return:
        type:
          - string
  - uid: 'outlook!Office.Mailbox#userProfile:member'
    summary: |-
      Informations sur l’utilisateur associé à la boîte aux lettres. Cela inclut le type de compte, le nom d’affichage, l’adresse de messagerie et le fuseau horaire.

      Pour plus d’informations, reportez-vous à [Office. UserProfile](xref:outlook!Office.UserProfile:interface)
    name: userProfile
    fullName: userProfile
    langs:
      - typeScript
    type: property
    syntax:
      content: 'userProfile: UserProfile;'
      return:
        type:
          - 'outlook!Office.UserProfile:interface'
references:
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~1:complex'
    name: '(type: Office.EventType) => void'
    fullName: '(type: Office.EventType) => void'
    spec.typeScript:
      - name: '(type: '
        fullName: '(type: '
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ) => void
        fullName: ) => void
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~3:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~4:complex'
    name: '(type: Office.EventType) => void'
    fullName: '(type: Office.EventType) => void'
    spec.typeScript:
      - name: '(type: '
        fullName: '(type: '
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ) => void
        fullName: ) => void
  - uid: 'outlook!Office.Mailbox#addHandlerAsync~5:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#convertToEwsId~0:complex'
    name: MailboxEnums.RestVersion | string
    fullName: Office.MailboxEnums.RestVersion | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.RestVersion:enum'
        name: MailboxEnums.RestVersion
        fullName: Office.MailboxEnums.RestVersion
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.LocalClientTime:interface'
    name: LocalClientTime
  - uid: '!Date:interface'
    name: Date
  - uid: 'outlook!Office.Mailbox#convertToRestId~0:complex'
    name: MailboxEnums.RestVersion | string
    fullName: Office.MailboxEnums.RestVersion | string
    spec.typeScript:
      - uid: 'outlook!Office.MailboxEnums.RestVersion:enum'
        name: MailboxEnums.RestVersion
        fullName: Office.MailboxEnums.RestVersion
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Diagnostics:interface'
    name: Diagnostics
  - uid: 'outlook!Office.AppointmentForm:interface'
    name: AppointmentForm
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~0:complex'
    name: 'Office.AsyncContextOptions & { isRest?: boolean }'
    fullName: 'Office.AsyncContextOptions & { isRest?: boolean }'
    spec.typeScript:
      - uid: 'office!Office.AsyncContextOptions:interface'
        name: Office.AsyncContextOptions
        fullName: Office.AsyncContextOptions
      - name: ' & { isRest?: boolean }'
        fullName: ' & { isRest?: boolean }'
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#getCallbackTokenAsync~2:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#getUserIdentityTokenAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#item~0:complex'
    name: Item & ItemCompose & ItemRead & Message & MessageCompose & MessageRead & Appointment & AppointmentCompose & AppointmentRead
    fullName: Office.Item & Office.ItemCompose & Office.ItemRead & Office.Message & Office.MessageCompose & Office.MessageRead & Office.Appointment & Office.AppointmentCompose & Office.AppointmentRead
    spec.typeScript:
      - uid: 'outlook!Office.Item:interface'
        name: Item
        fullName: Office.Item
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemCompose:interface'
        name: ItemCompose
        fullName: Office.ItemCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.ItemRead:interface'
        name: ItemRead
        fullName: Office.ItemRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.Message:interface'
        name: Message
        fullName: Office.Message
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageCompose:interface'
        name: MessageCompose
        fullName: Office.MessageCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.MessageRead:interface'
        name: MessageRead
        fullName: Office.MessageRead
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.Appointment:interface'
        name: Appointment
        fullName: Office.Appointment
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentCompose:interface'
        name: AppointmentCompose
        fullName: Office.AppointmentCompose
      - name: ' & '
        fullName: ' & '
      - uid: 'outlook!Office.AppointmentRead:interface'
        name: AppointmentRead
        fullName: Office.AppointmentRead
  - uid: 'outlook!Office.Mailbox#makeEwsRequestAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<string>) => void'
    fullName: '(asyncResult: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~0:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~1:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~2:complex'
    name: Office.EventType | string
    fullName: Office.EventType | string
    spec.typeScript:
      - uid: 'office!Office.EventType:enum'
        name: Office.EventType
        fullName: Office.EventType
      - name: ' | string'
        fullName: ' | string'
  - uid: 'outlook!Office.Mailbox#removeHandlerAsync~3:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'outlook!Office.UserProfile:interface'
    name: UserProfile