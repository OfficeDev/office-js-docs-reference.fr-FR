### YamlMime:UniversalReference
items:
  - uid: powerpoint!
    name: powerpoint
    fullName: powerpoint
    langs:
      - typeScript
    type: package
    children:
      - 'powerpoint!PowerPoint.Application:class'
      - 'powerpoint!PowerPoint.createPresentation:function(1)'
      - 'powerpoint!PowerPoint.ErrorCodes:enum'
      - 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
      - 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
      - 'powerpoint!PowerPoint.Presentation:class'
      - 'powerpoint!PowerPoint.RequestContext:class'
      - 'powerpoint!PowerPoint.run:function(1)'
      - 'powerpoint!PowerPoint.run:function(2)'
      - 'powerpoint!PowerPoint.run:function(3)'
  - uid: 'powerpoint!PowerPoint.createPresentation:function(1)'
    summary: "Crée et ouvre une nouvelle présentation. Si vous le souhaitez, la présentation peut être pré-renseignée avec un fichier. pptx codé en base64.\n\n\\[[Ensemble d’API\_: PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\\]"
    name: PowerPoint.createPresentation(base64File)
    fullName: PowerPoint.createPresentation(base64File)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function createPresentation(base64File?: string): Promise<void>;'
      return:
        type:
          - 'powerpoint!PowerPoint.createPresentation~0:complex'
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          var myFile = document.getElementById("file");
          var reader = new FileReader();

          reader.onload = function (event) {
              // strip off the metadata before the base64-encoded string
              var startIndex = event.target.result.indexOf("base64,");
              var copyBase64 = event.target.result.substr(startIndex + 7);

              PowerPoint.createPresentation(copyBase64);        
          };

          // read in the file as a data URL so we can parse the base64-encoded string
          reader.readAsDataURL(myFile.files[0]);
          ```
      parameters:
        - id: base64File
          description: Facultatif. Fichier. pptx encodé en base64. La valeur par défaut est null.
          type:
            - string
  - uid: 'powerpoint!PowerPoint.run:function(1)'
    summary: 'Exécute un script de commandes qui effectue des actions sur le modèle objet PowerPoint, à l’aide d’un nouveau RequestContext. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.'
    name: PowerPoint.run(batch)
    fullName: PowerPoint.run(batch)
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~0:complex'
        description: ''
      parameters:
        - id: batch
          description: "Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de «\_context. Sync ()\_»). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément."
          type:
            - 'powerpoint!PowerPoint.run~1:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(2)'
    summary: 'Exécute un script de traitement par lots qui effectue des actions sur le modèle objet PowerPoint, à l’aide de RequestContext d’un objet API créé précédemment. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.'
    name: 'PowerPoint.run(object, batch)'
    fullName: 'PowerPoint.run(object, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~2:complex'
        description: ''
      parameters:
        - id: object
          description: "Objet d’API créé précédemment. Le lot utilise le même RequestContext que l’objet transmis, ce qui signifie que toute modification apportée à l’objet est sélectionnée par «\_Context. Sync ()\_»."
          type:
            - 'powerpoint!OfficeExtension.ClientObject:class'
        - id: batch
          description: "Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de «\_context. Sync ()\_»). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément."
          type:
            - 'powerpoint!PowerPoint.run~3:complex'
      typeParameters:
        - id: T
  - uid: 'powerpoint!PowerPoint.run:function(3)'
    summary: 'Exécute un script de traitement par lots qui effectue des actions sur le modèle objet PowerPoint, à l’aide de RequestContext des objets d’API créés précédemment.'
    name: 'PowerPoint.run(objects, batch)'
    fullName: 'PowerPoint.run(objects, batch)'
    langs:
      - typeScript
    type: function
    syntax:
      content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
      return:
        type:
          - 'powerpoint!PowerPoint.run~4:complex'
        description: ''
      parameters:
        - id: objects
          description: "Tableau d’objets d’API créés précédemment. Le tableau est validé afin de s’assurer que tous les objets partagent le même contexte. Le lot utilisera RequestContext partagé, ce qui signifie que les modifications apportées à ces objets seront récupérées par «\_Context. Sync ()\_»."
          type:
            - 'powerpoint!PowerPoint.run~5:complex'
        - id: batch
          description: "Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de «\_context. Sync ()\_»). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément."
          type:
            - 'powerpoint!PowerPoint.run~6:complex'
      typeParameters:
        - id: T
references:
  - uid: 'powerpoint!PowerPoint.Application:class'
    name: PowerPoint.Application
  - uid: 'powerpoint!PowerPoint.createPresentation~0:complex'
    name: Promise<void>
    fullName: Promise<void>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <void>
        fullName: <void>
  - uid: 'powerpoint!PowerPoint.ErrorCodes:enum'
    name: PowerPoint.ErrorCodes
  - uid: 'powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface'
    name: PowerPoint.Interfaces.CollectionLoadOptions
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationData:interface'
    name: PowerPoint.Interfaces.PresentationData
  - uid: 'powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface'
    name: PowerPoint.Interfaces.PresentationLoadOptions
  - uid: 'powerpoint!PowerPoint.Presentation:class'
    name: PowerPoint.Presentation
  - uid: 'powerpoint!PowerPoint.RequestContext:class'
    name: PowerPoint.RequestContext
  - uid: 'powerpoint!PowerPoint.run~0:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~1:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~2:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'powerpoint!PowerPoint.run~3:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~4:complex'
    name: OfficeExtension.IPromise<T>
    fullName: OfficeExtension.IPromise<T>
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>
  - uid: 'powerpoint!PowerPoint.run~5:complex'
    name: 'OfficeExtension.ClientObject[]'
    fullName: 'OfficeExtension.ClientObject[]'
    spec.typeScript:
      - uid: 'powerpoint!OfficeExtension.ClientObject:class'
        name: OfficeExtension.ClientObject
        fullName: OfficeExtension.ClientObject
      - name: '[]'
        fullName: '[]'
  - uid: 'powerpoint!PowerPoint.run~6:complex'
    name: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    fullName: '(context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>'
    spec.typeScript:
      - name: '(context: '
        fullName: '(context: '
      - uid: 'powerpoint!PowerPoint.RequestContext:class'
        name: PowerPoint.RequestContext
        fullName: PowerPoint.RequestContext
      - name: ') => '
        fullName: ') => '
      - uid: 'powerpoint!OfficeExtension.IPromise:type'
        name: OfficeExtension.IPromise
        fullName: OfficeExtension.IPromise
      - name: <T>
        fullName: <T>