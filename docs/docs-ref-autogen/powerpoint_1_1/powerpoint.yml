### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionData:interface
- powerpoint!PowerPoint.Interfaces.SlideCollectionUpdateData:interface
- powerpoint!PowerPoint.Interfaces.SlideData:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Crée et ouvre une nouvelle présentation. Éventuellement, la présentation peut être prérepxée avec un fichier .pptx codé en base 64.


    \[[Ensemble d'API : PowerPointApi 1.1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Facultatif. Fichier .pptx codé en base 64. La valeur par défaut est Null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Exécute un script de lot qui effectue des actions sur le modèle objet PowerPoint, à l'aide d'un nouveau RequestContext. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l'exécution sont libérés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (généralement, le résultat de « context.sync() »). Le paramètre de contexte facilite les demandes à l'application PowerPoint. Étant donné que le add-in Office et l'application PowerPoint s'exécutent dans deux processus différents, RequestContext est nécessaire pour accéder au modèle objet PowerPoint à partir du add-in.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Exécute un script de lot qui effectue des actions sur le modèle objet PowerPoint, à l'aide de RequestContext d'un objet API précédemment créé. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l'exécution sont libérés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: object
      description: Objet API précédemment créé. Le lot utilise le même RequestContext que l'objet transmis, ce qui signifie que toutes les modifications appliquées à l'objet seront reprises par « context.sync() ».
      type: <xref uid="office!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (généralement, le résultat de « context.sync() »). Le paramètre de contexte facilite les demandes à l'application PowerPoint. Étant donné que le add-in Office et l'application PowerPoint s'exécutent dans deux processus différents, RequestContext est nécessaire pour accéder au modèle objet PowerPoint à partir du add-in.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Exécute un script de lot qui effectue des actions sur le modèle objet PowerPoint, à l'aide du RequestContext des objets API précédemment créés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => Promise<T>): Promise<T>;'
    parameters:
    - id: objects
      description: Tableau d'objets API précédemment créés. Le tableau est validé pour s'assurer que tous les objets partagent le même contexte. Le lot utilise ce requestcontext partagé, ce qui signifie que toutes les modifications appliquées à ces objets seront reprises par « context.sync() ».
      type: <xref uid="office!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (généralement, le résultat de « context.sync() »). Le paramètre de contexte facilite les demandes à l’application PowerPoint. Étant donné que le add-in Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est nécessaire pour accéder au modèle objet PowerPoint à partir du add-in.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; Promise&lt;T&gt;'
    return:
      type: Promise&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: d861d051ae28d28f7265abea44b31c620518164a
  ms.sourcegitcommit: f7c5207ef96c4f6034fcb1b48e1b0036abf4fccc
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 04/16/2021
  ms.locfileid: "51877261"
