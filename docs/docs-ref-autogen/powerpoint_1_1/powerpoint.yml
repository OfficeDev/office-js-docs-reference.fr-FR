### YamlMime:TSPackage
uid: powerpoint!
name: powerpoint
type: package
summary: ''
classes:
- powerpoint!PowerPoint.Application:class
- powerpoint!PowerPoint.Presentation:class
- powerpoint!PowerPoint.RequestContext:class
enums:
- powerpoint!PowerPoint.ErrorCodes:enum
interfaces:
- powerpoint!PowerPoint.Interfaces.CollectionLoadOptions:interface
- powerpoint!PowerPoint.Interfaces.PresentationData:interface
- powerpoint!PowerPoint.Interfaces.PresentationLoadOptions:interface
functions:
- name: PowerPoint.createPresentation(base64File)
  uid: powerpoint!PowerPoint.createPresentation:function(1)
  package: powerpoint!
  summary: >-
    Crée et ouvre une nouvelle présentation. Si vous le souhaitez, la présentation peut être pré-renseignée avec un fichier. pptx codé en base64.


    \[[Ensemble d’API : PowerPointApi 1,1](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function createPresentation(base64File?: string): Promise<void>;'
    parameters:
    - id: base64File
      description: Facultatif. Fichier. pptx encodé en base64. La valeur par défaut est null.
      type: string
    return:
      type: Promise&lt;void&gt;
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\nvar myFile = document.getElementById(\"file\");\nvar reader = new FileReader();\n\nreader.onload = function (event) {\n    // strip off the metadata before the base64-encoded string\n    var startIndex = event.target.result.indexOf(\"base64,\");\n    var copyBase64 = event.target.result.substr(startIndex + 7);\n\n    PowerPoint.createPresentation(copyBase64);        \n};\n\n// read in the file as a data URL so we can parse the base64-encoded string\nreader.readAsDataURL(myFile.files[0]);\n```"
- name: PowerPoint.run(batch)
  uid: powerpoint!PowerPoint.run:function(1)
  package: powerpoint!
  summary: Exécute un script de commandes qui effectue des actions sur le modèle objet PowerPoint, à l’aide d’un nouveau RequestContext. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(object, batch)
  uid: powerpoint!PowerPoint.run:function(2)
  package: powerpoint!
  summary: Exécute un script de traitement par lots qui effectue des actions sur le modèle objet PowerPoint, à l’aide de RequestContext d’un objet API créé précédemment. Lorsque la promesse est résolue, tous les objets suivis qui ont été automatiquement alloués lors de l’exécution seront publiés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(object: OfficeExtension.ClientObject, batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: object
      description: Objet d’API créé précédemment. Le lot utilise le même RequestContext que l’objet transmis, ce qui signifie que toute modification apportée à l’objet est sélectionnée par « Context. Sync () ».
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
- name: PowerPoint.run(objects, batch)
  uid: powerpoint!PowerPoint.run:function(3)
  package: powerpoint!
  summary: Exécute un script de traitement par lots qui effectue des actions sur le modèle objet PowerPoint, à l’aide de RequestContext des objets d’API créés précédemment.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function run<T>(objects: OfficeExtension.ClientObject[], batch: (context: PowerPoint.RequestContext) => OfficeExtension.IPromise<T>): OfficeExtension.IPromise<T>;'
    parameters:
    - id: objects
      description: Tableau d’objets d’API créés précédemment. Le tableau est validé afin de s’assurer que tous les objets partagent le même contexte. Le lot utilisera RequestContext partagé, ce qui signifie que les modifications apportées à ces objets seront récupérées par « Context. Sync () ».
      type: <xref uid="powerpoint!OfficeExtension.ClientObject:class" />[]
    - id: batch
      description: Fonction qui prend un RequestContext et renvoie une promesse (en général, uniquement le résultat de « context. Sync () »). Le paramètre context facilite les demandes à l’application PowerPoint. Étant donné que le complément Office et l’application PowerPoint s’exécutent dans deux processus différents, RequestContext est requis pour accéder au modèle objet PowerPoint à partir du complément.
      type: '(context: <xref uid="powerpoint!PowerPoint.RequestContext:class" />) =&gt; <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;'
    return:
      type: <xref uid="powerpoint!OfficeExtension.IPromise:type" />&lt;T&gt;
      description: ''
metadata:
  ms.openlocfilehash: 3e5b024651dd5d1d211168d7cd1339dd58b6d7bd
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49263644"
