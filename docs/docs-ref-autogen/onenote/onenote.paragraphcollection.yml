### YamlMime:UniversalReference
ms.openlocfilehash: 29046058824cff0af67041e902c0429e7859ef9c
ms.sourcegitcommit: 2dcedf6deec4167dca476a42dad411e28cc92a97
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 01/23/2019
ms.locfileid: "29384460"
items:
- uid: onenote.OneNote.ParagraphCollection
  summary: >-
    <span data-ttu-id="d92fb-101">Représente une collection d’objets Paragraph.</span><span class="sxs-lookup"><span data-stu-id="d92fb-101">Represents a collection of Paragraph objects.</span></span>


    <span data-ttu-id="d92fb-102">\[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d92fb-102">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: OneNote.ParagraphCollection
  fullName: OneNote.ParagraphCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.ParagraphCollection.context
  - onenote.OneNote.ParagraphCollection.count
  - onenote.OneNote.ParagraphCollection.getItem
  - onenote.OneNote.ParagraphCollection.getItemAt
  - onenote.OneNote.ParagraphCollection.items
  - onenote.OneNote.ParagraphCollection.load
  - onenote.OneNote.ParagraphCollection.toJSON
  - onenote.OneNote.ParagraphCollection.track
  - onenote.OneNote.ParagraphCollection.untrack
- uid: onenote.OneNote.ParagraphCollection.context
  summary: <span data-ttu-id="d92fb-103">Contexte de la requête associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="d92fb-103">The request context associated with the object.</span></span> <span data-ttu-id="d92fb-104">Il connecte processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="d92fb-104">This connects the add-in's process to the Office host application's process.</span></span>
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.ParagraphCollection.count
  summary: >-
    <span data-ttu-id="d92fb-p102">Renvoie le nombre de paragraphes dans la page. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="d92fb-p102">Returns the number of paragraphs in the page. Read-only.</span></span>


    <span data-ttu-id="d92fb-107">\[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d92fb-107">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.ParagraphCollection.getItem
  summary: >-
    <span data-ttu-id="d92fb-p103">Obtient un objet Paragraph en fonction de son ID ou de son index dans la collection. En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="d92fb-p103">Gets a Paragraph object by ID or by its index in the collection. Read-only.</span></span>


    <span data-ttu-id="d92fb-110">\[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d92fb-110">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getItem(index)
  fullName: getItem
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(index: number | string): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
    parameters:
    - id: index
      description: <span data-ttu-id="d92fb-111">ID ou emplacement d’index de l’objet Paragraph dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d92fb-111">The ID of the Paragraph object, or the index location of the Paragraph object in the collection.</span></span>
      type:
      - number | string
- uid: onenote.OneNote.ParagraphCollection.getItemAt
  summary: >-
    <span data-ttu-id="d92fb-112">Obtient un paragraphe en fonction de sa position dans la collection.</span><span class="sxs-lookup"><span data-stu-id="d92fb-112">Gets a paragraph on its position in the collection.</span></span>


    <span data-ttu-id="d92fb-113">\[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="d92fb-113">\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \]</span></span>
  name: getItemAt(index)
  fullName: getItemAt
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"d92fb-114\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-114\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its Outline's first paragraph.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the type and richText.text property of this paragraph.\n    firstParagraph.load(\"id,type\");\n\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            // Write text from paragraph to console\n            console.log(\n                \"First Paragraph found with id : \" + \n                firstParagraph.id + \" and type \" + firstParagraph.type);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
    parameters:
    - id: index
      description: <span data-ttu-id="d92fb-p104">Valeur d’indice de l’objet à récupérer. Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="d92fb-p104">Index value of the object to be retrieved. Zero-indexed.</span></span>
      type:
      - number
- uid: onenote.OneNote.ParagraphCollection.items
  summary: <span data-ttu-id="d92fb-117">Obtient l’enfant chargé éléments dans cette collection.</span><span class="sxs-lookup"><span data-stu-id="d92fb-117">Gets the loaded child items in this collection.</span></span>
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: OneNote.Paragraph[];'
    return:
      type:
      - OneNote.Paragraph[]
- uid: onenote.OneNote.ParagraphCollection.load
  summary: <span data-ttu-id="d92fb-118">Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées.</span><span class="sxs-lookup"><span data-stu-id="d92fb-118">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="d92fb-119">Vous devez appeler « context.sync() » avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="d92fb-119">You must call "context.sync()" before reading the properties.</span></span>
  remarks: "<span data-ttu-id=\"d92fb-120\">Outre cette signature, cette méthode présente les signatures suivantes :</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-120\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"d92fb-121\">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-121\">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"d92fb-122\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`-Uniquement disponible sur les types de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-122\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"d92fb-123\">Il est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-123\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"d92fb-124\">Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-124\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"d92fb-125\">Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-125\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"d92fb-126\">Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-126\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>\n#### <a name=\"examples\"></a><span data-ttu-id=\"d92fb-127\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"d92fb-127\">Examples</span></span>\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its Outline's first paragraph.\n    var pageContent = pageContents.getItem(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    \n    // Queue a command to load the id and type of each paragraph.\n    paragraphs.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            var firstParagraph = paragraphs.items[0];\n            // Write text from first paragraph to console\n            console.log(\n                \"First Paragraph found with id : \" + \n                firstParagraph.id + \" and type \" + firstParagraph.type);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page, and then get its outline's paragraphs.\n    var outlinePageContents = ;\n    var paragraphs = ;\n    var richTextParagraphs = ;\n    // Queue a command to load the id and type of each page content in the outline.\n    pageContents.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            // Load all page contents of type Outline\n            $.each(pageContents.items, function(index, pageContent) {\n                if(pageContent.type == 'Outline')\n                {\n                    pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');\n                    outlinePageContents.push(pageContent);\n                }\n            });\n            return context.sync();\n        })\n        .then(function () {\n            // Load all rich text paragraphs across outlines\n            $.each(outlinePageContents, function(index, outlinePageContent) {\n                var outline = outlinePageContent.outline;\n                paragraphs = paragraphs.concat(outline.paragraphs.items);\n            });\n            $.each(paragraphs, function(index, paragraph) {\n                if(paragraph.type == 'RichText')\n                {\n                    richTextParagraphs.push(paragraph);\n                    paragraph.load(\"id,richText/text\");\n                }\n            });\n            return context.sync();\n        })\n        .then(function () {\n            // Display all rich text paragraphs to the console\n            $.each(richTextParagraphs, function(index, richTextParagraph) {\n                var richText = richTextParagraph.richText;\n                console.log(\n                    \"Paragraph found with richtext content : \" + \n                    richText.text + \" and richtext id : \" + richText.id);\n            });\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
      description: ''
    parameters:
    - id: option
      description: <span data-ttu-id="d92fb-128">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="d92fb-128">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
      type:
      - string | string[]
- uid: onenote.OneNote.ParagraphCollection.toJSON
  summary: <span data-ttu-id="d92fb-129">Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->.</span><span class="sxs-lookup"><span data-stu-id="d92fb-129">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`<!-- -->.</span></span> <span data-ttu-id="d92fb-130">(`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’original `OneNote.ParagraphCollection` objet est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `OneNote.Interfaces.ParagraphCollectionData` <!-- -->) qui contient un tableau « éléments » avec copies superficielles de toutes les propriétés chargées à partir des éléments de la collection.</span><span class="sxs-lookup"><span data-stu-id="d92fb-130">(`JSON.stringify`<!-- -->, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `OneNote.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ParagraphCollectionData`<!-- -->) that contains an "items" array with shallow copies of any loaded properties from the collection's items.</span></span>
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
    return:
      type:
      - onenote.OneNote.Interfaces.ParagraphCollectionData
      description: ''
- uid: onenote.OneNote.ParagraphCollection.track
  summary: <span data-ttu-id="d92fb-131">Suivre l’objet pour l’ajustement automatique selon entourant les modifications dans le document.</span><span class="sxs-lookup"><span data-stu-id="d92fb-131">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id="d92fb-132">Cet appel est une abréviation de context.trackedObjects.add(thisObject).</span><span class="sxs-lookup"><span data-stu-id="d92fb-132">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id="d92fb-133">Si vous utilisez cet objet dans les appels de « .sync » et en dehors de l’exécution séquentielle d’un lot de « .run » et obtenir une erreur « InvalidObjectPath » lors de la définition d’une propriété ou d’appeler une méthode sur l’objet, vous devez avoir ajouté l’objet à l’objet suivi collection lorsque l’objet a été créé tout d’abord.</span><span class="sxs-lookup"><span data-stu-id="d92fb-133">If you are using this object across ".sync" calls and outside the sequential execution of a ".run" batch, and get an "InvalidObjectPath" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
      description: ''
- uid: onenote.OneNote.ParagraphCollection.untrack
  summary: <span data-ttu-id="d92fb-134">Version de la mémoire associée à cet objet, si elle a été précédemment suivi.</span><span class="sxs-lookup"><span data-stu-id="d92fb-134">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id="d92fb-135">Cet appel est l’abréviation de context.trackedObjects.remove(thisObject).</span><span class="sxs-lookup"><span data-stu-id="d92fb-135">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id="d92fb-136">Comportant de nombreux objets suivis ralentit l’application hôte, donc pensez à libérer les objets que vous ajoutez, une fois que vous avez terminé les utiliser.</span><span class="sxs-lookup"><span data-stu-id="d92fb-136">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id="d92fb-137">Vous devrez appeler « context.sync() » avant que la version de mémoire prenne effet.</span><span class="sxs-lookup"><span data-stu-id="d92fb-137">You will need to call "context.sync()" before the memory release takes effect.</span></span>
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
      description: ''
