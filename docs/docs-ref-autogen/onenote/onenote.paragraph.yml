### YamlMime:UniversalReference
ms.openlocfilehash: 4c52630b45419372611bc536d65ca00039266082
ms.sourcegitcommit: 3f4a320fa860d05d348c8bdec2295e046a45a34f
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/07/2019
ms.locfileid: "29769686"
items:
- uid: onenote.OneNote.Paragraph
  summary: >-
    Conteneur pour le contenu visible d’une page. Un paragraphe peut contenir n’importe quel type de contenu ParagraphType.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.Paragraph
  fullName: OneNote.Paragraph
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Paragraph.addNoteTag
  - onenote.OneNote.Paragraph.context
  - onenote.OneNote.Paragraph.delete
  - onenote.OneNote.Paragraph.getParagraphInfo
  - onenote.OneNote.Paragraph.id
  - onenote.OneNote.Paragraph.image
  - onenote.OneNote.Paragraph.inkWords
  - onenote.OneNote.Paragraph.insertHtmlAsSibling
  - onenote.OneNote.Paragraph.insertImageAsSibling
  - onenote.OneNote.Paragraph.insertRichTextAsSibling
  - onenote.OneNote.Paragraph.insertTableAsSibling
  - onenote.OneNote.Paragraph.load
  - onenote.OneNote.Paragraph.outline
  - onenote.OneNote.Paragraph.paragraphs
  - onenote.OneNote.Paragraph.parentParagraph
  - onenote.OneNote.Paragraph.parentParagraphOrNull
  - onenote.OneNote.Paragraph.parentTableCell
  - onenote.OneNote.Paragraph.parentTableCellOrNull
  - onenote.OneNote.Paragraph.richText
  - onenote.OneNote.Paragraph.set
  - onenote.OneNote.Paragraph.table
  - onenote.OneNote.Paragraph.toJSON
  - onenote.OneNote.Paragraph.track
  - onenote.OneNote.Paragraph.type
  - onenote.OneNote.Paragraph.untrack
- uid: onenote.OneNote.Paragraph.addNoteTag
  summary: >-
    Ajoutez NoteTag au paragraphe.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: addNoteTag(type, status)
  fullName: addNoteTag
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addNoteTag(type: OneNote.NoteTagType, status: OneNote.NoteTagStatus): OneNote.NoteTag;'
    return:
      type:
      - onenote.OneNote.NoteTag
      description: ''
    parameters:
    - id: type
      description: Le type de la NoteTag.
      type:
      - onenote.OneNote.NoteTagType
    - id: status
      description: L’état de la NoteTag.
      type:
      - onenote.OneNote.NoteTagStatus
- uid: onenote.OneNote.Paragraph.context
  summary: Contexte de la requête associé à l’objet. Il connecte processus du complément au processus de l’application hôte Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.Paragraph.delete
  summary: >-
    Supprime le paragraphe.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: delete()
  fullName: delete
  langs:
  - typeScript
  type: method
  syntax:
    content: 'delete(): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    \n    var paragraphs = pageContent.outline.paragraphs;\n    \n    var firstParagraph = paragraphs.getItemAt(0);\n    \n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Queue a command to delete the first paragraph                 \n            firstParagraph.delete();\n            \n            // Run the command to delete it\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- uid: onenote.OneNote.Paragraph.getParagraphInfo
  summary: >-
    Obtenir des informations sur la liste du paragraphe


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getParagraphInfo()
  fullName: getParagraphInfo
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getParagraphInfo(): OfficeExtension.ClientResult<OneNote.ParagraphInfo>;'
    return:
      type:
      - OfficeExtension.ClientResult<OneNote.ParagraphInfo>
      description: ''
- uid: onenote.OneNote.Paragraph.id
  summary: >-
    Obtient l’ID de l’objet Paragraph. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Paragraph.image
  summary: >-
    Renvoie l’objet Image dans le paragraphe. Renvoie une exception si ParagraphType n’est pas défini sur Image. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: image
  fullName: image
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly image: OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
- uid: onenote.OneNote.Paragraph.inkWords
  summary: >-
    Obtient la collection Ink dans le paragraphe. Renvoie une exception si ParagraphType n’est pas défini sur Ink. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: inkWords
  fullName: inkWords
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly inkWords: OneNote.InkWordCollection;'
    return:
      type:
      - onenote.OneNote.InkWordCollection
- uid: onenote.OneNote.Paragraph.insertHtmlAsSibling
  summary: >-
    Insère le contenu HTML spécifié.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: insertHtmlAsSibling(insertLocation, html)
  fullName: insertHtmlAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertHtmlAsSibling(insertLocation: OneNote.InsertLocation, html: string): void;'
    return:
      type:
      - void
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertHtmlAsSibling(\"Before\", \"<p>ContentBeforeFirstParagraph</p>\");\n            firstParagraph.insertHtmlAsSibling(\"After\", \"<p>ContentAfterFirstParagraph</p>\");\n            \n            // Run the command to run inserts\n            return context.sync();\n        });\n))\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: insertLocation
      description: Emplacement du nouveau contenu relatif au paragraphe actif.
      type:
      - onenote.OneNote.InsertLocation
    - id: html
      description: Chaîne HTML qui décrit la présentation visuelle du contenu. Voir [HTML pris en charge](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) pour l’API JavaScript de compléments OneNote.
      type:
      - string
- uid: onenote.OneNote.Paragraph.insertImageAsSibling
  summary: >-
    Insère l’image à l’emplacement d’insertion spécifié.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: insertImageAsSibling(insertLocation, base64EncodedImage, width, height)
  fullName: insertImageAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertImageAsSibling(insertLocation: OneNote.InsertLocation, base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertImageAsSibling(\"Before\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            firstParagraph.insertImageAsSibling(\"After\", \"R0lGODlhDwAPAKECAAAAzMzM/////wAAACwAAAAADwAPAAACIISPeQHsrZ5ModrLlN48CXF8m2iQ3YmmKqVlRtW4MLwWACH+H09wdGltaXplZCBieSBVbGVhZCBTbWFydFNhdmVyIQAAOw==\");\n            \n            // Run the command to insert images\n            return context.sync();\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: insertLocation
      description: Emplacement du tableau relatif au paragraphe actif.
      type:
      - onenote.OneNote.InsertLocation
    - id: base64EncodedImage
      description: Chaîne HTML à ajouter.
      type:
      - string
    - id: width
      description: Facultatif. Largeur de l’unité des points. La valeur par défaut est Null et la largeur d’image est respectée.
      type:
      - number
    - id: height
      description: Facultatif. Hauteur de l’unité des points. La valeur par défaut est Null et la hauteur d’image est respectée.
      type:
      - number
- uid: onenote.OneNote.Paragraph.insertRichTextAsSibling
  summary: >-
    Insère le texte du paragraphe à l’emplacement d’insertion spécifié.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: insertRichTextAsSibling(insertLocation, paragraphText)
  fullName: insertRichTextAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertRichTextAsSibling(insertLocation: OneNote.InsertLocation, paragraphText: string): OneNote.RichText;'
    return:
      type:
      - onenote.OneNote.RichText
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n\n    // Get the first PageContent on the page\n    // Assuming its an outline, get the outline's paragraphs.\n    var pageContent = pageContents.getItemAt(0);\n    var paragraphs = pageContent.outline.paragraphs;\n    var firstParagraph = paragraphs.getItemAt(0);\n\n    // Queue a command to load the id and type of the first paragraph\n    firstParagraph.load(\"id,type\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n\n            // Queue commands to insert before and after the first paragraph\n            firstParagraph.insertRichTextAsSibling(\"Before\", \"Text Appears Before Paragraph\");\n            firstParagraph.insertRichTextAsSibling(\"After\", \"Text Appears After Paragraph\");\n            \n            // Run the command to insert text contents\n            return context.sync();\n        });\n})    \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
    parameters:
    - id: insertLocation
      description: Emplacement du tableau relatif au paragraphe actif.
      type:
      - onenote.OneNote.InsertLocation
    - id: paragraphText
      description: Chaîne HTML à ajouter.
      type:
      - string
- uid: onenote.OneNote.Paragraph.insertTableAsSibling
  summary: >-
    Ajoute un tableau avec le nombre spécifié de lignes et de colonnes avant ou après le paragraphe en cours.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: insertTableAsSibling(insertLocation, rowCount, columnCount, values)
  fullName: insertTableAsSibling
  langs:
  - typeScript
  type: method
  syntax:
    content: 'insertTableAsSibling(insertLocation: OneNote.InsertLocation, rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    return:
      type:
      - OneNote.Table
      description: ''
    parameters:
    - id: insertLocation
      description: Emplacement du tableau relatif au paragraphe actif.
      type:
      - onenote.OneNote.InsertLocation
    - id: rowCount
      description: Nombre de lignes du tableau.
      type:
      - number
    - id: columnCount
      description: Nombre de colonnes du tableau.
      type:
      - number
    - id: values
      description: Tableau 2D facultatif. Les cellules sont remplies si les chaînes correspondantes sont spécifiées dans le tableau.
      type:
      - string[][]
- uid: onenote.OneNote.Paragraph.load
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: "Outre cette signature, cette méthode présente les signatures suivantes :\n\n`load(option?: { select?: string; expand?: string; }): OneNote.Paragraph`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Paragraph`-Uniquement disponible sur les types de la collection. Il est similaire à la signature précédente. Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection. Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Get the collection of pageContent items from the page.\n    var pageContents = context.application.getActivePage().contents;\n    \n    // Queue a command to load the outline property of each pageContent.\n    pageContents.load(\"outline\");\n        \n    // Get the first PageContent on the page, and then get its Outline.\n    var pageContent = pageContents._GetItem(0);\n    var paragraphs = pageContent.outline.paragraphs;\n            \n    // Queue a command to load the id and type of each paragraph.\n    paragraphs.load(\"id,type\");\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            \n            // Write the text.                  \n            $.each(paragraphs.items, function(index, paragraph) {\n                console.log(\"Paragraph type: \" + paragraph.type);\n                console.log(\"Paragraph ID: \" + paragraph.id);\n            });\n        });\n})        \n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```\n```javascript\nOneNote.run(function(context) {\n    var app = context.application;\n    \n    // Gets the active outline\n    var outline = app.getActiveOutline();\n    \n    // load nested paragraphs and their types.\n    outline.load(\"paragraphs/type\");\n    \n    return context.sync().then(function () {\n        var paragraphs = outline.paragraphs.items;\n        \n        var promise;\n        // for each nested paragraphs, load tables only\n        for (var i = 0; i < paragraphs.length; i++) {\n            var paragraph = paragraphs[i];\n            if (paragraph.type == \"Table\") {\n                paragraph.load(\"table/id\");\n                promise =  context.sync().then(function() {\n                    console.log(paragraph.table.id);\n                });\n            }\n        }\n        return promise;\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
    parameters:
    - id: option
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: onenote.OneNote.Paragraph.outline
  summary: >-
    Renvoie l’objet Outline qui contient le paragraphe. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: outline
  fullName: outline
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly outline: OneNote.Outline;'
    return:
      type:
      - onenote.OneNote.Outline
- uid: onenote.OneNote.Paragraph.paragraphs
  summary: >-
    Collection de paragraphes sous ce paragraphe. En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: paragraphs
  fullName: paragraphs
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type:
      - onenote.OneNote.ParagraphCollection
- uid: onenote.OneNote.Paragraph.parentParagraph
  summary: >-
    Obtient l’objet de paragraphe parent. Indique si un paragraphe parent n’existe pas. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: parentParagraph
  fullName: parentParagraph
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentParagraph: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Paragraph.parentParagraphOrNull
  summary: >-
    Obtient l’objet de paragraphe parent. Renvoie la valeur null si un paragraphe parent n’existe pas. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: parentParagraphOrNull
  fullName: parentParagraphOrNull
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentParagraphOrNull: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Paragraph.parentTableCell
  summary: >-
    Obtient l’objet TableCell qui contient le paragraphe s’il en existe un. Si le parent n’est pas un objet TableCell, renvoie ItemNotFound. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: parentTableCell
  fullName: parentTableCell
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCell: OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
- uid: onenote.OneNote.Paragraph.parentTableCellOrNull
  summary: >-
    Obtient l’objet TableCell qui contient le paragraphe s’il en existe un. Si le parent n’est pas un objet TableCell, renvoie la valeur null. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: parentTableCellOrNull
  fullName: parentTableCellOrNull
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly parentTableCellOrNull: OneNote.TableCell;'
    return:
      type:
      - onenote.OneNote.TableCell
- uid: onenote.OneNote.Paragraph.richText
  summary: >-
    Renvoie l’objet RichText du paragraphe. Renvoie une exception si ParagraphType n’est pas défini sur RichText. Lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: richText
  fullName: richText
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly richText: OneNote.RichText;'
    return:
      type:
      - onenote.OneNote.RichText
- uid: onenote.OneNote.Paragraph.set
  summary: Définir plusieurs propriétés d’un objet en même temps. Vous pouvez passer un objet brut avec les propriétés appropriées, ou un autre objet API du même type.
  remarks: >-
    Cette méthode a la signature supplémentaire suivante :


    `set(properties: OneNote.Paragraph): void`
  name: set(properties, options)
  fullName: set
  langs:
  - typeScript
  type: method
  syntax:
    content: 'set(properties: Interfaces.ParagraphUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: properties
      description: Un objet JavaScript avec des propriétés qui sont structurés isomorphically pour les propriétés de l’objet sur lequel la méthode est appelée.
      type:
      - Interfaces.ParagraphUpdateData
    - id: options
      description: Fournit une option permettant de supprimer des erreurs si l’objet propriétés tente de définir des propriétés en lecture seule.
      type:
      - office.OfficeExtension.UpdateOptions
- uid: onenote.OneNote.Paragraph.table
  summary: >-
    Obtient l’objet Table dans le paragraphe. Renvoie une exception si ParagraphType n’est pas défini sur Table. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: table
  fullName: table
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly table: OneNote.Table;'
    return:
      type:
      - OneNote.Table
- uid: onenote.OneNote.Paragraph.toJSON
  summary: Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’objet OneNote.Paragraph d’origine est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `OneNote.Interfaces.ParagraphData` <!-- -->) qui contient des copies superficielles de toutes les propriétés enfant chargé à partir de l’objet d’origine.
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ParagraphData;'
    return:
      type:
      - onenote.OneNote.Interfaces.ParagraphData
      description: ''
- uid: onenote.OneNote.Paragraph.track
  summary: Suivre l’objet pour l’ajustement automatique selon entourant les modifications dans le document. Cet appel est une abréviation de context.trackedObjects.add(thisObject). Si vous utilisez cet objet dans les appels de « .sync » et en dehors de l’exécution séquentielle d’un lot de « .run » et obtenir une erreur « InvalidObjectPath » lors de la définition d’une propriété ou d’appeler une méthode sur l’objet, vous devez avoir ajouté l’objet à l’objet suivi collection lorsque l’objet a été créé tout d’abord.
  name: track()
  fullName: track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
- uid: onenote.OneNote.Paragraph.type
  summary: >-
    Obtient le type de l’objet Paragraph. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: type
  fullName: type
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly type: OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other";'
    return:
      type:
      - OneNote.ParagraphType | "RichText" | "Image" | "Table" | "Ink" | "Other"
- uid: onenote.OneNote.Paragraph.untrack
  summary: Version de la mémoire associée à cet objet, si elle a été précédemment suivi. Cet appel est l’abréviation de context.trackedObjects.remove(thisObject). Comportant de nombreux objets suivis ralentit l’application hôte, donc pensez à libérer les objets que vous ajoutez, une fois que vous avez terminé les utiliser. Vous devrez appeler « context.sync() » avant que la version de mémoire prenne effet.
  name: untrack()
  fullName: untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
      description: ''
