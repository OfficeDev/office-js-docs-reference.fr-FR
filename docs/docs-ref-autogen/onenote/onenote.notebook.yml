### YamlMime:UniversalReference
ms.openlocfilehash: 89f4a77f2bfbc2d9ab381b8f3958facb52b1dc6a
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29981730"
items:
- uid: onenote.OneNote.Notebook
  summary: >-
    Représente un bloc-notes OneNote. Les blocs-notes contiennent des groupes de sections et des sections.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.Notebook
  fullName: OneNote.Notebook
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Notebook.addSection
  - onenote.OneNote.Notebook.addSectionGroup
  - onenote.OneNote.Notebook.baseUrl
  - onenote.OneNote.Notebook.clientUrl
  - onenote.OneNote.Notebook.context
  - onenote.OneNote.Notebook.getRestApiId
  - onenote.OneNote.Notebook.id
  - onenote.OneNote.Notebook.isVirtual
  - onenote.OneNote.Notebook.load
  - onenote.OneNote.Notebook.load_1
  - onenote.OneNote.Notebook.load_2
  - onenote.OneNote.Notebook.name
  - onenote.OneNote.Notebook.sectionGroups
  - onenote.OneNote.Notebook.sections
  - onenote.OneNote.Notebook.toJSON
  - onenote.OneNote.Notebook.track
  - onenote.OneNote.Notebook.untrack
- uid: onenote.OneNote.Notebook.addSection
  summary: >-
    Ajoute une nouvelle section à la fin du bloc-notes.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: addSection(name)
  fullName: addSection(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addSection(name: string): OneNote.Section;'
    return:
      type:
      - onenote.OneNote.Section
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Gets the active notebook.\n    var notebook = context.application.getActiveNotebook();\n\n    // Queue a command to add a new section. \n    var section = notebook.addSection(\"Sample section\");\n    \n    // Queue a command to load the new section. This example reads the name property later.\n    section.load(\"name\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function() {\n            console.log(\"New section name is \" + section.name);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
    parameters:
    - id: name
      description: Nom de la nouvelle section.
      type:
      - string
- uid: onenote.OneNote.Notebook.addSectionGroup
  summary: >-
    Ajoute un nouveau groupe de sections à la fin du bloc-notes.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: addSectionGroup(name)
  fullName: addSectionGroup(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'addSectionGroup(name: string): OneNote.SectionGroup;'
    return:
      type:
      - onenote.OneNote.SectionGroup
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n\n    // Gets the active notebook.\n    var notebook = context.application.getActiveNotebook();\n\n    // Queue a command to add a new section group.\n    var sectionGroup = notebook.addSectionGroup(\"Sample section group\");\n\n    // Queue a command to load the new section group.\n    sectionGroup.load();\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function() {\n            console.log(\"New section group name is \" + sectionGroup.name);\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
    parameters:
    - id: name
      description: Nom de la nouvelle section.
      type:
      - string
- uid: onenote.OneNote.Notebook.baseUrl
  summary: >-
    L’url du site que cet ordinateur portable se trouve. En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: baseUrl
  fullName: baseUrl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly baseUrl: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Notebook.clientUrl
  summary: >-
    URL du client du bloc-notes. En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: clientUrl
  fullName: clientUrl
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly clientUrl: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Notebook.context
  summary: Contexte de la requête associé à l’objet. Il connecte processus du complément au processus de l’application hôte Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: onenote.OneNote.Notebook.getRestApiId
  summary: >-
    Obtient l’ID d’API REST.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getRestApiId()
  fullName: getRestApiId()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getRestApiId(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function(ctx){\n    // Get the current notebook.         \n    var notebook = ctx.application.getActiveNotebook();\n    var restApiId = notebook.getRestApiId();\n\n    return ctx.sync().\n        then(function(){\n            console.log(\"The REST API ID is \" + restApiId.value);\n            // Note that the REST API ID isn't all you need to interact with the OneNote REST API. \n            // This is only required for SharePoint notebooks. baseUrl will be null for OneDrive notebooks.\n            // For SharePoint notebooks, the notebook baseUrl should be used to talk to the OneNote REST API\n            // according to the OneNote Development Blog.\n            // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/\n        });\n});\n```"
- uid: onenote.OneNote.Notebook.id
  summary: >-
    Obtient l’ID du bloc-notes. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: id
  fullName: id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Notebook.isVirtual
  summary: >-
    True si l’ordinateur portable n’est pas créé par l’utilisateur (par exemple, « Sections déplacées »). En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.2](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: isVirtual
  fullName: isVirtual
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly isVirtual: boolean;'
    return:
      type:
      - boolean
- uid: onenote.OneNote.Notebook.load
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: >-
    Outre cette signature, cette méthode présente les signatures suivantes :


    `load(option?: string | string[]): OneNote.Notebook`-Où option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.


    `load(option?: { select?: string; expand?: string; }): OneNote.Notebook`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Notebook`-Uniquement disponible sur les types de la collection. Il est similaire à la signature précédente. Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection. Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OneNote.Interfaces.NotebookLoadOptions): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - onenote.OneNote.Interfaces.NotebookLoadOptions
- uid: onenote.OneNote.Notebook.load_1
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler `context.sync()` avant de lire les propriétés.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the current notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('baseUrl');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            console.log(\"Base url: \" + notebook.baseUrl);\n            // This is only required for SharePoint notebooks, and will be null for OneDrive notebooks.\n            // This baseUrl should be used to talk to OneNote REST APIs according to the OneNote Development Blog.\n            // https://blogs.msdn.microsoft.com/onenotedev/2015/06/11/and-sharepoint-makes-three/\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the current notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('id');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            console.log(\"Notebook ID: \" + notebook.id);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n        \n    // Get the current notebook.\n    var notebook = context.application.getActiveNotebook();\n            \n    // Queue a command to load the notebook. \n    // For best performance, request specific properties.           \n    notebook.load('name');\n            \n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function () {\n            console.log(\"Notebook name: \" + notebook.name);\n            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n\n    // Get the section groups in the notebook. \n    var sectionGroups = context.application.getActiveNotebook().sectionGroups;\n\n    // Queue a command to load the sectionGroups. \n    sectionGroups.load(\"name\");\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function() {\n            $.each(sectionGroups.items, function(index, sectionGroup) {\n                console.log(\"Section group name: \" + sectionGroup.name);\n            });\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function (context) {\n\n    // Gets the active notebook.\n    var notebook = context.application.getActiveNotebook();\n    \n    // Queue a command to get immediate child sections of the notebook. \n    var childSections = notebook.sections;\n\n    // Queue a command to load the childSections. \n    context.load(childSections);\n\n    // Run the queued commands, and return a promise to indicate task completion.\n    return context.sync()\n        .then(function() {\n            $.each(childSections.items, function(index, childSection) {\n                console.log(\"Immediate child section name: \" + childSection.name);\n            });            \n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});   \n```"
    parameters:
    - id: propertyNames
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: onenote.OneNote.Notebook.load_2
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler `context.sync()` avant de lire les propriétés.
  name: load(propertyNamesAndPaths)
  fullName: load(propertyNamesAndPaths)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
    parameters:
    - id: propertyNamesAndPaths
      description: Où propertyNamesAndPaths.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.
      type:
      - '{ select?: string; expand?: string; }'
- uid: onenote.OneNote.Notebook.name
  summary: >-
    Obtient le nom du bloc-notes. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: name
  fullName: name
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly name: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Notebook.sectionGroups
  summary: >-
    Groupes de sections dans le bloc-notes. En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: sectionGroups
  fullName: sectionGroups
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sectionGroups: OneNote.SectionGroupCollection;'
    return:
      type:
      - onenote.OneNote.SectionGroupCollection
- uid: onenote.OneNote.Notebook.sections
  summary: >-
    Sections du bloc-notes. En lecture seule


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: sections
  fullName: sections
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly sections: OneNote.SectionCollection;'
    return:
      type:
      - onenote.OneNote.SectionCollection
- uid: onenote.OneNote.Notebook.toJSON
  summary: Remplace le code JavaScript `toJSON()` méthode afin de fournir une sortie plus utile lorsqu’un objet API est passé à `JSON.stringify()` <!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle le `toJSON` méthode de l’objet qui lui est passé.) Tandis que l’objet OneNote.Notebook d’origine est un objet d’API, la `toJSON` méthode renvoie un objet JavaScript brut (typée en tant que `OneNote.Interfaces.NotebookData` <!-- -->) qui contient des copies superficielles de toutes les propriétés enfant chargé à partir de l’objet d’origine.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.NotebookData;'
    return:
      type:
      - onenote.OneNote.Interfaces.NotebookData
      description: ''
- uid: onenote.OneNote.Notebook.track
  summary: Suivre l’objet pour l’ajustement automatique selon entourant les modifications dans le document. Cet appel est une abréviation de context.trackedObjects.add(thisObject). Si vous utilisez cet objet dans les appels de « .sync » et en dehors de l’exécution séquentielle d’un lot de « .run » et obtenir une erreur « InvalidObjectPath » lors de la définition d’une propriété ou d’appeler une méthode sur l’objet, vous devez avoir ajouté l’objet à l’objet suivi collection lorsque l’objet a été créé tout d’abord.
  name: track()
  fullName: track()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
- uid: onenote.OneNote.Notebook.untrack
  summary: Version de la mémoire associée à cet objet, si elle a été précédemment suivi. Cet appel est l’abréviation de context.trackedObjects.remove(thisObject). Comportant de nombreux objets suivis ralentit l’application hôte, donc pensez à libérer les objets que vous ajoutez, une fois que vous avez terminé les utiliser. Vous devrez appeler « context.sync() » avant que la version de mémoire prenne effet.
  name: untrack()
  fullName: untrack()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.Notebook;'
    return:
      type:
      - onenote.OneNote.Notebook
      description: ''
