### YamlMime:UniversalReference
items:
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    summary: "<span data-ttu-id=\"af9b6-101\">Représente une collection d’objets Paragraph.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-101\">Represents a collection of Paragraph objects.</span></span>\n\n<span data-ttu-id=\"af9b6-102\">\\[[Ensemble d’API\_: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-102\">\\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \\]</span></span>"
    name: OneNote.ParagraphCollection
    fullName: OneNote.ParagraphCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'onenote!OfficeExtension.ClientObject:class'
    package: onenote!
    children:
      - 'onenote!OneNote.ParagraphCollection#context:member'
      - 'onenote!OneNote.ParagraphCollection#count:member'
      - 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
      - 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
      - 'onenote!OneNote.ParagraphCollection#items:member'
      - 'onenote!OneNote.ParagraphCollection#load:member(1)'
      - 'onenote!OneNote.ParagraphCollection#load:member(2)'
      - 'onenote!OneNote.ParagraphCollection#load:member(3)'
      - 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
      - 'onenote!OneNote.ParagraphCollection#track:member(1)'
      - 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
  - uid: 'onenote!OneNote.ParagraphCollection#context:member'
    summary: <span data-ttu-id="af9b6-103">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="af9b6-103">The request context associated with the object.</span></span> <span data-ttu-id="af9b6-104">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="af9b6-104">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'onenote!OneNote.RequestContext:class'
  - uid: 'onenote!OneNote.ParagraphCollection#count:member'
    summary: "<span data-ttu-id=\"af9b6-105\">Renvoie le nombre de paragraphes dans la page.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-105\">Returns the number of paragraphs in the page.</span></span> <span data-ttu-id=\"af9b6-106\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-106\">Read-only.</span></span>\n\n<span data-ttu-id=\"af9b6-107\">\\[[Ensemble d’API\_: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-107\">\\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \\]</span></span>"
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'onenote!OneNote.ParagraphCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"af9b6-108\">Obtient un objet Paragraph en fonction de son ID ou de son index dans la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-108\">Gets a Paragraph object by ID or by its index in the collection.</span></span> <span data-ttu-id=\"af9b6-109\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-109\">Read-only.</span></span>\n\n<span data-ttu-id=\"af9b6-110\">\\[[Ensemble d’API\_: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-110\">\\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \\]</span></span>"
    name: getItem(index)
    fullName: getItem(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(index: number | string): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: ''
      parameters:
        - id: index
          description: '<span data-ttu-id="af9b6-111">ID ou emplacement d’index de l’objet Paragraph dans la collection.</span><span class="sxs-lookup"><span data-stu-id="af9b6-111">The ID of the Paragraph object, or the index location of the Paragraph object in the collection.</span></span>'
          type:
            - number | string
  - uid: 'onenote!OneNote.ParagraphCollection#getItemAt:member(1)'
    summary: "<span data-ttu-id=\"af9b6-112\">Obtient un paragraphe en fonction de sa position dans la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-112\">Gets a paragraph on its position in the collection.</span></span>\n\n<span data-ttu-id=\"af9b6-113\">\\[[Ensemble d’API\_: OneNoteApi 1,1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-113\">\\[ [API set: OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets) \\]</span></span>"
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): OneNote.Paragraph;'
      return:
        type:
          - 'onenote!OneNote.Paragraph:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af9b6-114">Exemples</span><span class="sxs-lookup"><span data-stu-id="af9b6-114">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItemAt(0);
              var paragraphs = pageContent.outline.paragraphs;

              var firstParagraph = paragraphs.getItemAt(0);

              // Queue a command to load the type and richText.text property of this paragraph.
              firstParagraph.load("id,type");


              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Write text from paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          }); 
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="af9b6-115">Valeur d’indice de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="af9b6-115">Index value of the object to be retrieved.</span></span> <span data-ttu-id="af9b6-116">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="af9b6-116">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'onenote!OneNote.ParagraphCollection#items:member'
    summary: <span data-ttu-id="af9b6-117">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="af9b6-117">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: OneNote.Paragraph[];'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection#items~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(1)'
    summary: "<span data-ttu-id=\"af9b6-118\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-118\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"af9b6-119\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-119\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: "<span data-ttu-id=\"af9b6-120\">En plus de cette signature, cette méthode possède les signatures suivantes\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-120\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"af9b6-121\">`load(option?: string | string[]): OneNote.ParagraphCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-121\">`load(option?: string | string[]): OneNote.ParagraphCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>\n\n<span data-ttu-id=\"af9b6-122\">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-122\">`load(option?: { select?: string; expand?: string; }): OneNote.ParagraphCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"af9b6-123\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection`-Uniquement disponible sur les types de collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-123\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.ParagraphCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"af9b6-124\">Elle est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-124\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"af9b6-125\">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-125\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"af9b6-126\">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-126\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"af9b6-127\">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-127\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>"
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OneNote.ParagraphCollection#load~0:complex'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(2)'
    summary: <span data-ttu-id="af9b6-128">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="af9b6-128">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="af9b6-129">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="af9b6-129">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="af9b6-130">Exemples</span><span class="sxs-lookup"><span data-stu-id="af9b6-130">Examples</span></span>

          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its Outline's first paragraph.
              var pageContent = pageContents.getItem(0);
              var paragraphs = pageContent.outline.paragraphs;
              
              // Queue a command to load the id and type of each paragraph.
              paragraphs.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      var firstParagraph = paragraphs.items[0];
                      // Write text from first paragraph to console
                      console.log(
                          "First Paragraph found with id : " + 
                          firstParagraph.id + " and type " + firstParagraph.type);
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          OneNote.run(function (context) {

              // Get the collection of pageContent items from the page.
              var pageContents = context.application.getActivePage().contents;

              // Get the first PageContent on the page, and then get its outline's paragraphs.
              var outlinePageContents = ;
              var paragraphs = ;
              var richTextParagraphs = ;
              // Queue a command to load the id and type of each page content in the outline.
              pageContents.load("id,type");

              // Run the queued commands, and return a promise to indicate task completion.
              return context.sync()
                  .then(function () {
                      // Load all page contents of type Outline
                      $.each(pageContents.items, function(index, pageContent) {
                          if(pageContent.type == 'Outline')
                          {
                              pageContent.load('outline,outline/paragraphs,outline/paragraphs/type');
                              outlinePageContents.push(pageContent);
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Load all rich text paragraphs across outlines
                      $.each(outlinePageContents, function(index, outlinePageContent) {
                          var outline = outlinePageContent.outline;
                          paragraphs = paragraphs.concat(outline.paragraphs.items);
                      });
                      $.each(paragraphs, function(index, paragraph) {
                          if(paragraph.type == 'RichText')
                          {
                              richTextParagraphs.push(paragraph);
                              paragraph.load("id,richText/text");
                          }
                      });
                      return context.sync();
                  })
                  .then(function () {
                      // Display all rich text paragraphs to the console
                      $.each(richTextParagraphs, function(index, richTextParagraph) {
                          var richText = richTextParagraph.richText;
                          console.log(
                              "Paragraph found with richtext content : " + 
                              richText.text + " and richtext id : " + richText.id);
                      });
                      return context.sync();
                  });
          })
          .catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="af9b6-131">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="af9b6-131">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'onenote!OneNote.ParagraphCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'onenote!OfficeExtension.LoadOption:interface'
  - uid: 'onenote!OneNote.ParagraphCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"af9b6-132\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-132\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"af9b6-133\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-133\"></span></span> <span data-ttu-id=\"af9b6-134\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-134\"></span></span><!-- --><span data-ttu-id=\"af9b6-135\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `OneNote.ParagraphCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`OneNote.Interfaces.ParagraphCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-135\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `OneNote.ParagraphCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `OneNote.Interfaces.ParagraphCollectionData`</span></span><!-- --><span data-ttu-id=\"af9b6-136\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-136\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): OneNote.Interfaces.ParagraphCollectionData;'
      return:
        type:
          - 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#track:member(1)'
    summary: "<span data-ttu-id=\"af9b6-137\">Effectuer le suivi de l’objet pour l’ajustement automatique en fonction environnant des modifications dans le document.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-137\">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id=\"af9b6-138\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-138\">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id=\"af9b6-139\">Si vous utilisez cet objet au sein de «\_.sync\_» appels et en dehors de l’exécution séquentielle d’un lot de «\_.run\_» et rencontrez un message d’erreur «\_InvalidObjectPath\_» lors de la définition d’une propriété ou appeler une méthode sur l’objet, vous devez ajouter l’objet à l’objet de suivi collection de sites lors de l’objet a été créé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-139\">If you are using this object across \".sync\" calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>"
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
  - uid: 'onenote!OneNote.ParagraphCollection#untrack:member(1)'
    summary: "<span data-ttu-id=\"af9b6-140\">Publication mémoire associée à cet objet si elle a été précédemment suivie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-140\">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id=\"af9b6-141\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-141\">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id=\"af9b6-142\">Vous rencontrez de nombreux objets suivies ralentit l’application hôte, donc n’oubliez pas de libérer les objets que l'on ajoute, une fois que vous avez terminé à les utiliser.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-142\">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id=\"af9b6-143\">Vous devez appeler «\_context.sync()\_» avant la publication de mémoire prend effet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"af9b6-143\">You will need to call \"context.sync()\" before the memory release takes effect.</span></span>"
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): OneNote.ParagraphCollection;'
      return:
        type:
          - 'onenote!OneNote.ParagraphCollection:class'
        description: ''
references:
  - uid: 'onenote!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'onenote!OneNote.RequestContext:class'
    name: RequestContext
  - uid: 'onenote!OneNote.Paragraph:class'
    name: OneNote.Paragraph
  - uid: 'onenote!OneNote.ParagraphCollection#items~0:complex'
    name: 'OneNote.Paragraph[]'
    fullName: 'OneNote.Paragraph[]'
    spec.typeScript:
      - uid: 'onenote!OneNote.Paragraph:class'
        name: OneNote.Paragraph
        fullName: OneNote.Paragraph
      - name: '[]'
        fullName: '[]'
  - uid: 'onenote!OneNote.ParagraphCollection:class'
    name: OneNote.ParagraphCollection
  - uid: 'onenote!OneNote.ParagraphCollection#load~0:complex'
    name: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions & OneNote.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionLoadOptions:interface'
        name: OneNote.Interfaces.ParagraphCollectionLoadOptions
        fullName: OneNote.Interfaces.ParagraphCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'onenote!OneNote.Interfaces.CollectionLoadOptions:interface'
        name: OneNote.Interfaces.CollectionLoadOptions
        fullName: OneNote.Interfaces.CollectionLoadOptions
  - uid: 'onenote!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'onenote!OneNote.Interfaces.ParagraphCollectionData:interface'
    name: OneNote.Interfaces.ParagraphCollectionData