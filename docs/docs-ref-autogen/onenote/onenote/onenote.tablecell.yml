### YamlMime:TSType
name: OneNote.TableCell
uid: onenote!OneNote.TableCell:class
package: onenote!
fullName: OneNote.TableCell
summary: >-
  Représente une cellule dans un tableau OneNote.


  \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: cellIndex
  uid: onenote!OneNote.TableCell#cellIndex:member
  package: onenote!
  fullName: cellIndex
  summary: >-
    Obtient l’index de la cellule dans la ligne correspondante. En lecture seule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly cellIndex: number;'
    return:
      type: number
- name: context
  uid: onenote!OneNote.TableCell#context:member
  package: onenote!
  fullName: context
  summary: Contexte de demande associé à l’objet. Cela connecte le processus du add-in au processus de l’application hôte Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="onenote!OneNote.RequestContext:class" />
- name: id
  uid: onenote!OneNote.TableCell#id:member
  package: onenote!
  fullName: id
  summary: >-
    Obtient l’ID de la cellule. En lecture seule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: paragraphs
  uid: onenote!OneNote.TableCell#paragraphs:member
  package: onenote!
  fullName: paragraphs
  summary: >-
    Obtient la collection d’objets Paragraph dans TableCell. En lecture seule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly paragraphs: OneNote.ParagraphCollection;'
    return:
      type: <xref uid="onenote!OneNote.ParagraphCollection:class" />
- name: parentRow
  uid: onenote!OneNote.TableCell#parentRow:member
  package: onenote!
  fullName: parentRow
  summary: >-
    Obtient la ligne parent de la cellule. En lecture seule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly parentRow: OneNote.TableRow;'
    return:
      type: <xref uid="onenote!OneNote.TableRow:class" />
- name: rowIndex
  uid: onenote!OneNote.TableCell#rowIndex:member
  package: onenote!
  fullName: rowIndex
  summary: >-
    Obtient l’index de la ligne de la cellule dans le tableau. En lecture seule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly rowIndex: number;'
    return:
      type: number
- name: shadingColor
  uid: onenote!OneNote.TableCell#shadingColor:member
  package: onenote!
  fullName: shadingColor
  summary: >-
    Obtient et définit la couleur d’ombrage de la cellule


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'shadingColor: string;'
    return:
      type: string
methods:
- name: appendHtml(html)
  uid: onenote!OneNote.TableCell#appendHtml:member(1)
  package: onenote!
  fullName: appendHtml(html)
  summary: >-
    Ajoute le code HTML spécifié dans TableCell.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendHtml(html: string): void;'
    parameters:
    - id: html
      description: Chaîne HTML à ajouter. Consultez [le code HTML](https://docs.microsoft.com/office/dev/add-ins/onenote/onenote-add-ins-page-content#supported-html) pris en charge pour l’API JavaScript des applications OneNote.
      type: string
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                cell.appendHtml(\"<p>Hello</p>\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: appendImage(base64EncodedImage, width, height)
  uid: onenote!OneNote.TableCell#appendImage:member(1)
  package: onenote!
  fullName: appendImage(base64EncodedImage, width, height)
  summary: >-
    Ajoute l’image spécifiée à la cellule du tableau.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendImage(base64EncodedImage: string, width: number, height: number): OneNote.Image;'
    parameters:
    - id: base64EncodedImage
      description: Chaîne HTML à ajouter.
      type: string
    - id: width
      description: Facultatif. Largeur de l’unité des points. La valeur par défaut est Null et la largeur d’image est respectée.
      type: number
    - id: height
      description: Facultatif. Hauteur de l’unité des points. La valeur par défaut est Null et la hauteur d’image est respectée.
      type: number
    return:
      type: <xref uid="onenote!OneNote.Image:class" />
      description: ''
- name: appendRichText(paragraphText)
  uid: onenote!OneNote.TableCell#appendRichText:member(1)
  package: onenote!
  fullName: appendRichText(paragraphText)
  summary: >-
    Ajoute le texte spécifié à la cellule du tableau.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendRichText(paragraphText: string): OneNote.RichText;'
    parameters:
    - id: paragraphText
      description: Chaîne HTML à ajouter.
      type: string
    return:
      type: <xref uid="onenote!OneNote.RichText:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    var appendedRichText = null;\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two and add \"Hello\".\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                appendedRichText = cell.appendRichText(\"Hello\");\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: appendTable(rowCount, columnCount, values)
  uid: onenote!OneNote.TableCell#appendTable:member(1)
  package: onenote!
  fullName: appendTable(rowCount, columnCount, values)
  summary: >-
    Ajoute un tableau avec le nombre spécifié de lignes et de colonnes dans une cellule du tableau.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendTable(rowCount: number, columnCount: number, values?: string[][]): OneNote.Table;'
    parameters:
    - id: rowCount
      description: Obligatoire. Nombre de lignes dans le tableau.
      type: number
    - id: columnCount
      description: Obligatoire. Nombre de colonnes dans le tableau.
      type: number
    - id: values
      description: Tableau 2D facultatif. Les cellules sont remplies si les chaînes correspondantes sont spécifiées dans le tableau.
      type: string[][]
    return:
      type: <xref uid="onenote!OneNote.Table:class" />
      description: ''
- name: clear()
  uid: onenote!OneNote.TableCell#clear:member(1)
  package: onenote!
  fullName: clear()
  summary: >-
    Efface le contenu de la cellule.


    \[[Ensemble d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'clear(): void;'
    return:
      type: void
      description: ''
- name: load(option)
  uid: onenote!OneNote.TableCell#load:member(1)
  package: onenote!
  fullName: load(option)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: >-
    Outre cette signature, cette méthode possède les signatures suivantes :


    `load(option?: string | string[]): OneNote.TableCell` - Où l’option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.


    `load(option?: { select?: string; expand?: string; }): OneNote.TableCell` - Where option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.TableCell` - Disponible uniquement sur les types de collection. Il est similaire à la signature précédente. Option.top spécifie le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat. Option.skip spécifie le nombre d’éléments à ignorer et à ne pas inclure dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre d’éléments spécifié.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(option?: OneNote.Interfaces.TableCellLoadOptions): OneNote.TableCell;'
    parameters:
    - id: option
      description: ''
      type: <xref uid="onenote!OneNote.Interfaces.TableCellLoadOptions:interface" />
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: load(propertyNames)
  uid: onenote!OneNote.TableCell#load:member(2)
  package: onenote!
  fullName: load(propertyNames)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): OneNote.TableCell;'
    parameters:
    - id: propertyNames
      description: Chaîne délimitée par des virgules ou tableau de chaînes spécifiant les propriétés à charger.
      type: string | string[]
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load the table cell.\n                ctx.load(cell);\n                ctx.sync().then(function() {\n                    console.log(\"Cell Id: \" + cell.id);\n                    console.log(\"Cell Index: \" + cell.cellIndex);\n                    console.log(\"Cell's Row Index: \" + cell.rowIndex);\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nParentTable, ParentRow, Paragraphs\nOneNote.run(function(ctx) {\n    var app = ctx.application;\n    var outline = app.getActiveOutline();\n    \n    // Queue a command to load outline.paragraphs and their types.\n    ctx.load(outline, \"paragraphs, paragraphs/type\");\n    \n    // Run the queued commands, and return a promise to indicate task completion.\n    return ctx.sync().then(function () {\n        var paragraphs = outline.paragraphs;\n        \n        // for each table, get a table cell at row one and column two.\n        for (var i = 0; i < paragraphs.items.length; i++) {\n            var paragraph = paragraphs.items[i];\n            if (paragraph.type == \"Table\") {\n                var table = paragraph.table;\n                var cell = table.getCell(1 /*Row Index*/, 2 /*Column Index*/);\n                \n                // Queue a command to load parentTable, parentRow and paragraphs of the table cell.\n                ctx.load(cell, \"parentTable, parentRow, paragraphs\");\n                \n                ctx.sync().then(function() {\n                    console.log(\"Parent Table Id: \" + cell.parentTable.id);\n                    console.log(\"Parent Row Id: \" + cell.parentRow.id);\n                    var paragraphs = cell.paragraphs;\n                    \n                    for (var i = 0; i < paragraphs.items.length; i++) {\n                        console.log(\"Paragraph Id: \" + paragraphs.items[i].id);\n                    }\n                });\n            }\n        }\n        return ctx.sync();\n    })\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: onenote!OneNote.TableCell#load:member(3)
  package: onenote!
  fullName: load(propertyNamesAndPaths)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): OneNote.TableCell;'
    parameters:
    - id: propertyNamesAndPaths
      description: Où propertyNamesAndPaths.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et propertyNamesAndPaths.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.
      type: '{ select?: string; expand?: string; }'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: set(properties, options)
  uid: onenote!OneNote.TableCell#set:member(1)
  package: onenote!
  fullName: set(properties, options)
  summary: Définit plusieurs propriétés d’un objet en même temps. Vous pouvez transmettre un objet simple avec les propriétés appropriées ou un autre objet API du même type.
  remarks: >-
    Cette méthode possède la signature supplémentaire suivante :


    `set(properties: OneNote.TableCell): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.TableCellUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Objet JavaScript avec des propriétés structurées de manière isomorphe aux propriétés de l’objet sur lequel la méthode est appelée.
      type: <xref uid="onenote!OneNote.Interfaces.TableCellUpdateData:interface" />
    - id: options
      description: Fournit une option pour supprimer les erreurs si l’objet propriétés tente de définir des propriétés en lecture seule.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: onenote!OneNote.TableCell#set:member(2)
  package: onenote!
  fullName: set(properties)
  summary: Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: OneNote.TableCell): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="onenote!OneNote.TableCell:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: onenote!OneNote.TableCell#toJSON:member(1)
  package: onenote!
  fullName: toJSON()
  summary: Remplace la méthode JavaScript afin de fournir une sortie plus utile lorsqu’un objet `toJSON()` API est transmis à `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est transmis.) Alors que l’objet OneNote.TableCell d’origine est un objet API, la méthode renvoie un objet `toJSON` JavaScript simple (tapé sous la forme `OneNote.Interfaces.TableCellData`<!-- -->) qui contient des copies superficiels de toutes les propriétés enfants chargées à partir de l’objet d’origine.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): OneNote.Interfaces.TableCellData;'
    return:
      type: <xref uid="onenote!OneNote.Interfaces.TableCellData:interface" />
      description: ''
- name: track()
  uid: onenote!OneNote.TableCell#track:member(1)
  package: onenote!
  fullName: track()
  summary: Effectuer le suivi de l’objet pour l’ajustement automatique en fonction environnant des modifications dans le document. Cet appel est abréviations context.trackedObjects.add(thisObject). Si vous utilisez cet objet au sein de « .sync » appels et en dehors de l’exécution séquentielle d’un lot de « .run » et rencontrez un message d’erreur « InvalidObjectPath » lors de la définition d’une propriété ou appeler une méthode sur l’objet, vous devez ajouter l’objet à l’objet de suivi collection de sites lors de l’objet a été créé.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'track(): OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
- name: untrack()
  uid: onenote!OneNote.TableCell#untrack:member(1)
  package: onenote!
  fullName: untrack()
  summary: Publication mémoire associée à cet objet si elle a été précédemment suivie. Cet appel est abréviations context.trackedObjects.add(thisObject). Vous rencontrez de nombreux objets suivies ralentit l’application hôte, donc n’oubliez pas de libérer les objets que l'on ajoute, une fois que vous avez terminé à les utiliser. Vous devez appeler « context.sync() » avant la publication de mémoire prend effet.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'untrack(): OneNote.TableCell;'
    return:
      type: <xref uid="onenote!OneNote.TableCell:class" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 8564407a1246f9419be0ed1743010f56654f8710
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51320040"
