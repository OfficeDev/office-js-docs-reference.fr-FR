### YamlMime:UniversalReference
ms.openlocfilehash: 2fe40ba9fd8069151d0375985dc3c8d38b53a16b
ms.sourcegitcommit: c1149d24b38f20daf9ce690cd0761ec1ceb7333d
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 10/17/2018
ms.locfileid: "25592834"
items:
- uid: onenote.OneNote.Image
  summary: >-
    Représente une image. Une image peut être un enfant direct d’un objet PageContent ou Paragraph.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: OneNote.Image
  fullName: onenote.OneNote.Image
  langs:
  - typeScript
  type: class
  extends:
  - OfficeExtension.ClientObject
  package: onenote
  children:
  - onenote.OneNote.Image.description
  - onenote.OneNote.Image.getBase64Image
  - onenote.OneNote.Image.height
  - onenote.OneNote.Image.hyperlink
  - onenote.OneNote.Image.id
  - onenote.OneNote.Image.load
  - onenote.OneNote.Image.ocrData
  - onenote.OneNote.Image.pageContent
  - onenote.OneNote.Image.paragraph
  - onenote.OneNote.Image.toJSON
  - onenote.OneNote.Image.track
  - onenote.OneNote.Image.untrack
  - onenote.OneNote.Image.width
- uid: onenote.OneNote.Image.description
  summary: >-
    Obtient ou définit la description de l’image.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: description
  fullName: onenote.OneNote.Image.description
  langs:
  - typeScript
  type: property
  syntax:
    content: 'description: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Image.getBase64Image
  summary: >-
    Obtient la représentation binaire encodée en Base64 de l’image. Exemple : données : image / png ; en base64, iVBORw0KGgoAAAANSUhEUgAAADIA...


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: getBase64Image()
  fullName: onenote.OneNote.Image.getBase64Image
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getBase64Image(): OfficeExtension.ClientResult<string>;'
    return:
      type:
      - OfficeExtension.ClientResult<string>
      description: "\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n\nvar image = null;\nvar imageString;\n\nOneNote.run(function(ctx){\n    // Get the current outline.         \n    var outline = ctx.application.getActiveOutline();\n    \n    // Queue a command to load paragraphs and their types. \n    outline.load(\"paragraphs/type\")\n    return ctx.sync().\n        then(function(){\n            for (var i=0; i < outline.paragraphs.items.length; i++)\n            {\n                var paragraph = outline.paragraphs.items[i];\n                if (paragraph.type == \"Image\")\n                {\n                    image = paragraph.image;\n                }\n            }\n        })\n        .then(function(){\n            if (image != null)\n            {\n                imageString = image.getBase64Image();\n                return ctx.sync();\n            }\n        })\n        .then(function(){\n            console.log(imageString);\n        });\n});\n```"
- uid: onenote.OneNote.Image.height
  summary: >-
    Obtient ou définit la hauteur de la disposition de l’image.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: height
  fullName: onenote.OneNote.Image.height
  langs:
  - typeScript
  type: property
  syntax:
    content: 'height: number;'
    return:
      type:
      - number
- uid: onenote.OneNote.Image.hyperlink
  summary: >-
    Obtient ou définit le lien hypertexte de l’image.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: hyperlink
  fullName: onenote.OneNote.Image.hyperlink
  langs:
  - typeScript
  type: property
  syntax:
    content: 'hyperlink: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Image.id
  summary: >-
    Obtient l’ID de l’objet Image. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: id
  fullName: onenote.OneNote.Image.id
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly id: string;'
    return:
      type:
      - string
- uid: onenote.OneNote.Image.load
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: "Outre cette signature, cette méthode présente les signatures suivantes :\n\n`load(option?: { select?: string; expand?: string; }): OneNote.Image`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): OneNote.Image`-Uniquement disponible sur les types de la collection. Il est similaire à la signature précédente. Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection. Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nOneNote.run(function(ctx){\n    // Get the current outline.         \n    var outline = ctx.application.getActiveOutline();\n    var image = null;\n    \n    // Queue a command to load paragraphs and their types. \n    outline.load(\"paragraphs/type\")\n    return ctx.sync().\n        then(function(){\n            for (var i=0; i < outline.paragraphs.items.length; i++)\n            {\n                var paragraph = outline.paragraphs.items[i];\n                if (paragraph.type == \"Image\")\n                {\n                    image = paragraph.image;\n                }\n            }\n        })\n        .then(function(){\n            if (image != null)\n            {\n                // load every properties and relationships\n                ctx.load(image);\n                return ctx.sync();\n            }\n        })\n        .then(function(){\n            if (image != null)\n            {                   \n                console.log(\"image \" + image.id + \" width is \" + image.width + \" height is \" + image.height);\n                console.log(\"description: \" + image.description);                   \n                console.log(\"hyperlink: \" + image.hyperlink);\n            }\n        });\n});\n```\n```javascript\nvar image = null;\n\nOneNote.run(function(ctx){\n    // Get the current outline.\n    var outline = ctx.application.getActiveOutline();\n\n    // Queue a command to load paragraphs and their types.\n    outline.load(\"paragraphs\")\n    return ctx.sync().\n        then(function(){\n            for (var i=0; i < outline.paragraphs.items.length; i++)\n            {\n                var paragraph = outline.paragraphs.items[i];\n                if (paragraph.type == \"Image\")\n                {\n                    image = paragraph.image;\n                }\n            }\n            if (image != null)\n            {\n               image.load(\"ocrData\");\n            }\n            return ctx.sync();\n        })\n        .then(function(){\n            console.log(image.ocrData);\n        });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nOneNote.run(function(ctx){\n    // Get the current outline.         \n    var outline = ctx.application.getActiveOutline();\n    var searchedParagraph = null;\n    \n    // Queue a command to load paragraphs and their types. \n    outline.load(\"paragraphs/type\")\n    return ctx.sync().\n        then(function() {\n            for (var i=0; i < outline.paragraphs.items.length; i++)\n            {\n                var paragraph = outline.paragraphs.items[i];\n                if (paragraph.type == \"Image\")\n                {\n                    searchedParagraph = paragraph;\n                    break;\n                }\n            }\n        })\n        .then(function() {\n            if (searchedParagraph != null)\n            {\n                // load every properties and relationships\n                searchedParagraph.image.load('paragraph');\n                return ctx.sync();\n            }\n        })\n        .then(function() {\n            if (searchedParagraph != null)\n            {                   \n                if (searchedParagraph.id != searchedParagraph.image.paragraph.id)\n                {\n                    console.log(\"id must match\");\n                }\n            }\n        });\n})\n.catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n}); \n```"
  name: load(option)
  fullName: onenote.OneNote.Image.load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: ''
    parameters:
    - id: option
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: onenote.OneNote.Image.ocrData
  summary: >-
    Obtient les données obtenues suite à la reconnaissance optique des caractères (OCR) de cette image, par exemple la langue et le texte OCR.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: ocrData
  fullName: onenote.OneNote.Image.ocrData
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly ocrData: OneNote.ImageOcrData;'
    return:
      type:
      - onenote.OneNote.ImageOcrData
- uid: onenote.OneNote.Image.pageContent
  summary: >-
    Obtient l’objet PageContent qui contient l’image. Indique si l’image n’est pas un enfant direct d’un objet PageContent. Cet objet définit la position de l’image sur la page. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: pageContent
  fullName: onenote.OneNote.Image.pageContent
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly pageContent: OneNote.PageContent;'
    return:
      type:
      - onenote.OneNote.PageContent
- uid: onenote.OneNote.Image.paragraph
  summary: >-
    Obtient l’objet Paragraph qui contient l’image. Indique si l’image n’est pas un enfant direct d’un objet Paragraph. En lecture seule.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: paragraph
  fullName: onenote.OneNote.Image.paragraph
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly paragraph: OneNote.Paragraph;'
    return:
      type:
      - onenote.OneNote.Paragraph
- uid: onenote.OneNote.Image.toJSON
  name: toJSON()
  fullName: onenote.OneNote.Image.toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): OneNote.Interfaces.ImageData;'
    return:
      type:
      - onenote.OneNote.Interfaces.ImageData
      description: ''
- uid: onenote.OneNote.Image.track
  summary: Suivre l’objet pour l’ajustement automatique selon entourant les modifications dans le document. Cet appel est une abréviation de context.trackedObjects.add(thisObject). Si vous utilisez cet objet dans les appels de « .sync » et en dehors de l’exécution séquentielle d’un lot de « .run » et obtenir une erreur « InvalidObjectPath » lors de la définition d’une propriété ou d’appeler une méthode sur l’objet, vous devez avoir ajouté l’objet à l’objet suivi collection lorsque l’objet a été créé tout d’abord.
  name: track()
  fullName: onenote.OneNote.Image.track
  langs:
  - typeScript
  type: method
  syntax:
    content: 'track(): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: ''
- uid: onenote.OneNote.Image.untrack
  summary: Version de la mémoire associée à cet objet, si elle a été précédemment suivi. Cet appel est l’abréviation de context.trackedObjects.remove(thisObject). Comportant de nombreux objets suivis ralentit l’application hôte, donc pensez à libérer les objets que vous ajoutez, une fois que vous avez terminé les utiliser. Vous devrez appeler « context.sync() » avant que la version de mémoire prenne effet.
  name: untrack()
  fullName: onenote.OneNote.Image.untrack
  langs:
  - typeScript
  type: method
  syntax:
    content: 'untrack(): OneNote.Image;'
    return:
      type:
      - onenote.OneNote.Image
      description: ''
- uid: onenote.OneNote.Image.width
  summary: >-
    Obtient ou définit la largeur de la disposition de l’image.


    \[[Du jeu d’API : OneNoteApi 1.1](/office/dev/add-ins/reference/requirement-sets/onenote-api-requirement-sets)\]
  name: width
  fullName: onenote.OneNote.Image.width
  langs:
  - typeScript
  type: property
  syntax:
    content: 'width: number;'
    return:
      type:
      - number
