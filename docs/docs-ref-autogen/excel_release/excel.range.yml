### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.Range
    summary: |-
      <span data-ttu-id="297ad-101">Une plage représente un ensemble constitué de cellules contiguës comme une cellule, une ligne, une colonne, un bloc de cellules, etc.</span><span class="sxs-lookup"><span data-stu-id="297ad-101">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc.</span></span>

      <span data-ttu-id="297ad-102">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-102">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.Range.address
      - excel_release.Excel.Range.addressLocal
      - excel_release.Excel.Range.calculate
      - excel_release.Excel.Range.cellCount
      - excel_release.Excel.Range.clear
      - excel_release.Excel.Range.clear_1
      - excel_release.Excel.Range.columnCount
      - excel_release.Excel.Range.columnHidden
      - excel_release.Excel.Range.columnIndex
      - excel_release.Excel.Range.conditionalFormats
      - excel_release.Excel.Range.context
      - excel_release.Excel.Range.dataValidation
      - excel_release.Excel.Range.delete
      - excel_release.Excel.Range.delete_1
      - excel_release.Excel.Range.format
      - excel_release.Excel.Range.formulas
      - excel_release.Excel.Range.formulasLocal
      - excel_release.Excel.Range.formulasR1C1
      - excel_release.Excel.Range.getAbsoluteResizedRange
      - excel_release.Excel.Range.getBoundingRect
      - excel_release.Excel.Range.getCell
      - excel_release.Excel.Range.getColumn
      - excel_release.Excel.Range.getColumnsAfter
      - excel_release.Excel.Range.getColumnsBefore
      - excel_release.Excel.Range.getEntireColumn
      - excel_release.Excel.Range.getEntireRow
      - excel_release.Excel.Range.getImage
      - excel_release.Excel.Range.getIntersection
      - excel_release.Excel.Range.getIntersectionOrNullObject
      - excel_release.Excel.Range.getLastCell
      - excel_release.Excel.Range.getLastColumn
      - excel_release.Excel.Range.getLastRow
      - excel_release.Excel.Range.getOffsetRange
      - excel_release.Excel.Range.getResizedRange
      - excel_release.Excel.Range.getRow
      - excel_release.Excel.Range.getRowsAbove
      - excel_release.Excel.Range.getRowsBelow
      - excel_release.Excel.Range.getSurroundingRegion
      - excel_release.Excel.Range.getUsedRange
      - excel_release.Excel.Range.getUsedRangeOrNullObject
      - excel_release.Excel.Range.getVisibleView
      - excel_release.Excel.Range.hidden
      - excel_release.Excel.Range.hyperlink
      - excel_release.Excel.Range.insert
      - excel_release.Excel.Range.insert_1
      - excel_release.Excel.Range.isEntireColumn
      - excel_release.Excel.Range.isEntireRow
      - excel_release.Excel.Range.load
      - excel_release.Excel.Range.load_1
      - excel_release.Excel.Range.load_2
      - excel_release.Excel.Range.merge
      - excel_release.Excel.Range.numberFormat
      - excel_release.Excel.Range.numberFormatLocal
      - excel_release.Excel.Range.rowCount
      - excel_release.Excel.Range.rowHidden
      - excel_release.Excel.Range.rowIndex
      - excel_release.Excel.Range.select
      - excel_release.Excel.Range.set
      - excel_release.Excel.Range.set_1
      - excel_release.Excel.Range.showCard
      - excel_release.Excel.Range.sort
      - excel_release.Excel.Range.style
      - excel_release.Excel.Range.text
      - excel_release.Excel.Range.toJSON
      - excel_release.Excel.Range.track
      - excel_release.Excel.Range.unmerge
      - excel_release.Excel.Range.untrack
      - excel_release.Excel.Range.values
      - excel_release.Excel.Range.valueTypes
      - excel_release.Excel.Range.worksheet
  - uid: excel_release.Excel.Range.address
    summary: |-
      <span data-ttu-id="297ad-103">Représente la référence de plage dans le style a1.</span><span class="sxs-lookup"><span data-stu-id="297ad-103">Represents the range reference in A1-style.</span></span> <span data-ttu-id="297ad-104">La valeur de l'adresse contiendra la référence de la feuille (par exemple, «Sheet1! A1: B4 ").</span><span class="sxs-lookup"><span data-stu-id="297ad-104">Address value will contain the Sheet reference (e.g. "Sheet1!A1:B4").</span></span> <span data-ttu-id="297ad-105">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-105">Read-only.</span></span>

      <span data-ttu-id="297ad-106">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-106">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Range.addressLocal
    summary: |-
      <span data-ttu-id="297ad-107">Représente la référence de la plage spécifiée dans le langage de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="297ad-107">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id="297ad-108">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-108">Read-only.</span></span>

      <span data-ttu-id="297ad-109">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-109">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: excel_release.Excel.Range.calculate
    summary: |-
      <span data-ttu-id="297ad-110">Calcule une plage de cellules dans une feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="297ad-110">Calculates a range of cells on a worksheet.</span></span>

      <span data-ttu-id="297ad-111">\[[Ensemble d'API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-111">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.cellCount
    summary: "<span data-ttu-id=\"297ad-112\">Nombre de cellules dans la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-112\">Number of cells in the range.</span></span> <span data-ttu-id=\"297ad-113\">Cette API renvoie -1 si le nombre de cellules est supérieur à 2^31-1\_(2\_147\_483\_647).</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-113\">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id=\"297ad-114\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-114\">Read-only.</span></span>\n\n<span data-ttu-id=\"297ad-115\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-115\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.clear
    summary: |-
      <span data-ttu-id="297ad-116">Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-116">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="297ad-117">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-117">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-118">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-118">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: '<span data-ttu-id="297ad-119">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="297ad-119">Optional.</span></span> <span data-ttu-id="297ad-120">Détermine le type d’action de suppression.</span><span class="sxs-lookup"><span data-stu-id="297ad-120">Determines the type of clear action.</span></span> <span data-ttu-id="297ad-121">Pour plus d''informations, voir Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="297ad-121">See Excel.ClearApplyTo for details.</span></span>'
          type:
            - excel.Excel.ClearApplyTo
  - uid: excel_release.Excel.Range.clear_1
    summary: |-
      <span data-ttu-id="297ad-122">Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-122">Clear range values, format, fill, border, etc.</span></span>

      <span data-ttu-id="297ad-123">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-123">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: '<span data-ttu-id="297ad-124">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="297ad-124">Optional.</span></span> <span data-ttu-id="297ad-125">Détermine le type d’action de suppression.</span><span class="sxs-lookup"><span data-stu-id="297ad-125">Determines the type of clear action.</span></span> <span data-ttu-id="297ad-126">Pour plus d''informations, voir Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="297ad-126">See Excel.ClearApplyTo for details.</span></span>'
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: excel_release.Excel.Range.columnCount
    summary: |-
      <span data-ttu-id="297ad-127">Représente le nombre total de colonnes dans la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-127">Represents the total number of columns in the range.</span></span> <span data-ttu-id="297ad-128">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-128">Read-only.</span></span>

      <span data-ttu-id="297ad-129">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-129">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.columnHidden
    summary: |-
      <span data-ttu-id="297ad-130">Indique si toutes les colonnes de la plage active sont masquées.</span><span class="sxs-lookup"><span data-stu-id="297ad-130">Represents if all columns of the current range are hidden.</span></span>

      <span data-ttu-id="297ad-131">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-131">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.columnIndex
    summary: |-
      <span data-ttu-id="297ad-132">Représente le numéro de colonne de la première cellule de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-132">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id="297ad-133">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-133">Zero-indexed.</span></span> <span data-ttu-id="297ad-134">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-134">Read-only.</span></span>

      <span data-ttu-id="297ad-135">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-135">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.conditionalFormats
    summary: |-
      <span data-ttu-id="297ad-136">Collection d'ConditionalFormats qui croisent la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-136">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id="297ad-137">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-137">Read-only.</span></span>

      <span data-ttu-id="297ad-138">\[[Ensemble d'API: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-138">\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - excel.Excel.ConditionalFormatCollection
  - uid: excel_release.Excel.Range.context
    summary: <span data-ttu-id="297ad-139">Contexte de demande associé à l'objet.</span><span class="sxs-lookup"><span data-stu-id="297ad-139">The request context associated with the object.</span></span> <span data-ttu-id="297ad-140">Cette opération connecte le processus du complément au processus de l'application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="297ad-140">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.Range.dataValidation
    summary: |-
      <span data-ttu-id="297ad-141">Renvoie un objet de validation des données.</span><span class="sxs-lookup"><span data-stu-id="297ad-141">Returns a data validation object.</span></span>

      <span data-ttu-id="297ad-142">\[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-142">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
  - uid: excel_release.Excel.Range.delete
    summary: |-
      <span data-ttu-id="297ad-143">Supprime les cellules associées à la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-143">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="297ad-144">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-144">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: '<span data-ttu-id="297ad-145">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="297ad-145">Specifies which way to shift the cells.</span></span> <span data-ttu-id="297ad-146">Pour plus d''informations, voir Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="297ad-146">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - excel.Excel.DeleteShiftDirection
  - uid: excel_release.Excel.Range.delete_1
    summary: |-
      <span data-ttu-id="297ad-147">Supprime les cellules associées à la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-147">Deletes the cells associated with the range.</span></span>

      <span data-ttu-id="297ad-148">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-148">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-149">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-149">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="297ad-150">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="297ad-150">Specifies which way to shift the cells.</span></span> <span data-ttu-id="297ad-151">Pour plus d''informations, voir Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="297ad-151">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - '"Up" | "Left"'
  - uid: excel_release.Excel.Range.format
    summary: |-
      <span data-ttu-id="297ad-152">Renvoie un objet format qui encapsule la police, le remplissage, les bordures, l'alignement et d'autres propriétés de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-152">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id="297ad-153">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-153">Read-only.</span></span>

      <span data-ttu-id="297ad-154">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-154">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - excel.Excel.RangeFormat
  - uid: excel_release.Excel.Range.formulas
    summary: |-
      <span data-ttu-id="297ad-155">Représente la formule dans le style de notation A1.</span><span class="sxs-lookup"><span data-stu-id="297ad-155">Represents the formula in A1-style notation.</span></span> <span data-ttu-id="297ad-156">Lorsque vous définissez des formules pour une plage, l'argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="297ad-156">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="297ad-157">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-157">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="297ad-158">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-158">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.formulasLocal
    summary: "<span data-ttu-id=\"297ad-159\">Représente la formule en notation\_A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-159\">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id=\"297ad-160\">Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-160\">For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.</span></span> <span data-ttu-id=\"297ad-161\">Lorsque vous définissez des formules pour une plage, l'argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-161\">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id=\"297ad-162\">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-162\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"297ad-163\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-163\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.formulasR1C1
    summary: |-
      <span data-ttu-id="297ad-164">Représente la formule dans le style de notation R1C1.</span><span class="sxs-lookup"><span data-stu-id="297ad-164">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id="297ad-165">Lorsque vous définissez des formules pour une plage, l'argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="297ad-165">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id="297ad-166">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-166">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="297ad-167">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-167">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.getAbsoluteResizedRange
    summary: |-
      <span data-ttu-id="297ad-168">Obtient un objet Plage avec la même cellule supérieure gauche que l’objet de Plage en cours, mais avec un nombre spécifié de lignes et colonnes.</span><span class="sxs-lookup"><span data-stu-id="297ad-168">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>

      <span data-ttu-id="297ad-169">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-169">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="297ad-170">Nombre de lignes de la nouvelle taille de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-170">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="297ad-171">Nombre de colonnes de la nouvelle taille de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-171">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getBoundingRect
    summary: "<span data-ttu-id=\"297ad-172\">Renvoie le plus petit objet de plage qui englobe les plages données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-172\">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id=\"297ad-173\">Par exemple, la valeur GetBoundingRect pour «\_B2:C5\_» et «\_D10:E15\_» est «\_B2:E15\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-173\">For example, the GetBoundingRect of \"B2:C5\" and \"D10:E15\" is \"B2:E15\".</span></span>\n\n<span data-ttu-id=\"297ad-174\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-174\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-175">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-175">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="297ad-176">Nom, adresse ou objet de plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-176">The range object or address or range name.</span></span>'
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getCell
    summary: |-
      <span data-ttu-id="297ad-177">Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne.</span><span class="sxs-lookup"><span data-stu-id="297ad-177">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id="297ad-178">La cellule peut être située en dehors des limites de sa plage parente, tant qu'elle reste dans la grille de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="297ad-178">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id="297ad-179">L’emplacement de la cellule renvoyée est déterminé à partir de la cellule supérieure gauche de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-179">The returned cell is located relative to the top left cell of the range.</span></span>

      <span data-ttu-id="297ad-180">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-180">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-181">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-181">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="297ad-182">Numéro de ligne de la cellule à récupérer.</span><span class="sxs-lookup"><span data-stu-id="297ad-182">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="297ad-183">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-183">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="297ad-184">Numéro de colonne de la cellule à récupérer.</span><span class="sxs-lookup"><span data-stu-id="297ad-184">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="297ad-185">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-185">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getColumn
    summary: |-
      <span data-ttu-id="297ad-186">Obtient une colonne contenue dans la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-186">Gets a column contained in the range.</span></span>

      <span data-ttu-id="297ad-187">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-187">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-188">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-188">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="297ad-189">Numéro de colonne de la plage à récupérer.</span><span class="sxs-lookup"><span data-stu-id="297ad-189">Column number of the range to be retrieved.</span></span> <span data-ttu-id="297ad-190">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-190">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getColumnsAfter
    summary: |-
      <span data-ttu-id="297ad-191">Obtient un certain nombre de colonnes à droite de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="297ad-191">Gets a certain number of columns to the right of the current Range object.</span></span>

      <span data-ttu-id="297ad-192">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-192">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="297ad-p121">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="297ad-p121">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getColumnsBefore
    summary: |-
      <span data-ttu-id="297ad-198">Obtient un certain nombre de colonnes à gauche de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="297ad-198">Gets a certain number of columns to the left of the current Range object.</span></span>

      <span data-ttu-id="297ad-199">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-199">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="297ad-p122">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="297ad-p122">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getEntireColumn
    summary: |-
      <span data-ttu-id="297ad-205">Obtient un objet qui représente la colonne entière de la plage (par exemple, si la plage actuelle représente les cellules «B4: E11», `getEntireColumn` qu'il s'agit d'une plage qui représente les colonnes «B:E»).</span><span class="sxs-lookup"><span data-stu-id="297ad-205">Gets an object that represents the entire column of the range (for example, if the current range represents cells "B4:E11", its `getEntireColumn` is a range that represents columns "B:E").</span></span>

      <span data-ttu-id="297ad-206">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-206">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-207">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-207">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getEntireRow
    summary: |-
      <span data-ttu-id="297ad-208">Obtient un objet qui représente la ligne entière de la plage (par exemple, si la plage actuelle représente les cellules «B4: E11», `GetEntireRow` qu'il s'agit d'une plage qui représente les lignes «4:11»).</span><span class="sxs-lookup"><span data-stu-id="297ad-208">Gets an object that represents the entire row of the range (for example, if the current range represents cells "B4:E11", its `GetEntireRow` is a range that represents rows "4:11").</span></span>

      <span data-ttu-id="297ad-209">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-209">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-210">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-210">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getImage
    summary: |-
      <span data-ttu-id="297ad-211">Affiche la plage en tant qu'image png encodée au format Base64.</span><span class="sxs-lookup"><span data-stu-id="297ad-211">Renders the range as a base64-encoded png image.</span></span>

      <span data-ttu-id="297ad-212">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-212">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - OfficeExtension.ClientResult<string>
        description: ''
  - uid: excel_release.Excel.Range.getIntersection
    summary: |-
      <span data-ttu-id="297ad-213">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données.</span><span class="sxs-lookup"><span data-stu-id="297ad-213">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>

      <span data-ttu-id="297ad-214">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-214">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-215">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-215">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="297ad-216">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="297ad-216">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getIntersectionOrNullObject
    summary: |-
      <span data-ttu-id="297ad-217">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données.</span><span class="sxs-lookup"><span data-stu-id="297ad-217">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id="297ad-218">Si aucune intersection n’est trouvée, renvoie un objet Null.</span><span class="sxs-lookup"><span data-stu-id="297ad-218">If no intersection is found, will return a null object.</span></span>

      <span data-ttu-id="297ad-219">\[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-219">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-220">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-220">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="297ad-221">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="297ad-221">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - Range | string
  - uid: excel_release.Excel.Range.getLastCell
    summary: "<span data-ttu-id=\"297ad-222\">Obtient la dernière cellule de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-222\">Gets the last cell within the range.</span></span> <span data-ttu-id=\"297ad-223\">Par exemple, la dernière cellule de la plage «\_B2:D5\_» est «\_D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-223\">For example, the last cell of \"B2:D5\" is \"D5\".</span></span>\n\n<span data-ttu-id=\"297ad-224\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-224\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-225">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-225">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getLastColumn
    summary: "<span data-ttu-id=\"297ad-226\">Obtient la dernière colonne de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-226\">Gets the last column within the range.</span></span> <span data-ttu-id=\"297ad-227\">Par exemple, la dernière colonne de la plage «\_B2:D5\_» est «\_D2:D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-227\">For example, the last column of \"B2:D5\" is \"D2:D5\".</span></span>\n\n<span data-ttu-id=\"297ad-228\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-228\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-229">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-229">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getLastRow
    summary: "<span data-ttu-id=\"297ad-230\">Obtient la dernière ligne de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-230\">Gets the last row within the range.</span></span> <span data-ttu-id=\"297ad-231\">Par exemple, la dernière ligne de la plage «\_B2:D5\_» est «\_B5:D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-231\">For example, the last row of \"B2:D5\" is \"B5:D5\".</span></span>\n\n<span data-ttu-id=\"297ad-232\">\\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-232\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-233">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-233">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.getOffsetRange
    summary: |-
      <span data-ttu-id="297ad-p127">Obtient un objet qui représente une plage décalée par rapport à la plage spécifiée. Les dimensions de la plage renvoyée correspondent à cette plage. Si la plage obtenue se retrouve en dehors des limites de grille de la feuille de calcul, une erreur est déclenchée.</span><span class="sxs-lookup"><span data-stu-id="297ad-p127">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>

      <span data-ttu-id="297ad-237">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-237">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-238">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-238">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="297ad-p128">Nombre de lignes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers le bas et les valeurs négatives un décalage vers le haut.</span><span class="sxs-lookup"><span data-stu-id="297ad-p128">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="297ad-p129">Nombre de colonnes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers la droite et les valeurs négatives un décalage vers la gauche.</span><span class="sxs-lookup"><span data-stu-id="297ad-p129">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getResizedRange
    summary: |-
      <span data-ttu-id="297ad-243">Obtient un objet de plage semblable à l’objet de plage actuel, mais avec le coin inférieur droit développé (ou contracté) selon un certain nombre de lignes et de colonnes.</span><span class="sxs-lookup"><span data-stu-id="297ad-243">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>

      <span data-ttu-id="297ad-244">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-244">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="297ad-p130">Nombre de lignes par lequel développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="297ad-p130">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="297ad-247">Nombre de colonnes en fonction desquelles développer le coin inférieur droit par rapport à la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="297ad-247">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="297ad-248">Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="297ad-248">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getRow
    summary: |-
      <span data-ttu-id="297ad-249">Obtient une ligne contenue dans la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-249">Gets a row contained in the range.</span></span>

      <span data-ttu-id="297ad-250">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-250">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-251">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-251">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="297ad-252">Numéro de ligne de la plage à récupérer.</span><span class="sxs-lookup"><span data-stu-id="297ad-252">Row number of the range to be retrieved.</span></span> <span data-ttu-id="297ad-253">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-253">Zero-indexed.</span></span>
          type:
            - number
  - uid: excel_release.Excel.Range.getRowsAbove
    summary: |-
      <span data-ttu-id="297ad-254">Obtient un certain nombre de lignes au-dessus de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="297ad-254">Gets a certain number of rows above the current Range object.</span></span>

      <span data-ttu-id="297ad-255">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-255">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="297ad-p133">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="297ad-p133">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getRowsBelow
    summary: |-
      <span data-ttu-id="297ad-261">Obtient un certain nombre de lignes en dessous de l’objet de plage actuel.</span><span class="sxs-lookup"><span data-stu-id="297ad-261">Gets a certain number of rows below the current Range object.</span></span>

      <span data-ttu-id="297ad-262">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-262">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="297ad-p134">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="297ad-p134">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: excel_release.Excel.Range.getSurroundingRegion
    summary: |-
      <span data-ttu-id="297ad-268">Renvoie un objet PLage qui représente la région environnante pour la cellule en haut à gauche de cette plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-268">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id="297ad-269">Une région environnante est une plage délimitée par une combinaison de lignes et de colonnes vides par rapport à cette plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-269">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>

      <span data-ttu-id="297ad-270">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-270">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel_release.Excel.Range.getUsedRange
    summary: |-
      <span data-ttu-id="297ad-p136">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction génère une erreur ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="297ad-p136">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="297ad-273">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-273">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-274">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-274">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: '<span data-ttu-id="297ad-275">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class="sxs-lookup"><span data-stu-id="297ad-275">Considers only cells with values as used cells.</span></span> <span data-ttu-id="297ad-276">\[Ensemble d''API: ExcelApi 1,2\]</span><span class="sxs-lookup"><span data-stu-id="297ad-276">\[Api set: ExcelApi 1.2\]</span></span>'
          type:
            - boolean
  - uid: excel_release.Excel.Range.getUsedRangeOrNullObject
    summary: |-
      <span data-ttu-id="297ad-p138">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction renvoie un objet null.</span><span class="sxs-lookup"><span data-stu-id="297ad-p138">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>

      <span data-ttu-id="297ad-279">\[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-279">\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-280">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-280">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="297ad-281">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class="sxs-lookup"><span data-stu-id="297ad-281">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: excel_release.Excel.Range.getVisibleView
    summary: |-
      <span data-ttu-id="297ad-282">Représente les lignes visibles de la plage en cours.</span><span class="sxs-lookup"><span data-stu-id="297ad-282">Represents the visible rows of the current range.</span></span>

      <span data-ttu-id="297ad-283">\[[Ensemble d'API: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-283">\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - excel.Excel.RangeView
        description: ''
  - uid: excel_release.Excel.Range.hidden
    summary: |-
      <span data-ttu-id="297ad-284">Indique si toutes les cellules de la plage active sont masquées.</span><span class="sxs-lookup"><span data-stu-id="297ad-284">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id="297ad-285">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-285">Read-only.</span></span>

      <span data-ttu-id="297ad-286">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-286">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.hyperlink
    summary: |-
      <span data-ttu-id="297ad-287">Représente le lien hypertexte de la plage active.</span><span class="sxs-lookup"><span data-stu-id="297ad-287">Represents the hyperlink for the current range.</span></span>

      <span data-ttu-id="297ad-288">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-288">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - excel.Excel.RangeHyperlink
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-289">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-289">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.insert
    summary: |-
      <span data-ttu-id="297ad-p140">Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.</span><span class="sxs-lookup"><span data-stu-id="297ad-p140">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="297ad-292">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-292">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-293">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-293">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: '<span data-ttu-id="297ad-294">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="297ad-294">Specifies which way to shift the cells.</span></span> <span data-ttu-id="297ad-295">Pour plus d''informations, voir Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="297ad-295">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - excel.Excel.InsertShiftDirection
  - uid: excel_release.Excel.Range.insert_1
    summary: |-
      <span data-ttu-id="297ad-p142">Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.</span><span class="sxs-lookup"><span data-stu-id="297ad-p142">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>

      <span data-ttu-id="297ad-298">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-298">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="297ad-299">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="297ad-299">Specifies which way to shift the cells.</span></span> <span data-ttu-id="297ad-300">Pour plus d''informations, voir Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="297ad-300">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - '"Down" | "Right"'
  - uid: excel_release.Excel.Range.isEntireColumn
    summary: |-
      <span data-ttu-id="297ad-301">Représente si la plage active est une colonne entière.</span><span class="sxs-lookup"><span data-stu-id="297ad-301">Represents if the current range is an entire column.</span></span> <span data-ttu-id="297ad-302">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-302">Read-only.</span></span>

      <span data-ttu-id="297ad-303">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-303">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.isEntireRow
    summary: |-
      <span data-ttu-id="297ad-304">Représente si la plage active est une ligne entière.</span><span class="sxs-lookup"><span data-stu-id="297ad-304">Represents if the current range is an entire row.</span></span> <span data-ttu-id="297ad-305">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-305">Read-only.</span></span>

      <span data-ttu-id="297ad-306">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-306">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.load
    summary: "<span data-ttu-id=\"297ad-307\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-307\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"297ad-308\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-308\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="297ad-309">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="297ad-309">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="297ad-310">`load(option?: string | string[]): Excel.Range`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="297ad-310">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="297ad-311">`load(option?: { select?: string; expand?: string; }): Excel.Range`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="297ad-311">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="297ad-312">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="297ad-312">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id="297ad-313">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="297ad-313">It is similar to the preceding signature.</span></span> <span data-ttu-id="297ad-314">Option. Top indique le nombre maximal d'éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="297ad-314">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="297ad-315">Option. Skip indique le nombre d'éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="297ad-315">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="297ad-316">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d'éléments.</span><span class="sxs-lookup"><span data-stu-id="297ad-316">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.RangeLoadOptions
  - uid: excel_release.Excel.Range.load_1
    summary: <span data-ttu-id="297ad-317">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="297ad-317">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="297ad-318">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="297ad-318">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-319">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-319">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="297ad-320">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="297ad-320">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.Range.load_2
    summary: <span data-ttu-id="297ad-321">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="297ad-321">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="297ad-322">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="297ad-322">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="297ad-323">Où propertyNamesAndPaths. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="297ad-323">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.Range.merge
    summary: |-
      <span data-ttu-id="297ad-324">Fusionne la plage de cellules dans une zone de la feuille de calcul.</span><span class="sxs-lookup"><span data-stu-id="297ad-324">Merge the range cells into one region in the worksheet.</span></span>

      <span data-ttu-id="297ad-325">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-325">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-326">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-326">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: "<span data-ttu-id=\"297ad-327\">Facultatif.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-327\">Optional.</span></span> <span data-ttu-id=\"297ad-328\">Définit la valeur «\_true\_» pour fusionner séparément les cellules de chaque ligne de la plage spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-328\">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id=\"297ad-329\">La valeur par défaut est «\_false\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-329\">The default value is false.</span></span>"
          type:
            - boolean
  - uid: excel_release.Excel.Range.numberFormat
    summary: |-
      <span data-ttu-id="297ad-330">Représente le code de format de nombre d'Excel pour la plage donnée.</span><span class="sxs-lookup"><span data-stu-id="297ad-330">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id="297ad-331">Lorsque vous définissez la propriété format numérique sur une plage, l'argument valeur peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="297ad-331">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="297ad-332">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-332">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="297ad-333">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-333">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.numberFormatLocal
    summary: |-
      <span data-ttu-id="297ad-334">Représente le code de format numérique d’Excel pour la plage donnée en tant que chaîne dans la langue de l’utilisateur.</span><span class="sxs-lookup"><span data-stu-id="297ad-334">Represents Excel's number format code for the given range as a string in the language of the user.</span></span> <span data-ttu-id="297ad-335">Lorsque vous définissez le format de nombre local à une plage, l'argument valeur peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="297ad-335">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id="297ad-336">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-336">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="297ad-337">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-337">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.rowCount
    summary: |-
      <span data-ttu-id="297ad-338">Renvoie le nombre total de lignes de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-338">Returns the total number of rows in the range.</span></span> <span data-ttu-id="297ad-339">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-339">Read-only.</span></span>

      <span data-ttu-id="297ad-340">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-340">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.rowHidden
    summary: |-
      <span data-ttu-id="297ad-341">Indique si toutes les lignes de la plage active sont masquées.</span><span class="sxs-lookup"><span data-stu-id="297ad-341">Represents if all rows of the current range are hidden.</span></span>

      <span data-ttu-id="297ad-342">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-342">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.Range.rowIndex
    summary: |-
      <span data-ttu-id="297ad-343">Renvoie le numéro de ligne de la première cellule de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-343">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id="297ad-344">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="297ad-344">Zero-indexed.</span></span> <span data-ttu-id="297ad-345">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-345">Read-only.</span></span>

      <span data-ttu-id="297ad-346">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-346">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: excel_release.Excel.Range.select
    summary: |-
      <span data-ttu-id="297ad-347">Sélectionne la plage spécifiée dans l’interface utilisateur d’Excel.</span><span class="sxs-lookup"><span data-stu-id="297ad-347">Selects the specified range in the Excel UI.</span></span>

      <span data-ttu-id="297ad-348">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-348">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-349">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-349">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.set
    summary: '<span data-ttu-id="297ad-350">Définit plusieurs propriétés d''un objet en même temps.</span><span class="sxs-lookup"><span data-stu-id="297ad-350">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="297ad-351">Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.</span><span class="sxs-lookup"><span data-stu-id="297ad-351">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="297ad-352">Cette méthode est dotée de la signature supplémentaire suivante:</span><span class="sxs-lookup"><span data-stu-id="297ad-352">This method has the following additional signature:</span></span>

      `set(properties: Excel.Range): void`

      #### <a name="examples"></a><span data-ttu-id="297ad-353">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-353">Examples</span></span>

      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const range = sheet.getRange("B2:E2");
          range.set({
              format: {
                  fill: {
                      color: "#4472C4"
                  },
                  font: {
                      name: "Verdana",
                      color: "white"
                  }
              }
          })
          range.format.autofitColumns();
          await context.sync();
      });
      ```
      ```typescript
      await Excel.run(async (context) => {
          const sheet = context.workbook.worksheets.getItem("Sample");

          const sourceRange = sheet.getRange("B2:E2");
          sourceRange.load("format/fill/color, format/font/name, format/font/color");
          await context.sync();

          // Set properties based on the loaded and synced 
          // source range.
          const targetRange = sheet.getRange("B7:E7");
          targetRange.set(sourceRange); 
          targetRange.format.autofitColumns();
          await context.sync();
      });
      ```
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="297ad-354">Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l'objet sur lequel la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="297ad-354">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.RangeUpdateData
        - id: options
          description: <span data-ttu-id="297ad-355">Fournit une option permettant de supprimer les erreurs si l'objet Properties tente de définir des propriétés en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-355">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.Range.set_1
    summary: '<span data-ttu-id="297ad-356">Définit plusieurs propriétés de l''objet en même temps, en fonction d''un objet chargé existant.</span><span class="sxs-lookup"><span data-stu-id="297ad-356">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.Range
  - uid: excel_release.Excel.Range.showCard
    summary: |-
      <span data-ttu-id="297ad-357">Affiche la carte pour une cellule active si son contenu est riche en valeur.</span><span class="sxs-lookup"><span data-stu-id="297ad-357">Displays the card for an active cell if it has rich value content.</span></span>

      <span data-ttu-id="297ad-358">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-358">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.Range.sort
    summary: |-
      <span data-ttu-id="297ad-359">Représente le tri de plage de la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="297ad-359">Represents the range sort of the current range.</span></span> <span data-ttu-id="297ad-360">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-360">Read-only.</span></span>

      <span data-ttu-id="297ad-361">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-361">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - excel.Excel.RangeSort
  - uid: excel_release.Excel.Range.style
    summary: |-
      <span data-ttu-id="297ad-362">Représente le style de la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="297ad-362">Represents the style of the current range.</span></span> <span data-ttu-id="297ad-363">Si les styles des cellules sont incohérents, la valeur null est renvoyée.</span><span class="sxs-lookup"><span data-stu-id="297ad-363">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id="297ad-364">Pour les styles personnalisés, le nom du style est renvoyé.</span><span class="sxs-lookup"><span data-stu-id="297ad-364">For custom styles, the style name will be returned.</span></span> <span data-ttu-id="297ad-365">Pour les styles intégrés, une chaîne représentant une valeur dans l'énumération BuiltInStyle est retournée.</span><span class="sxs-lookup"><span data-stu-id="297ad-365">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>

      <span data-ttu-id="297ad-366">\[[Ensemble d'API: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-366">\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-367">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-367">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.text
    summary: |-
      <span data-ttu-id="297ad-368">Valeurs de texte de la plage spécifiée.</span><span class="sxs-lookup"><span data-stu-id="297ad-368">Text values of the specified range.</span></span> <span data-ttu-id="297ad-369">La valeur de texte ne dépend pas de la largeur de la cellule.</span><span class="sxs-lookup"><span data-stu-id="297ad-369">The Text value will not depend on the cell width.</span></span> <span data-ttu-id="297ad-370">La \# substitution de signe qui se produit dans l'interface utilisateur d'Excel n'affecte pas la valeur de texte renvoyée par l'API.</span><span class="sxs-lookup"><span data-stu-id="297ad-370">The \# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id="297ad-371">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-371">Read-only.</span></span>

      <span data-ttu-id="297ad-372">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-372">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: excel_release.Excel.Range.toJSON
    summary: '<span data-ttu-id="297ad-373">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu''un objet d''API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="297ad-373">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="297ad-374">.</span><span class="sxs-lookup"><span data-stu-id="297ad-374"></span></span> <span data-ttu-id="297ad-375">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="297ad-375"></span></span><!-- --><span data-ttu-id="297ad-376">, à son tour, appelle `toJSON` la méthode de l''objet qui lui est passé.) Tandis que l''objet Excel. Range d''origine est un objet `toJSON` d''API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="297ad-376">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="297ad-377">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l''objet d''origine.</span><span class="sxs-lookup"><span data-stu-id="297ad-377">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - excel.Excel.Interfaces.RangeData
        description: ''
  - uid: excel_release.Excel.Range.track
    summary: "<span data-ttu-id=\"297ad-378\">Effectuer le suivi de l’objet pour l’ajustement automatique en fonction environnant des modifications dans le document.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-378\">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id=\"297ad-379\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-379\">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id=\"297ad-380\">Si vous utilisez cet objet au sein de «\_.sync\_» appels et en dehors de l’exécution séquentielle d’un lot de «\_.run\_» et rencontrez un message d’erreur «\_InvalidObjectPath\_» lors de la définition d’une propriété ou appeler une méthode sur l’objet, vous devez ajouter l’objet à l’objet de suivi collection de sites lors de l’objet a été créé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-380\">If you are using this object across \".sync\" calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>"
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: ''
  - uid: excel_release.Excel.Range.unmerge
    summary: |-
      <span data-ttu-id="297ad-381">Annule la fusion de la plage de cellules et les sépare dans des cellules distinctes.</span><span class="sxs-lookup"><span data-stu-id="297ad-381">Unmerge the range cells into separate cells.</span></span>

      <span data-ttu-id="297ad-382">\[[Ensemble d'API: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-382">\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-383">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-383">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: excel_release.Excel.Range.untrack
    summary: "<span data-ttu-id=\"297ad-384\">Publication mémoire associée à cet objet si elle a été précédemment suivie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-384\">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id=\"297ad-385\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-385\">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id=\"297ad-386\">Vous rencontrez de nombreux objets suivies ralentit l’application hôte, donc n’oubliez pas de libérer les objets que l'on ajoute, une fois que vous avez terminé à les utiliser.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-386\">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id=\"297ad-387\">Vous devez appeler «\_context.sync()\_» avant la publication de mémoire prend effet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"297ad-387\">You will need to call \"context.sync()\" before the memory release takes effect.</span></span>"
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - excel.Excel.Range
        description: |-


          #### <a name="examples"></a><span data-ttu-id="297ad-388">Exemples</span><span class="sxs-lookup"><span data-stu-id="297ad-388">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.Range.values
    summary: |-
      <span data-ttu-id="297ad-389">Représente les valeurs brutes de la plage spécifiée.</span><span class="sxs-lookup"><span data-stu-id="297ad-389">Represents the raw values of the specified range.</span></span> <span data-ttu-id="297ad-390">Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes.</span><span class="sxs-lookup"><span data-stu-id="297ad-390">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id="297ad-391">Les cellules contenant une erreur renvoie la chaîne d’erreur.</span><span class="sxs-lookup"><span data-stu-id="297ad-391">Cells that contain an error will return the error string.</span></span> <span data-ttu-id="297ad-392">Lors de la définition de valeurs à une plage, l'argument value peut être une valeur unique (String, Number ou Boolean) ou un tableau à deux dimensions.</span><span class="sxs-lookup"><span data-stu-id="297ad-392">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id="297ad-393">Si l'argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-393">If the argument is a single value, it will be applied to all cells in the range.</span></span>

      <span data-ttu-id="297ad-394">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-394">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: excel_release.Excel.Range.valueTypes
    summary: |-
      <span data-ttu-id="297ad-395">Représente le type de données de chaque cellule.</span><span class="sxs-lookup"><span data-stu-id="297ad-395">Represents the type of data of each cell.</span></span> <span data-ttu-id="297ad-396">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-396">Read-only.</span></span>

      <span data-ttu-id="297ad-397">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-397">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'Excel.RangeValueType[][]'
  - uid: excel_release.Excel.Range.worksheet
    summary: |-
      <span data-ttu-id="297ad-398">Feuille de calcul contenant la plage.</span><span class="sxs-lookup"><span data-stu-id="297ad-398">The worksheet containing the current range.</span></span> <span data-ttu-id="297ad-399">En lecture seule.</span><span class="sxs-lookup"><span data-stu-id="297ad-399">Read-only.</span></span>

      <span data-ttu-id="297ad-400">\[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="297ad-400">\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - excel.Excel.Worksheet