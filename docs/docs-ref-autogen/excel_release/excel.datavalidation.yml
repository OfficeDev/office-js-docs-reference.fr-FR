### YamlMime:UniversalReference
items:
  - uid: excel_release.Excel.DataValidation
    summary: |-
      <span data-ttu-id="a75c3-101">Représente la validation des données appliquée à la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="a75c3-101">Represents the data validation applied to the current range.</span></span> <span data-ttu-id="a75c3-102">Pour en savoir plus sur le modèle objet de validation des données, consultez la rubrique [Ajouter la validation des données à des plages Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span><span class="sxs-lookup"><span data-stu-id="a75c3-102">To learn more about the data validation object model, read [Add data validation to Excel ranges](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-data-validation)</span></span><!-- --><span data-ttu-id="a75c3-103">.</span><span class="sxs-lookup"><span data-stu-id="a75c3-103"></span></span>

      <span data-ttu-id="a75c3-104">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-104">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: Excel.DataValidation
    fullName: Excel.DataValidation
    langs:
      - typeScript
    type: class
    extends:
      - office.OfficeExtension.ClientObject
    package: excel_release
    children:
      - excel_release.Excel.DataValidation.clear
      - excel_release.Excel.DataValidation.context
      - excel_release.Excel.DataValidation.errorAlert
      - excel_release.Excel.DataValidation.getInvalidCells
      - excel_release.Excel.DataValidation.getInvalidCellsOrNullObject
      - excel_release.Excel.DataValidation.ignoreBlanks
      - excel_release.Excel.DataValidation.load
      - excel_release.Excel.DataValidation.load_1
      - excel_release.Excel.DataValidation.load_2
      - excel_release.Excel.DataValidation.prompt
      - excel_release.Excel.DataValidation.rule
      - excel_release.Excel.DataValidation.set
      - excel_release.Excel.DataValidation.set_1
      - excel_release.Excel.DataValidation.toJSON
      - excel_release.Excel.DataValidation.type
      - excel_release.Excel.DataValidation.valid
  - uid: excel_release.Excel.DataValidation.clear
    summary: |-
      <span data-ttu-id="a75c3-105">Efface la validation des données de la plage active.</span><span class="sxs-lookup"><span data-stu-id="a75c3-105">Clears the data validation from the current range.</span></span>

      <span data-ttu-id="a75c3-106">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-106">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: clear()
    fullName: clear()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(): void;'
      return:
        type:
          - void
        description: ''
  - uid: excel_release.Excel.DataValidation.context
    summary: <span data-ttu-id="a75c3-107">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="a75c3-107">The request context associated with the object.</span></span> <span data-ttu-id="a75c3-108">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="a75c3-108">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - RequestContext
  - uid: excel_release.Excel.DataValidation.errorAlert
    summary: |-
      <span data-ttu-id="a75c3-109">Alerte d’erreur lorsque l’utilisateur entre des données non valides.</span><span class="sxs-lookup"><span data-stu-id="a75c3-109">Error alert when user enters invalid data.</span></span>

      <span data-ttu-id="a75c3-110">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-110">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: errorAlert
    fullName: errorAlert
    langs:
      - typeScript
    type: property
    syntax:
      content: 'errorAlert: Excel.DataValidationErrorAlert;'
      return:
        type:
          - excel.Excel.DataValidationErrorAlert
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a75c3-111">Exemples</span><span class="sxs-lookup"><span data-stu-id="a75c3-111">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const commentsRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Comments").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              commentsRange.dataValidation.clear();   

              // If the value of A2 is contained in the value of C2, then 
              // SEARCH(A2,C2) returns the number where it begins. Otherwise,
              // it does not return a number.
              let redundantStringRule = {
                  custom: {
                      formula: "=NOT(ISNUMBER(SEARCH(A2,C2)))"
                  }
              };
              commentsRange.dataValidation.rule = redundantStringRule;
              commentsRange.dataValidation.errorAlert = {
                  message: "It is redundant to include the baby name in the comment.",
                  showAlert: true,
                  style: "Information",
                  title: "Baby Name in Comment"
              };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.DataValidation.getInvalidCells
    summary: |-
      <span data-ttu-id="a75c3-112">Renvoie un RangeAreas comprenant une ou plusieurs plages rectangulaires, avec des valeurs de cellule non valide.</span><span class="sxs-lookup"><span data-stu-id="a75c3-112">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="a75c3-113">Si toutes les valeurs de cellule sont valides, cette fonction génère une erreur ItemNotFound.</span><span class="sxs-lookup"><span data-stu-id="a75c3-113">If all cell values are valid, this function will throw an ItemNotFound error.</span></span>

      <span data-ttu-id="a75c3-114">\[[Ensemble d’API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-114">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCells()
    fullName: getInvalidCells()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCells(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel_release.Excel.DataValidation.getInvalidCellsOrNullObject
    summary: |-
      <span data-ttu-id="a75c3-115">Renvoie un RangeAreas comprenant une ou plusieurs plages rectangulaires, avec des valeurs de cellule non valide.</span><span class="sxs-lookup"><span data-stu-id="a75c3-115">Returns a RangeAreas, comprising one or more rectangular ranges, with invalid cell values.</span></span> <span data-ttu-id="a75c3-116">Si toutes les valeurs de cellule sont valides, cette fonction renverra une valeur null.</span><span class="sxs-lookup"><span data-stu-id="a75c3-116">If all cell values are valid, this function will return null.</span></span>

      <span data-ttu-id="a75c3-117">\[[Ensemble d’API: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-117">\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: getInvalidCellsOrNullObject()
    fullName: getInvalidCellsOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getInvalidCellsOrNullObject(): Excel.RangeAreas;'
      return:
        type:
          - excel.Excel.RangeAreas
        description: ''
  - uid: excel_release.Excel.DataValidation.ignoreBlanks
    summary: "<span data-ttu-id=\"a75c3-118\">Ignorer les espaces vides\_: aucune validation des données ne sera exécutée sur les cellules vides, la valeur par défaut est vrai.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a75c3-118\">Ignore blanks: no data validation will be performed on blank cells, it defaults to true.</span></span>\n\n<span data-ttu-id=\"a75c3-119\">\\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"a75c3-119\">\\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: ignoreBlanks
    fullName: ignoreBlanks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'ignoreBlanks: boolean;'
      return:
        type:
          - boolean
  - uid: excel_release.Excel.DataValidation.load
    summary: "<span data-ttu-id=\"a75c3-120\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a75c3-120\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"a75c3-121\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a75c3-121\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: |-
      <span data-ttu-id="a75c3-122">En plus de cette signature, cette méthode possède les signatures suivantes:</span><span class="sxs-lookup"><span data-stu-id="a75c3-122">In addition to this signature, this method has the following signatures:</span></span>

      <span data-ttu-id="a75c3-123">`load(option?: string | string[]): Excel.DataValidation`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="a75c3-123">`load(option?: string | string[]): Excel.DataValidation` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>

      <span data-ttu-id="a75c3-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="a75c3-124">`load(option?: { select?: string; expand?: string; }): Excel.DataValidation` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>

      <span data-ttu-id="a75c3-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation`-Uniquement disponible sur les types de collection.</span><span class="sxs-lookup"><span data-stu-id="a75c3-125">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.DataValidation` - Only available on collection types.</span></span> <span data-ttu-id="a75c3-126">Elle est similaire à la signature précédente.</span><span class="sxs-lookup"><span data-stu-id="a75c3-126">It is similar to the preceding signature.</span></span> <span data-ttu-id="a75c3-127">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="a75c3-127">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id="a75c3-128">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="a75c3-128">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id="a75c3-129">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="a75c3-129">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.DataValidationLoadOptions): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - excel.Excel.Interfaces.DataValidationLoadOptions
  - uid: excel_release.Excel.DataValidation.load_1
    summary: <span data-ttu-id="a75c3-130">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="a75c3-130">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a75c3-131">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="a75c3-131">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="a75c3-132">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="a75c3-132">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: excel_release.Excel.DataValidation.load_2
    summary: <span data-ttu-id="a75c3-133">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="a75c3-133">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="a75c3-134">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="a75c3-134">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.DataValidation;'
      return:
        type:
          - excel.Excel.DataValidation
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="a75c3-135">Où propertyNamesAndPaths. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="a75c3-135">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: excel_release.Excel.DataValidation.prompt
    summary: |-
      <span data-ttu-id="a75c3-136">Invite lorsque les utilisateurs sélectionnent une cellule.</span><span class="sxs-lookup"><span data-stu-id="a75c3-136">Prompt when users select a cell.</span></span> <span data-ttu-id="a75c3-137">L' `DataValidationPrompt` objet doit être défini en tant qu’objet JSON ( `x.prompt = {...}` utilisez au lieu de`x.prompt.message = ...`</span><span class="sxs-lookup"><span data-stu-id="a75c3-137">The `DataValidationPrompt` object must be set as a JSON object (use `x.prompt = {...}` instead of `x.prompt.message = ...`</span></span><!-- --><span data-ttu-id="a75c3-138">).</span><span class="sxs-lookup"><span data-stu-id="a75c3-138"></span></span>

      <span data-ttu-id="a75c3-139">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-139">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: prompt
    fullName: prompt
    langs:
      - typeScript
    type: property
    syntax:
      content: 'prompt: Excel.DataValidationPrompt;'
      return:
        type:
          - excel.Excel.DataValidationPrompt
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a75c3-140">Exemples</span><span class="sxs-lookup"><span data-stu-id="a75c3-140">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.DataValidation.rule
    summary: |-
      <span data-ttu-id="a75c3-141">Règle de validation des données qui contient différents critères de validation de données.</span><span class="sxs-lookup"><span data-stu-id="a75c3-141">Data validation rule that contains different type of data validation criteria.</span></span>

      <span data-ttu-id="a75c3-142">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-142">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: rule
    fullName: rule
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rule: Excel.DataValidationRule;'
      return:
        type:
          - excel.Excel.DataValidationRule
        description: |-


          #### <a name="examples"></a><span data-ttu-id="a75c3-143">Exemples</span><span class="sxs-lookup"><span data-stu-id="a75c3-143">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Decision");
              const nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              const nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          });
          ```
  - uid: excel_release.Excel.DataValidation.set
    summary: '<span data-ttu-id="a75c3-144">Définit plusieurs propriétés d’un objet en même temps.</span><span class="sxs-lookup"><span data-stu-id="a75c3-144">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="a75c3-145">Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.</span><span class="sxs-lookup"><span data-stu-id="a75c3-145">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: |-
      <span data-ttu-id="a75c3-146">Cette méthode est dotée de la signature supplémentaire suivante:</span><span class="sxs-lookup"><span data-stu-id="a75c3-146">This method has the following additional signature:</span></span>

      `set(properties: Excel.DataValidation): void`
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.DataValidationUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="a75c3-147">Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l’objet sur lequel la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="a75c3-147">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - Interfaces.DataValidationUpdateData
        - id: options
          description: <span data-ttu-id="a75c3-148">Fournit une option permettant de supprimer les erreurs si l’objet Properties tente de définir des propriétés en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="a75c3-148">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - office.OfficeExtension.UpdateOptions
  - uid: excel_release.Excel.DataValidation.set_1
    summary: '<span data-ttu-id="a75c3-149">Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.</span><span class="sxs-lookup"><span data-stu-id="a75c3-149">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.DataValidation): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - excel.Excel.DataValidation
  - uid: excel_release.Excel.DataValidation.toJSON
    summary: '<span data-ttu-id="a75c3-150">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="a75c3-150">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="a75c3-151">.</span><span class="sxs-lookup"><span data-stu-id="a75c3-151"></span></span> <span data-ttu-id="a75c3-152">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="a75c3-152"></span></span><!-- --><span data-ttu-id="a75c3-153">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. DataValidation d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.DataValidationData`</span><span class="sxs-lookup"><span data-stu-id="a75c3-153">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.DataValidation object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.DataValidationData`</span></span><!-- --><span data-ttu-id="a75c3-154">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="a75c3-154">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.DataValidationData;'
      return:
        type:
          - excel.Excel.Interfaces.DataValidationData
        description: ''
  - uid: excel_release.Excel.DataValidation.type
    summary: |-
      <span data-ttu-id="a75c3-155">Type de validation des données, voir Excel.DataValidationType pour plus d’informations.</span><span class="sxs-lookup"><span data-stu-id="a75c3-155">Type of the data validation, see Excel.DataValidationType for details.</span></span>

      <span data-ttu-id="a75c3-156">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-156">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria";'
      return:
        type:
          - Excel.DataValidationType | "None" | "WholeNumber" | "Decimal" | "List" | "Date" | "Time" | "TextLength" | "Custom" | "Inconsistent" | "MixedCriteria"
  - uid: excel_release.Excel.DataValidation.valid
    summary: |-
      <span data-ttu-id="a75c3-157">Représente si toutes les valeurs de cellule sont valides selon les règles de validation des données.</span><span class="sxs-lookup"><span data-stu-id="a75c3-157">Represents if all cell values are valid according to the data validation rules.</span></span> <span data-ttu-id="a75c3-158">Renvoie la valeur true si toutes les valeurs de cellule sont valides ou la valeur false si toutes les valeurs de cellule ne sont pas valides.</span><span class="sxs-lookup"><span data-stu-id="a75c3-158">Returns true if all cell values are valid, or false if all cell values are invalid.</span></span> <span data-ttu-id="a75c3-159">Renvoie la valeur null si les valeurs des cellules valides et non valides sont comprises dans la plage.</span><span class="sxs-lookup"><span data-stu-id="a75c3-159">Returns null if there are both valid and invalid cell values within the range.</span></span>

      <span data-ttu-id="a75c3-160">\[[Ensemble d’API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]</span><span class="sxs-lookup"><span data-stu-id="a75c3-160">\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \]</span></span>
    name: valid
    fullName: valid
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valid: boolean;'
      return:
        type:
          - boolean