### YamlMime:UniversalReference
ms.openlocfilehash: 6eec0c5facd3ae0b780502d9f622ef6d27232ddd
ms.sourcegitcommit: e9bfba6ec767e9d34fd1cf7b38c30f689617900a
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/20/2019
ms.locfileid: "30106860"
items:
- uid: excel_release.Excel.ChartCollection
  summary: >-
    Collection de tous les objets de graphique d’une feuille de calcul.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: Excel.ChartCollection
  fullName: Excel.ChartCollection
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: excel_release
  children:
  - excel_release.Excel.ChartCollection.add
  - excel_release.Excel.ChartCollection.add_1
  - excel_release.Excel.ChartCollection.context
  - excel_release.Excel.ChartCollection.count
  - excel_release.Excel.ChartCollection.getCount
  - excel_release.Excel.ChartCollection.getItem
  - excel_release.Excel.ChartCollection.getItemAt
  - excel_release.Excel.ChartCollection.getItemOrNullObject
  - excel_release.Excel.ChartCollection.items
  - excel_release.Excel.ChartCollection.load
  - excel_release.Excel.ChartCollection.load_1
  - excel_release.Excel.ChartCollection.load_2
  - excel_release.Excel.ChartCollection.onActivated
  - excel_release.Excel.ChartCollection.onAdded
  - excel_release.Excel.ChartCollection.onDeactivated
  - excel_release.Excel.ChartCollection.onDeleted
  - excel_release.Excel.ChartCollection.toJSON
- uid: excel_release.Excel.ChartCollection.add
  summary: >-
    Crée un graphique.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(type, sourceData, seriesBy)
  fullName: add(type, sourceData, seriesBy)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(type: Excel.ChartType, sourceData: Range, seriesBy?: Excel.ChartSeriesBy): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: ''
    parameters:
    - id: type
      description: Représente le type d'un graphique. Pour plus d'informations, voir Excel. ChartType.
      type:
      - excel.Excel.ChartType
    - id: sourceData
      description: Objet Range correspondant aux données source.
      type:
      - Range
    - id: seriesBy
      description: Facultatif. Indique la manière dont les colonnes ou les lignes sont utilisées comme séries de données dans le graphique. Pour plus d'informations, voir Excel. ChartSeriesBy.
      type:
      - excel.Excel.ChartSeriesBy
- uid: excel_release.Excel.ChartCollection.add_1
  summary: >-
    Crée un graphique.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: add(typeString, sourceData, seriesBy)
  fullName: add(typeString, sourceData, seriesBy)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'add(typeString: "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel", sourceData: Range, seriesBy?: "Auto" | "Columns" | "Rows"): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// Add a chart of chartType \"ColumnClustered\" on worksheet \"Charts\" \n// with sourceData from Range \"A1:B4\" and seriresBy is set to be \"auto\".\nExcel.run(function (ctx) { \n    var rangeSelection = \"A1:B4\";\n    var range = ctx.workbook.worksheets.getItem(sheetName)\n        .getRange(rangeSelection);\n    var chart = ctx.workbook.worksheets.getItem(sheetName)\n        .charts.add(\"ColumnClustered\", range, \"auto\");    return ctx.sync().then(function() {\n            console.log(\"New Chart Added\");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: typeString
      description: Représente le type d'un graphique. Pour plus d'informations, voir Excel. ChartType.
      type:
      - "\"Invalid\" | \"ColumnClustered\" | \"ColumnStacked\" | \"ColumnStacked100\" | \"3DColumnClustered\" | \"3DColumnStacked\" | \"3DColumnStacked100\" | \"BarClustered\" | \"BarStacked\" | \"BarStacked100\" | \"3DBarClustered\" | \"3DBarStacked\" | \"3DBarStacked100\" | \"LineStacked\" | \"LineStacked100\" | \"LineMarkers\" | \"LineMarkersStacked\" | \"LineMarkersStacked100\" | \"PieOfPie\" | \"PieExploded\" | \"3DPieExploded\" | \"BarOfPie\" | \"XYScatterSmooth\" | \"XYScatterSmoothNoMarkers\" | \"XYScatterLines\" | \"XYScatterLinesNoMarkers\" | \"AreaStacked\" | \"AreaStacked100\" | \"3DAreaStacked\" | \"3DAreaStacked100\" | \"DoughnutExploded\" | \"RadarMarkers\" | \"RadarFilled\" | \"Surface\" | \"SurfaceWireframe\" | \"SurfaceTopView\" | \"SurfaceTopViewWireframe\" | \"Bubble\" | \"Bubble3DEffect\" | \"StockHLC\" | \"StockOHLC\" | \"StockVHLC\" | \"StockVOHLC\" | \"CylinderColClustered\" | \"CylinderColStacked\" | \"CylinderColStacked100\" | \"CylinderBarClustered\" | \"CylinderBarStacked\" | \"CylinderBarStacked100\" | \"CylinderCol\" | \"ConeColClustered\" | \"ConeColStacked\" | \"ConeColStacked100\" | \"ConeBarClustered\" | \"ConeBarStacked\" | \"ConeBarStacked100\" | \"ConeCol\" | \"PyramidColClustered\" | \"PyramidColStacked\" | \"PyramidColStacked100\" | \"PyramidBarClustered\" | \"PyramidBarStacked\" | \"PyramidBarStacked100\" | \"PyramidCol\" | \"3DColumn\" | \"Line\" | \"3DLine\" | \"3DPie\" | \"Pie\" | \"XYScatter\" | \"3DArea\" | \"Area\" | \"Doughnut\" | \"Radar\" | \"Histogram\" | \"Boxwhisker\" | \"Pareto\" | \"RegionMap\" | \"Treemap\" | \"Waterfall\" | \"Sunburst\" | \"Funnel\""
    - id: sourceData
      description: Objet Range correspondant aux données source.
      type:
      - Range
    - id: seriesBy
      description: Facultatif. Indique la manière dont les colonnes ou les lignes sont utilisées comme séries de données dans le graphique. Pour plus d'informations, voir Excel. ChartSeriesBy.
      type:
      - "\"Auto\" | \"Columns\" | \"Rows\""
- uid: excel_release.Excel.ChartCollection.context
  summary: Contexte de demande associé à l'objet. Cette opération connecte le processus du complément au processus de l'application hôte Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: excel_release.Excel.ChartCollection.count
  summary: >-
    Renvoie le nombre de graphiques dans la feuille de calcul. En lecture seule.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: count
  fullName: count
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly count: number;'
    return:
      type:
      - number
- uid: excel_release.Excel.ChartCollection.getCount
  summary: >-
    Renvoie le nombre de graphiques dans la feuille de calcul.


    \[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getCount()
  fullName: getCount()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type:
      - OfficeExtension.ClientResult<number>
      description: ''
- uid: excel_release.Excel.ChartCollection.getItem
  summary: >-
    Extrait un graphique à l’aide de son nom. Si plusieurs graphiques portent le même nom, c’est le premier d’entre eux qui est renvoyé.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItem(name)
  fullName: getItem(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItem(name: string): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (ctx) { \n    var chartname = 'Chart1';\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(chartname);\n    return ctx.sync().then(function() {\n            console.log(chart.height);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var chartId = 'SampleChartId';\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(chartId);\n    return ctx.sync().then(function() {\n            console.log(chart.height);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: name
      description: Nom du graphique à extraire.
      type:
      - string
- uid: excel_release.Excel.ChartCollection.getItemAt
  summary: >-
    Extrait un graphique en fonction de sa position dans la collection.


    \[[Ensemble d'API: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemAt(index)
  fullName: getItemAt(index)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemAt(index: number): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.count - 1;\n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItemAt(lastPosition);\n    return ctx.sync().then(function() {\n            console.log(chart.name);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: index
      description: Valeur d’indice de l’objet à récupérer. Avec indice zéro.
      type:
      - number
- uid: excel_release.Excel.ChartCollection.getItemOrNullObject
  summary: >-
    Obtient un graphique à l'aide de son nom. S'il existe plusieurs graphiques portant le même nom, le premier est renvoyé. Si le graphique n'existe pas, renvoie un objet null.


    \[[Ensemble d'API: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: getItemOrNullObject(name)
  fullName: getItemOrNullObject(name)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'getItemOrNullObject(name: string): Excel.Chart;'
    return:
      type:
      - excel.Excel.Chart
      description: ''
    parameters:
    - id: name
      description: Nom du graphique à extraire.
      type:
      - string
- uid: excel_release.Excel.ChartCollection.items
  summary: Obtient les éléments enfants chargés dans cette collection.
  name: items
  fullName: items
  langs:
  - typeScript
  type: property
  syntax:
    content: 'readonly items: Excel.Chart[];'
    return:
      type:
      - Excel.Chart[]
- uid: excel_release.Excel.ChartCollection.load
  summary: Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet. Vous devez appeler «Context. Sync ()» avant de lire les propriétés.
  remarks: >-
    En plus de cette signature, cette méthode possède les signatures suivantes:


    `load(option?: string | string[]): Excel.ChartCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.


    `load(option?: { select?: string; expand?: string; }): Excel.ChartCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.


    `load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.ChartCollection`-Uniquement disponible sur les types de collection. Elle est similaire à la signature précédente. Option. Top indique le nombre maximal d'éléments de collection qui peuvent être inclus dans le résultat. Option. Skip indique le nombre d'éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat. Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d'éléments.
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - Excel.Interfaces.ChartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
- uid: excel_release.Excel.ChartCollection.load_1
  summary: Met en file d'attente une commande pour charger les propriétés spécifiées de l'objet. Vous devez appeler `context.sync()` avant de lire les propriétés.
  name: load(propertyNames)
  fullName: load(propertyNames)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < charts.items.length; i++)\n        {\n            console.log(charts.items[i].name);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of charts\nExcel.run(function (ctx) { \n    var charts = ctx.workbook.worksheets.getItem(\"Sheet1\").charts;\n    charts.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"charts: Count= \" + charts.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
    parameters:
    - id: propertyNames
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: excel_release.Excel.ChartCollection.load_2
  name: load(option)
  fullName: load(option)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: OfficeExtension.LoadOption): Excel.ChartCollection;'
    return:
      type:
      - excel.Excel.ChartCollection
      description: ''
    parameters:
    - id: option
      description: ''
      type:
      - office.OfficeExtension.LoadOption
- uid: excel_release.Excel.ChartCollection.onActivated
  summary: >-
    Se produit lorsqu'un graphique est activé.


    \[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onActivated
  fullName: onActivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onActivated: OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.ChartActivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onActivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The ID of the active chart is: \" + event.chartId)\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel_release.Excel.ChartCollection.onAdded
  summary: >-
    SurVient lors de l'ajout d'un nouveau graphique à la feuille de calcul.


    \[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onAdded
  fullName: onAdded
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onAdded: OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.ChartAddedEventArgs>
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onAdded.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"A chart has been added with ID: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel_release.Excel.ChartCollection.onDeactivated
  summary: >-
    Se produit lorsqu'un graphique est désactivé.


    \[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onDeactivated
  fullName: onDeactivated
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeactivated: OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.ChartDeactivatedEventArgs>
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onDeactivated.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The chart with this ID was deactivated: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel_release.Excel.ChartCollection.onDeleted
  summary: >-
    SurVient lors de la suppression d'un graphique.


    \[[Ensemble d'API: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  name: onDeleted
  fullName: onDeleted
  langs:
  - typeScript
  type: event
  syntax:
    content: 'readonly onDeleted: OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>;'
    return:
      type:
      - OfficeExtension.EventHandlers<Excel.ChartDeletedEventArgs>
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\nExcel.run(function (context){\n    context.workbook.worksheets.getActiveWorksheet()\n        .charts.onDeleted.add(function (event) {\n        return Excel.run((context) => {\n            console.log(\"The chart with this ID was deleted: \" + event.chartId);\n            return context.sync();\n        });\n    });\n    return context.sync();\n});\n```"
- uid: excel_release.Excel.ChartCollection.toJSON
  summary: Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu'un objet d'API est transmis à. `JSON.stringify()` <!-- --> (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l'objet qui lui est passé.) Tandis que `Excel.ChartCollection` l'objet d'origine est un objet `toJSON` d'API, la méthode renvoie un objet JavaScript `Excel.Interfaces.ChartCollectionData` <!-- -->simple (tapé sous la forme) qui contient un tableau d'éléments avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.
  name: toJSON()
  fullName: toJSON()
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartCollectionData;'
    return:
      type:
      - excel.Excel.Interfaces.ChartCollectionData
      description: ''
