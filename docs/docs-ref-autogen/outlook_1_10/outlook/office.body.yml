### YamlMime:TSType
name: Office.Body
uid: outlook!Office.Body:interface
package: outlook!
fullName: Office.Body
summary: >-
  L’objet body fournit des méthodes pour ajouter et mettre à jour le contenu du message ou du rendez-vous. Il est renvoyé dans la propriété body de l’élément sélectionné.


  \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**  : Rédiger ou Lire
isPreview: false
isDeprecated: false
type: interface
methods:
- name: appendOnSendAsync(data, options, callback)
  uid: outlook!Office.Body#appendOnSendAsync:member(1)
  package: outlook!
  fullName: appendOnSendAsync(data, options, callback)
  summary: >-
    S’arrête lors de l’envoi du contenu spécifié à la fin du corps de l’élément, après toute signature.


    Si l’utilisateur exécute des modules qui implémentent la fonctionnalité d’envoi à [l’aide \` d’ItemSend \` dans le manifeste](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, l’append-on-send s’exécute avant la fonctionnalité d’envoi.


    **Important**: si votre application implémente la fonctionnalité d’envoi et les appels dans le handler, l’appel renvoie une erreur, car ce `appendOnSendAsync` `ItemSend` scénario `appendOnSendAsync` n’est pas pris en charge.


    **Important**: à utiliser `appendOnSendAsync`<!-- -->, le `ExtendedPermissions` nœud de manifeste doit inclure `AppendOnSend` l’autorisation étendue.


    **Remarque**: pour effacer les données d’un appel précédent, vous pouvez les appeler à nouveau `appendOnSendAsync` avec le paramètre définie `data` sur `null`<!-- -->.


    \[[Ensemble d’API : Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: `data` le paramètre est plus de 5 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable, `Office.CoercionType.Html` mais le corps du message est en texte simple.


    #### <a name="examples"></a>Exemples


    ```javascript

    Office.context.mailbox.item.body.appendOnSendAsync(
        "P.S. This text was appended on send.",
        {coercionType: Office.CoercionType.Html},
        function (asyncResult) {
            if (asyncResult.status === Office.AsyncResultStatus.Failed) {
                console.log("Action failed with error: " + asyncResult.error.message);
            }
        }
    );

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendOnSendAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne à ajouter à la fin du corps. La chaîne est limitée à 5 000 caractères.
      type: string
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel. `coercionType`<!-- -->: format souhaité pour les données à y être appendées. La chaîne du paramètre `data` est convertie dans ce format.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: appendOnSendAsync(data, callback)
  uid: outlook!Office.Body#appendOnSendAsync:member(2)
  package: outlook!
  fullName: appendOnSendAsync(data, callback)
  summary: >-
    S’arrête lors de l’envoi du contenu spécifié à la fin du corps de l’élément, après toute signature.


    Si l’utilisateur exécute des modules qui implémentent la fonctionnalité d’envoi à [l’aide \` d’ItemSend \` dans le manifeste](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-on-send-addins?tabs=windows)<!-- -->, l’append-on-send s’exécute avant la fonctionnalité d’envoi.


    **Important**: si votre application implémente la fonctionnalité d’envoi et les appels dans le handler, l’appel renvoie une erreur, car ce `appendOnSendAsync` `ItemSend` scénario `appendOnSendAsync` n’est pas pris en charge.


    **Important**: à utiliser `appendOnSendAsync`<!-- -->, le `ExtendedPermissions` nœud de manifeste doit inclure `AppendOnSend` l’autorisation étendue.


    **Remarque**: pour effacer les données d’un appel précédent, vous pouvez les appeler à nouveau `appendOnSendAsync` avec le paramètre définie `data` sur `null`<!-- -->.


    \[[Ensemble d’API : Mailbox 1.9](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: `data` le paramètre est plus de 5 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable, `Office.CoercionType.Html` mais le corps du message est en texte simple.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'appendOnSendAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne à ajouter à la fin du corps. La chaîne est limitée à 5 000 caractères.
      type: string
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(coercionType, options, callback)
  uid: outlook!Office.Body#getAsync:member(1)
  package: outlook!
  fullName: getAsync(coercionType, options, callback)
  summary: >-
    Renvoie le corps actif dans un format spécifié.


    Cette méthode renvoie l’intégralité du corps actuel au format spécifié par `coercionType`<!-- -->.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que les méthodes et les méthodes ne sont `Body.getAsync` `Body.setAsync` pas idempotentes. La valeur renvoyée par la méthode ne sera pas nécessairement identique à celle qui a été passée précédemment `getAsync` dans `setAsync` la méthode. Le client peut modifier la valeur transmise afin de le rendre `setAsync` efficacement avec son moteur de rendu.


    \[[Ensemble d’API : Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**  : Rédiger ou Lire


    #### <a name="examples"></a>Exemples


    ```javascript

    // This example gets the body of the item as plain text.

    Office.context.mailbox.item.body.getAsync(
        "text",
        { asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Do something with the result.
        });

    // The following is an example of the result parameter passed to the callback function.

    {
        "value": "TEXT of whole body (including threads below)",
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(coercionType: Office.CoercionType | string, options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Format du corps renvoyé.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: options
      description: 'Littéral d’objet qui contient une ou plusieurs des propriétés suivantes : `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec un seul paramètre `callback` de type Office. AsyncResult. Le corps est fourni au format demandé dans la `asyncResult.value` propriété.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(coercionType, callback)
  uid: outlook!Office.Body#getAsync:member(2)
  package: outlook!
  fullName: getAsync(coercionType, callback)
  summary: >-
    Renvoie le corps actif dans un format spécifié.


    Cette méthode renvoie l’intégralité du corps actuel au format spécifié par `coercionType`<!-- -->.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que les méthodes et les méthodes ne sont `Body.getAsync` `Body.setAsync` pas idempotentes. La valeur renvoyée par la méthode ne sera pas nécessairement identique à celle qui a été passée précédemment `getAsync` dans `setAsync` la méthode. Le client peut modifier la valeur transmise afin de le rendre `setAsync` efficacement avec son moteur de rendu.


    \[[Ensemble d’API : Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)<!-- -->**  : Rédiger ou Lire
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(coercionType: Office.CoercionType | string, callback?: (asyncResult: Office.AsyncResult<string>) => void): void;'
    parameters:
    - id: coercionType
      description: Format du corps renvoyé.
      type: <xref uid="office!Office.CoercionType:enum" /> | string
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec un seul paramètre `callback` de type Office. AsyncResult. Le corps est fourni au format demandé dans la `asyncResult.value` propriété.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTypeAsync(options, callback)
  uid: outlook!Office.Body#getTypeAsync:member(1)
  package: outlook!
  fullName: getTypeAsync(options, callback)
  summary: >-
    Obtient une valeur qui indique si le contenu est au format HTML ou texte.


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    #### <a name="examples"></a>Exemples


    ```javascript

    Office.context.mailbox.item.body.getTypeAsync(function (asyncResult) {
        if (asyncResult.status === "failed") {
            console.log("Action failed with error: " + asyncResult.error.message);
        } else {
            console.log("Body type: " + asyncResult.value);
        }
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTypeAsync(options: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
    parameters:
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Le type de contenu est renvoyé en tant que l’une des `CoercionType` valeurs de la `asyncResult.value` propriété.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CoercionType:enum" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTypeAsync(callback)
  uid: outlook!Office.Body#getTypeAsync:member(2)
  package: outlook!
  fullName: getTypeAsync(callback)
  summary: >-
    Obtient une valeur qui indique si le contenu est au format HTML ou texte.


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTypeAsync(callback?: (asyncResult: Office.AsyncResult<Office.CoercionType>) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Le type de contenu est renvoyé en tant que l’une des `CoercionType` valeurs de la `asyncResult.value` propriété.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.CoercionType:enum" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: prependAsync(data, options, callback)
  uid: outlook!Office.Body#prependAsync:member(1)
  package: outlook!
  fullName: prependAsync(data, options, callback)
  summary: >-
    Ajoute le contenu spécifié au début du corps de l’élément.


    La méthode `prependAsync` insère la chaîne spécifiée au début du corps de l’élément. Après l’insertion, le curseur est renvoyé à son endroit d’origine, par rapport au contenu inséré.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que le client peut modifier la valeur transmise afin de la rendre plus efficace avec son moteur `prependAsync` de rendu. Cela signifie que la valeur renvoyée par un appel ultérieur à la méthode ne contiendra pas nécessairement exactement la valeur qui a été passée précédemment `Body.getAsync` dans `prependAsync` la méthode.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu de lien en ligne en attribuant l’attribut `id` au point d’ancrage (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: le paramètre de données est plus de 1 000 000 caractères.


    #### <a name="examples"></a>Exemples


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.prependAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prependAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: La chaîne doit être insérée au début du corps. Elle est limitée à un million de caractères.
      type: string
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel. `coercionType`<!-- -->: format souhaité pour le corps. La chaîne du paramètre `data` est convertie dans ce format.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: prependAsync(data, callback)
  uid: outlook!Office.Body#prependAsync:member(2)
  package: outlook!
  fullName: prependAsync(data, callback)
  summary: >-
    Ajoute le contenu spécifié au début du corps de l’élément.


    La méthode `prependAsync` insère la chaîne spécifiée au début du corps de l’élément. Après l’insertion, le curseur est renvoyé à son endroit d’origine, par rapport au contenu inséré.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que le client peut modifier la valeur transmise afin de la rendre plus efficace avec son moteur `prependAsync` de rendu. Cela signifie que la valeur renvoyée par un appel ultérieur à la méthode ne contiendra pas nécessairement exactement la valeur qui a été passée précédemment `Body.getAsync` dans `prependAsync` la méthode.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu des liens en ligne en attribuant l’attribut `id` au point d’ancrage (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: le paramètre de données est plus de 1 000 000 caractères.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'prependAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: La chaîne doit être insérée au début du corps. Elle est limitée à un million de caractères.
      type: string
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(data, options, callback)
  uid: outlook!Office.Body#setAsync:member(1)
  package: outlook!
  fullName: setAsync(data, options, callback)
  summary: >-
    Remplace l’ensemble du corps avec le texte spécifié.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que les méthodes et les méthodes ne sont `Body.getAsync` `Body.setAsync` pas idempotentes. La valeur renvoyée par la méthode ne sera pas nécessairement identique à celle qui a été passée précédemment `getAsync` dans `setAsync` la méthode. Le client peut modifier la valeur transmise afin de le rendre `setAsync` efficacement avec son moteur de rendu.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu des liens en ligne en attribuant l’attribut `id` au point d’ancrage (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: le paramètre de données est plus de 1 000 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable `Office.CoercionType.Html` et le corps du message est en texte simple.


    #### <a name="examples"></a>Exemples


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.setAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    Office.context.mailbox.item.body.setAsync(
        "<b>(replaces all body, including threads you are replying to that may be on the bottom)</b>",
        { coercionType: "html", asyncContext: "This is passed to the callback" },
        function callback(result) {
            // Process the result.
    });


    // The following is an example of the result parameter passed to the callback function.

    {
        "value":null,
        "status": "succeeded",
        "asyncContext": "This is passed to the callback"
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne qui remplace le corps existant. Elle est limitée à 1 000 000 caractères.
      type: string
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel. `coercionType`<!-- -->: format souhaité pour le corps. La chaîne du paramètre `data` est convertie dans ce format.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec un seul paramètre `callback` de type Office. AsyncResult. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(data, callback)
  uid: outlook!Office.Body#setAsync:member(2)
  package: outlook!
  fullName: setAsync(data, callback)
  summary: >-
    Remplace l’ensemble du corps avec le texte spécifié.


    Lorsque vous travaillez avec des corps au format HTML, il est important de noter que les méthodes et les méthodes ne sont `Body.getAsync` `Body.setAsync` pas idempotentes. La valeur renvoyée par la méthode ne sera pas nécessairement identique à celle qui a été passée précédemment `getAsync` dans `setAsync` la méthode. Le client peut modifier la valeur transmise afin de le rendre `setAsync` efficacement avec son moteur de rendu.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu des liens en ligne en attribuant l’attribut `id` au point d’ancrage (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.3](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: le paramètre de données est plus de 1 000 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable `Office.CoercionType.Html` et le corps du message est en texte simple.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne qui remplace le corps existant. Elle est limitée à 1 000 000 caractères.
      type: string
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec un seul paramètre `callback` de type Office. AsyncResult. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, options, callback)
  uid: outlook!Office.Body#setSelectedDataAsync:member(1)
  package: outlook!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: >-
    Remplace la sélection dans le corps par le texte spécifié.


    La méthode `setSelectedDataAsync` insère la chaîne spécifiée à l’emplacement du curseur dans le corps de l’élément ou, si du texte est sélectionné dans l’éditeur, elle remplace ce texte. Si le curseur ne s’est jamais trouvé dans le corps de l’élément, ou si le corps de l’élément n’est plus la partie active de l’interface utilisateur, la chaîne est insérée au début du corps de l’élément. Après l’insertion, le curseur est placé à la fin du contenu inséré.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu de lien en ligne en setting the id attribute on the anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: `data` le paramètre est plus de 1 000 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable `Office.CoercionType.Html` et le corps du message est en texte simple.


    #### <a name="examples"></a>Exemples


    ```javascript

    // When including links in HTML markup, you can disable online link preview

    // by setting the id attribute on the anchor (<a>) to "LPNoLP".

    Office.context.mailbox.item.body.setSelectedDataAsync(
        '<a id="LPNoLP" href="http://www.contoso.com">Click here!</a>',
        {coercionType: Office.CoercionType.Html},
        callback);
    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, options: Office.AsyncContextOptions & CoercionTypeOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne qui remplace le corps existant. Elle est limitée à 1 000 000 caractères.
      type: string
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel. `coercionType`<!-- -->: format souhaité pour le corps. La chaîne du paramètre `data` est convertie dans ce format.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" /> & <xref uid="outlook!Office.CoercionTypeOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: outlook!Office.Body#setSelectedDataAsync:member(2)
  package: outlook!
  fullName: setSelectedDataAsync(data, callback)
  summary: >-
    Remplace la sélection dans le corps par le texte spécifié.


    La méthode `setSelectedDataAsync` insère la chaîne spécifiée à l’emplacement du curseur dans le corps de l’élément ou, si du texte est sélectionné dans l’éditeur, elle remplace ce texte. Si le curseur ne s’est jamais trouvé dans le corps de l’élément, ou si le corps de l’élément n’est plus la partie active de l’interface utilisateur, la chaîne est insérée au début du corps de l’élément. Après l’insertion, le curseur est placé à la fin du contenu inséré.


    Lorsque vous insérez des liens dans le code HTML, vous pouvez désactiver l’aperçu de lien en ligne en setting the id attribute on the anchor (<!-- -->&lt;<!-- -->a<!-- -->&gt;<!-- -->) à « LPNoLP » (voir la section **Exemples** pour un exemple).


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `DataExceedsMaximumSize`<!-- -->: `data` le paramètre est plus de 1 000 000 caractères.


    - `InvalidFormatError`<!-- -->: le `options.coercionType` paramètre est paramétrable `Office.CoercionType.Html` et le corps du message est en texte simple.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: Chaîne qui remplace le corps existant. Elle est limitée à 1 000 000 caractères.
      type: string
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Les erreurs rencontrées seront indiquées dans la propriété `asyncResult.error`.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 7cfa342c9bd045b38e35e1b0527019f3f0fc834d
  ms.sourcegitcommit: fc08f53e68f6acec0b6de81691ac5920f3974ed4
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 05/21/2021
  ms.locfileid: "52591508"
