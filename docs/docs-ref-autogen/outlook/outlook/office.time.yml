### YamlMime:TSType
name: Office.Time
uid: outlook!Office.Time:interface
package: outlook!
fullName: Office.Time
summary: >-
  L’objet est renvoyé en tant que propriété de début ou de fin `Time` d’un rendez-vous en mode composition.


  \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
remarks: >-
  **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


  **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer
isPreview: false
isDeprecated: false
type: interface
methods:
- name: getAsync(options, callback)
  uid: outlook!Office.Time#getAsync:member(1)
  package: outlook!
  fullName: getAsync(options, callback)
  summary: >-
    Obtient l’heure de début ou de fin d’un rendez-vous.


    La date et l’heure sont fournies en tant `Date` qu’objet dans la `asyncResult.value` propriété. La valeur est exprimée au format UTC (temps universel coordonné). Vous pouvez convertir l’heure UTC en heure du client local à l’aide de la `convertToLocalClientTime` méthode.


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(options: Office.AsyncContextOptions, callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: options
      description: 'Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. La `value` propriété du résultat est un `Date` objet.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getAsync(callback)
  uid: outlook!Office.Time#getAsync:member(2)
  package: outlook!
  fullName: getAsync(callback)
  summary: >-
    Obtient l’heure de début ou de fin d’un rendez-vous.


    La date et l’heure sont fournies en tant `Date` qu’objet dans la `asyncResult.value` propriété. La valeur est exprimée au format UTC (temps universel coordonné). Vous pouvez convertir l’heure UTC en heure du client local à l’aide de la `convertToLocalClientTime` méthode.


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    #### <a name="examples"></a>Exemples


    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Appointment starts: ${result.value}`);
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getAsync(callback: (asyncResult: Office.AsyncResult<Date>) => void): void;'
    parameters:
    - id: callback
      description: Une fois la méthode terminée, la fonction passée dans le paramètre de rappel est appelée avec un seul paramètre de type `Office.AsyncResult`<!-- -->. La `value` propriété du résultat est un `Date` objet.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;Date&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setAsync(dateTime, options, callback)
  uid: outlook!Office.Time#setAsync:member(1)
  package: outlook!
  fullName: setAsync(dateTime, options, callback)
  summary: >-
    Définit l’heure de début ou de fin d’un rendez-vous.


    Si la méthode est appelée sur la propriété de début, la propriété est ajustée pour maintenir la durée du `setAsync` `end` rendez-vous comme précédemment définie. Si la méthode `setAsync` est appelée dans la propriété `end`, la durée du rendez-vous est étendue jusqu’à la nouvelle heure de fin.


    La durée doit être exprimée au format UTC. Vous pouvez obtenir l’heure UTC correcte à l’aide de la méthode `convertToUtcClientTime`.


    **Important**: dans le client Windows, vous ne pouvez pas utiliser cette fonction pour mettre à jour le début ou la fin d’une récurrence.


    \[[Ensemble d’API : Mailbox 1.1](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\]
  remarks: >-
    **[Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions) <!-- -->**:`ReadWriteItem`


    **[Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points) <!-- -->**: Composer


    **Erreurs**:


    - `InvalidEndTime`<!-- -->: l’heure de fin du rendez-vous se trouve avant l’heure de début du rendez-vous.


    #### <a name="examples"></a>Exemples


    ```javascript

    var startTime = new Date("3/14/2015");

    var options = {
        // Pass information that can be used in the callback.
        asyncContext: {verb: "Set"}
    };

    Office.context.mailbox.item.start.setAsync(startTime, options, function(result) {
        if (result.error) {
            console.debug(result.error);
        } else {
            // Access the asyncContext that was passed to the setAsync function.
            console.debug("Start Time " + result.asyncContext.verb);
        }
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-start-appointment-organizer.yaml

    var start = new Date(); // Represents current date and time.

    start.setDate(start.getDate() + 2); // Add 2 days to current date.

    Office.context.mailbox.item.start.setAsync(start, (result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Action failed with message ${result.error.message}`);
        return;
      }
      console.log(`Successfully set start date and time to ${start}`);
    });

    ```

    ```javascript

    // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/outlook/90-other-item-apis/get-set-end-appointment-organizer.yaml

    Office.context.mailbox.item.start.getAsync((result) => {
      if (result.status !== Office.AsyncResultStatus.Succeeded) {
        console.error(`Get start date failed with message ${result.error.message}`);
        return;
      }

      var end = result.value; // Set end to current start date and time.
      end.setDate(end.getDate() + 1); // Set end as 1 day later than start date.
      Office.context.mailbox.item.end.setAsync(end, (result) => {
        if (result.status !== Office.AsyncResultStatus.Succeeded) {
          console.error(`Set end date failed with message ${result.error.message}`);
          return;
        }
        console.log(`Successfully set end date and time to ${end}`);
      });
    });

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setAsync(dateTime: Date, options?: Office.AsyncContextOptions, callback?: (asyncResult: Office.AsyncResult<void>) => void): void;'
    parameters:
    - id: dateTime
      description: Objet date-heure en temps universel coordonné (UTC).
      type: Date
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. `asyncContext`<!-- -->: les développeurs peuvent fournir n’importe quel objet à accéder dans la méthode de rappel.'
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Une fois la méthode terminée, la fonction passée dans le paramètre est appelée avec `callback` un seul paramètre de type `Office.AsyncResult`<!-- -->. Si la définition de la date et de l’heure échoue, la propriété `asyncResult.error` contient un code d’erreur.
      type: '(asyncResult: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 2a8c23152849591736cb0802711df7a011cbf5d7
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49850716"
