### YamlMime:UniversalReference
items:
  - uid: 'outlook!Office.CustomProperties:interface'
    summary: |-
      L’objet `CustomProperties` représente les propriétés personnalisées qui sont propres à un élément particulier et à un complément de messagerie pour Outlook. Par exemple, il peut s’avérer nécessaire pour un complément de messagerie d’enregistrer certaines données propres au message électronique actif ayant activé le complément. Quand l’utilisateur consulte à nouveau le même message et réactive le complément de messagerie, ce dernier peut récupérer les données enregistrées en tant que propriétés personnalisées. **Important**: la longueur maximale d’un `CustomProperties` objet JSON est de 2500 caractères.

      Étant donné qu’Outlook sur Mac ne met pas en cache les propriétés personnalisées, si le réseau de l’utilisateur tombe en panne, les compléments de messagerie ne peuvent pas accéder à leurs propriétés personnalisées.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    name: Office.CustomProperties
    fullName: Office.CustomProperties
    langs:
      - typeScript
    type: interface
    package: outlook!
    children:
      - 'outlook!Office.CustomProperties#get:member(1)'
      - 'outlook!Office.CustomProperties#getAll:member(1)'
      - 'outlook!Office.CustomProperties#remove:member(1)'
      - 'outlook!Office.CustomProperties#saveAsync:member(1)'
      - 'outlook!Office.CustomProperties#set:member(1)'
  - uid: 'outlook!Office.CustomProperties#get:member(1)'
    summary: Retourne la valeur de la propriété personnalisée spécifiée.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      var propertyValue = customProps.get(propertyName);
      $("#propertyValue").val(propertyValue);
      console.log(`The value of custom property "${propertyName}" is "${propertyValue}".`);
      ```
    name: get(name)
    fullName: get(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'get(name: string): any;'
      return:
        type:
          - any
        description: Valeur de la propriété personnalisée spécifiée.
      parameters:
        - id: name
          description: Nom de la propriété personnalisée à retourner.
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#getAll:member(1)'
    summary: "Renvoie un objet avec toutes les propriétés personnalisées dans une collection de paires nom/valeur. Les éléments suivants sont équivalents.\n\n`customProps.get(\"name\")`\n\n`var dictionary = customProps.getAll(); dictionary[\"name\"]`\n\nVous pouvez parcourir l’objet Dictionary pour découvrir tout `names` et`values`<!-- -->.\n\n\\[[Ensemble d’API\_: aperçu de boîte aux lettres](/office/dev/add-ins/reference/requirement-sets/outlook-api-requirement-sets)\\]"
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture
    isPreview: true
    name: getAll()
    fullName: getAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAll(): any;'
      return:
        type:
          - any
        description: Objet avec toutes les propriétés personnalisées dans une collection de paires nom/valeur.
  - uid: 'outlook!Office.CustomProperties#remove:member(1)'
    summary: |-
      Supprime la propriété spécifiée de la collection de propriétés personnalisées.

      Pour rendre la suppression de la propriété permanente, vous devez appeler la méthode `saveAsync` de l’objet `CustomProperties`.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      customProps.remove(propertyName);
      console.log(`Custom property "${propertyName}" removed.`);
      ```
    name: remove(name)
    fullName: remove(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'remove(name: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: '`name`De la propriété à supprimer.'
          type:
            - string
  - uid: 'outlook!Office.CustomProperties#saveAsync:member(1)'
    summary: |-
      Enregistre les propriétés personnalisées propres aux éléments sur le serveur.

      Vous devez appeler la méthode `saveAsync` pour conserver les modifications effectuées avec la méthode `set` ou la méthode `remove` de l’objet `CustomProperties`. L’enregistrement est une action asynchrone.

      Il est recommandé que votre fonction de rappel vérifie et gère les erreurs à partir de`saveAsync`<!-- -->. Plus particulièrement, un complément de lecture peut être activé lorsque l’utilisateur est connecté dans un formulaire de lecture, puis l’utilisateur peut se déconnecter. Si le complément appelle `saveAsync` lorsqu’il est déconnecté, `saveAsync` renvoie une erreur. La méthode de rappel doit pouvoir gérer cette erreur.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // The following JavaScript code sample shows how to asynchronously use
      // the loadCustomPropertiesAsync method to load custom properties that
      // are specific to the current item, and the saveAsync method to save
      // these properties back to the server. After loading the custom properties,
      // the code sample uses the get method to read the custom property myProp,
      // the set method to write the custom property myProp, and then finally
      // calls the saveAsync method to save the custom properties.

      // The initialize function is required for all add-ins.
      Office.initialize = function () {
          // Checks for the DOM to load using the jQuery ready function.
          $(document).ready(function () {
              // After the DOM is loaded, add-in-specific code can run.
              var item = Office.context.mailbox.item;
              item.loadCustomPropertiesAsync(customPropsCallback);
          });
      };

      function customPropsCallback(asyncResult) {
          var customProps = asyncResult.value;
          var myProp = customProps.get("myProp");
          console.log("myProp: " + myProp); // First run on current item will return `undefined`.

          // Set myProp custom property.
          customProps.set("myProp", "value");
          customProps.saveAsync(saveCallback);
      }

      function saveCallback(asyncResult) {
          if (asyncResult.status === Office.AsyncResultStatus.Failed) {
              console.error(asyncResult.error.message);
          }
          else {
              // Async call to save custom properties completed.
              // Proceed to do the appropriate for your add-in.
          }
      }
      ```
    name: 'saveAsync(callback, asyncContext)'
    fullName: 'saveAsync(callback, asyncContext)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'saveAsync(callback?: (asyncResult: Office.AsyncResult<void>) => void, asyncContext?: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Facultatif. Une fois la méthode exécutée, la fonction transmise au `callback` paramètre est appelée avec un seul paramètre de type`Office.AsyncResult`<!-- -->.'
          type:
            - 'outlook!Office.CustomProperties#saveAsync~0:complex'
        - id: asyncContext
          description: Facultatif. Toutes les données d’état transmises à la méthode de rappel.
          type:
            - any
  - uid: 'outlook!Office.CustomProperties#set:member(1)'
    summary: |-
      Affecte la valeur spécifiée à la propriété spécifiée.

      La méthode `set` affecte la valeur spécifiée à la propriété spécifiée. Vous devez utiliser la méthode `saveAsync` pour enregistrer la propriété sur le serveur.

      The `set` method creates a new property if the specified property does not already exist; otherwise, the existing value is replaced with the new value. The `value` parameter can be of any type; however, it is always passed to the server as a string.
    remarks: |-
      ** <!-- --> [Niveau d’autorisation minimal](https://docs.microsoft.com/office/dev/add-ins/outlook/understanding-outlook-add-in-permissions)**:`ReadItem`

      ** <!-- --> [Mode Outlook applicable](https://docs.microsoft.com/office/dev/add-ins/outlook/outlook-add-ins-overview#extension-points)**: composition ou lecture

      #### <a name="examples"></a>Exemples

      ```javascript
      // Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/master/samples/outlook/15-item-custom-properties/load-set-get-save.yaml
      var propertyName = $("#propertyName").val();
      var propertyValue = $("#propertyValue").val();
      customProps.set(propertyName, propertyValue);
      console.log(`Custom property "${propertyName}" set to value "${propertyValue}".`);
      ```
    name: 'set(name, value)'
    fullName: 'set(name, value)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(name: string, value: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: name
          description: Nom de la propriété à définir.
          type:
            - string
        - id: value
          description: Valeur de la propriété à définir.
          type:
            - string
references:
  - uid: 'outlook!Office.CustomProperties#saveAsync~0:complex'
    name: '(asyncResult: Office.AsyncResult<void>) => void'
    fullName: '(asyncResult: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(asyncResult: '
        fullName: '(asyncResult: '
      - uid: 'office!Office.AsyncResult:interface'
        name: Office.AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void