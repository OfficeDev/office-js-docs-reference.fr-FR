### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    summary: "<span data-ttu-id=\"dd8ea-101\">Collection de parties XML personnalisées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-101\">A collection of custom XML parts.</span></span>\n\n<span data-ttu-id=\"dd8ea-102\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-102\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartCollection#add:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#context:member'
      - 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#items:member'
      - 'excel!Excel.CustomXmlPartCollection#load:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#load:member(2)'
      - 'excel!Excel.CustomXmlPartCollection#load:member(3)'
      - 'excel!Excel.CustomXmlPartCollection#toJSON:member(1)'
  - uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-103\">Ajoute une nouvelle partie XML personnalisée au classeur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-103\">Adds a new custom XML part to the workbook.</span></span>\n\n<span data-ttu-id=\"dd8ea-104\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-104\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dd8ea-105">Exemples</span><span class="sxs-lookup"><span data-stu-id="dd8ea-105">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              const originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              const customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              const xmlBlob = customXmlPart.getXml();

              await context.sync();

              const readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              const settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          });
          ```
      parameters:
        - id: xml
          description: <span data-ttu-id="dd8ea-106">Contenu XML.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-106">XML content.</span></span> <span data-ttu-id="dd8ea-107">Doit être un fragment XML valide.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-107">Must be a valid XML fragment.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#context:member'
    summary: <span data-ttu-id="dd8ea-108">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-108">The request context associated with the object.</span></span> <span data-ttu-id="dd8ea-109">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-109">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.CustomXmlPartCollection#getByNamespace:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-110\">Obtient une nouvelle collection limitée de parties XML personnalisées dont les espaces de noms correspondent à l’espace de noms donné.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-110\">Gets a new scoped collection of custom XML parts whose namespaces match the given namespace.</span></span>\n\n<span data-ttu-id=\"dd8ea-111\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-111\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getByNamespace(namespaceUri)
    fullName: getByNamespace(namespaceUri)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getByNamespace(namespaceUri: string): Excel.CustomXmlPartScopedCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartScopedCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dd8ea-112">Exemples</span><span class="sxs-lookup"><span data-stu-id="dd8ea-112">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              $("#display-xml").text("");
              const contosoNamespace = "http://schemas.contoso.com/review/1.0";
              const customXmlParts = context.workbook.customXmlParts;
              const filteredXmlParts = customXmlParts.getByNamespace(contosoNamespace);
              const numberOfPartsInNamespace = filteredXmlParts.getCount();

              await context.sync();

              if (numberOfPartsInNamespace.value == 1) {
                  const onlyXmlPartInNamespace = filteredXmlParts.getOnlyItem();
                  const xmlBlob = onlyXmlPartInNamespace.getXml();

                  await context.sync();

                  // Make it a bit more readable.
                  const readableXml = xmlBlob.value.replace(/></g, ">\n<");

                  $("#display-xml").text(`The only XML part in the namespace ${contosoNamespace} is:
                      ${readableXml}`);

              } else {
                  console.log(`There are ${numberOfPartsInNamespace.value} XML parts with namespace ${contosoNamespace}. There should be exactly 1.`);
              }        

              await context.sync();
          });
          ```
      parameters:
        - id: namespaceUri
          description: "<span data-ttu-id=\"dd8ea-113\">Il doit s’agir d’un URI de schéma complet\_; par exemple, \"http://schemas.contoso.com/review/1.0\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-113\">This must be a fully qualified schema URI; for example, \"http://schemas.contoso.com/review/1.0\".</span></span>"
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-114\">Obtient le nombre de parties CustomXml dans la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-114\">Gets the number of CustomXml parts in the collection.</span></span>\n\n<span data-ttu-id=\"dd8ea-115\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-115\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.CustomXmlPartCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-116\">Obtient une partie XML personnalisée en fonction de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-116\">Gets a custom XML part based on its ID.</span></span>\n\n<span data-ttu-id=\"dd8ea-117\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-117\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItem(id)
    fullName: getItem(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="dd8ea-118">Exemples</span><span class="sxs-lookup"><span data-stu-id="dd8ea-118">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const settings = context.workbook.settings;
              const xmlPartIDSetting = settings.getItemOrNullObject("ContosoReviewXmlPartId").load("value");
              await context.sync();

              if (xmlPartIDSetting.value) {   
                  const customXmlPart = context.workbook.customXmlParts.getItem(xmlPartIDSetting.value);

                  // The setXml method does a whole-for-whole replacement 
                  // of the entire XML.
                  customXmlPart.setXml("<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>John</Reviewer><Reviewer>Hitomi</Reviewer></Reviewers>");
                  const xmlBlob = customXmlPart.getXml();
                  await context.sync();

                  const readableXml = addLineBreaksToXML(xmlBlob.value);
                  $("#display-xml").text(readableXml);
                  await context.sync();
              }
          });
          ```
      parameters:
        - id: id
          description: <span data-ttu-id="dd8ea-119">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-119">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-120\">Obtient une partie XML personnalisée en fonction de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-120\">Gets a custom XML part based on its ID.</span></span> <span data-ttu-id=\"dd8ea-121\">Si l’objet CustomXmlPart n’existe pas, la propriété isNull de l’objet renvoie la valeur true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-121\">If the CustomXmlPart does not exist, the return object's isNull property will be true.</span></span>\n\n<span data-ttu-id=\"dd8ea-122\">\\[[Ensemble d’API\_: ExcelApi 1,5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-122\">\\[ [API set: ExcelApi 1.5](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): Excel.CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:class'
        description: ''
      parameters:
        - id: id
          description: <span data-ttu-id="dd8ea-123">ID de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-123">ID of the object to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#items:member'
    summary: <span data-ttu-id="dd8ea-124">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-124">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.CustomXmlPart[];'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection#items~0:complex'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-125\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-125\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"dd8ea-126\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-126\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: "<span data-ttu-id=\"dd8ea-127\">En plus de cette signature, cette méthode possède les signatures suivantes\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-127\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"dd8ea-128\">`load(option?: string | string[]): Excel.CustomXmlPartCollection`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-128\">`load(option?: string | string[]): Excel.CustomXmlPartCollection` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>\n\n<span data-ttu-id=\"dd8ea-129\">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-129\">`load(option?: { select?: string; expand?: string; }): Excel.CustomXmlPartCollection` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"dd8ea-130\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection`-Uniquement disponible sur les types de collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-130\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.CustomXmlPartCollection` - Only available on collection types.</span></span> <span data-ttu-id=\"dd8ea-131\">Elle est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-131\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"dd8ea-132\">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-132\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"dd8ea-133\">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-133\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"dd8ea-134\">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-134\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>"
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.CustomXmlPartCollection#load~0:complex'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(2)'
    summary: <span data-ttu-id="dd8ea-135">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-135">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="dd8ea-136">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-136">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="dd8ea-137">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="dd8ea-137">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(3)'
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: OfficeExtension.LoadOption): Excel.CustomXmlPartCollection;'
      return:
        type:
          - 'excel!Excel.CustomXmlPartCollection:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.CustomXmlPartCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"dd8ea-138\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-138\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"dd8ea-139\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-139\"></span></span> <span data-ttu-id=\"dd8ea-140\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-140\"></span></span><!-- --><span data-ttu-id=\"dd8ea-141\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.CustomXmlPartCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.CustomXmlPartCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-141\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.CustomXmlPartCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.CustomXmlPartCollectionData`</span></span><!-- --><span data-ttu-id=\"dd8ea-142\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"dd8ea-142\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.CustomXmlPartCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.CustomXmlPartCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.CustomXmlPart:class'
    name: Excel.CustomXmlPart
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.CustomXmlPartScopedCollection:class'
    name: Excel.CustomXmlPartScopedCollection
  - uid: 'excel!Excel.CustomXmlPartCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.CustomXmlPartCollection#items~0:complex'
    name: 'Excel.CustomXmlPart[]'
    fullName: 'Excel.CustomXmlPart[]'
    spec.typeScript:
      - uid: 'excel!Excel.CustomXmlPart:class'
        name: Excel.CustomXmlPart
        fullName: Excel.CustomXmlPart
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.CustomXmlPartCollection:class'
    name: Excel.CustomXmlPartCollection
  - uid: 'excel!Excel.CustomXmlPartCollection#load~0:complex'
    name: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.CustomXmlPartCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.CustomXmlPartCollectionLoadOptions:interface'
        name: Excel.Interfaces.CustomXmlPartCollectionLoadOptions
        fullName: Excel.Interfaces.CustomXmlPartCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.Interfaces.CustomXmlPartCollectionData:interface'
    name: Excel.Interfaces.CustomXmlPartCollectionData