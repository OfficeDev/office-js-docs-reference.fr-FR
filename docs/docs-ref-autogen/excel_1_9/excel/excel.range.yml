### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Range:class'
    summary: "<span data-ttu-id=\"0a83b-101\">La plage représente un ensemble d’une ou plusieurs cellules contiguës, telles qu’une cellule, une ligne, une colonne, un bloc de cellules, etc. Pour en savoir plus sur l’utilisation des plages tout au long de l’API, consultez la rubrique [utiliser des plages à l’aide de l’API JavaScript pour Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) et [utiliser des plages à l’aide de l’API JavaScript pour Excel (avancé)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-101\">Range represents a set of one or more contiguous cells such as a cell, a row, a column, block of cells, etc. To learn more about how ranges are used throughout the API, read [Work with ranges using the Excel JavaScript API](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) and [Work with ranges using the Excel JavaScript API (advanced)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced)</span></span><!-- --><span data-ttu-id=\"0a83b-102\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-102\"></span></span>\n\n<span data-ttu-id=\"0a83b-103\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-103\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.Range
    fullName: Excel.Range
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.Range#address:member'
      - 'excel!Excel.Range#addressLocal:member'
      - 'excel!Excel.Range#autoFill:member(1)'
      - 'excel!Excel.Range#autoFill:member(2)'
      - 'excel!Excel.Range#calculate:member(1)'
      - 'excel!Excel.Range#cellCount:member'
      - 'excel!Excel.Range#clear:member(1)'
      - 'excel!Excel.Range#clear:member(2)'
      - 'excel!Excel.Range#columnCount:member'
      - 'excel!Excel.Range#columnHidden:member'
      - 'excel!Excel.Range#columnIndex:member'
      - 'excel!Excel.Range#conditionalFormats:member'
      - 'excel!Excel.Range#context:member'
      - 'excel!Excel.Range#convertDataTypeToText:member(1)'
      - 'excel!Excel.Range#convertToLinkedDataType:member(1)'
      - 'excel!Excel.Range#copyFrom:member(1)'
      - 'excel!Excel.Range#copyFrom:member(2)'
      - 'excel!Excel.Range#dataValidation:member'
      - 'excel!Excel.Range#delete:member(1)'
      - 'excel!Excel.Range#delete:member(2)'
      - 'excel!Excel.Range#find:member(1)'
      - 'excel!Excel.Range#findOrNullObject:member(1)'
      - 'excel!Excel.Range#flashFill:member(1)'
      - 'excel!Excel.Range#format:member'
      - 'excel!Excel.Range#formulas:member'
      - 'excel!Excel.Range#formulasLocal:member'
      - 'excel!Excel.Range#formulasR1C1:member'
      - 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
      - 'excel!Excel.Range#getBoundingRect:member(1)'
      - 'excel!Excel.Range#getCell:member(1)'
      - 'excel!Excel.Range#getCellProperties:member(1)'
      - 'excel!Excel.Range#getColumn:member(1)'
      - 'excel!Excel.Range#getColumnProperties:member(1)'
      - 'excel!Excel.Range#getColumnsAfter:member(1)'
      - 'excel!Excel.Range#getColumnsBefore:member(1)'
      - 'excel!Excel.Range#getEntireColumn:member(1)'
      - 'excel!Excel.Range#getEntireRow:member(1)'
      - 'excel!Excel.Range#getImage:member(1)'
      - 'excel!Excel.Range#getIntersection:member(1)'
      - 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
      - 'excel!Excel.Range#getLastCell:member(1)'
      - 'excel!Excel.Range#getLastColumn:member(1)'
      - 'excel!Excel.Range#getLastRow:member(1)'
      - 'excel!Excel.Range#getOffsetRange:member(1)'
      - 'excel!Excel.Range#getResizedRange:member(1)'
      - 'excel!Excel.Range#getRow:member(1)'
      - 'excel!Excel.Range#getRowProperties:member(1)'
      - 'excel!Excel.Range#getRowsAbove:member(1)'
      - 'excel!Excel.Range#getRowsBelow:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(1)'
      - 'excel!Excel.Range#getSpecialCells:member(2)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
      - 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
      - 'excel!Excel.Range#getSurroundingRegion:member(1)'
      - 'excel!Excel.Range#getTables:member(1)'
      - 'excel!Excel.Range#getUsedRange:member(1)'
      - 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Range#getVisibleView:member(1)'
      - 'excel!Excel.Range#hidden:member'
      - 'excel!Excel.Range#hyperlink:member'
      - 'excel!Excel.Range#insert:member(1)'
      - 'excel!Excel.Range#insert:member(2)'
      - 'excel!Excel.Range#isEntireColumn:member'
      - 'excel!Excel.Range#isEntireRow:member'
      - 'excel!Excel.Range#linkedDataTypeState:member'
      - 'excel!Excel.Range#load:member(1)'
      - 'excel!Excel.Range#load:member(2)'
      - 'excel!Excel.Range#load:member(3)'
      - 'excel!Excel.Range#merge:member(1)'
      - 'excel!Excel.Range#numberFormat:member'
      - 'excel!Excel.Range#numberFormatLocal:member'
      - 'excel!Excel.Range#removeDuplicates:member(1)'
      - 'excel!Excel.Range#replaceAll:member(1)'
      - 'excel!Excel.Range#rowCount:member'
      - 'excel!Excel.Range#rowHidden:member'
      - 'excel!Excel.Range#rowIndex:member'
      - 'excel!Excel.Range#select:member(1)'
      - 'excel!Excel.Range#set:member(1)'
      - 'excel!Excel.Range#set:member(2)'
      - 'excel!Excel.Range#setCellProperties:member(1)'
      - 'excel!Excel.Range#setColumnProperties:member(1)'
      - 'excel!Excel.Range#setDirty:member(1)'
      - 'excel!Excel.Range#setRowProperties:member(1)'
      - 'excel!Excel.Range#showCard:member(1)'
      - 'excel!Excel.Range#sort:member'
      - 'excel!Excel.Range#style:member'
      - 'excel!Excel.Range#text:member'
      - 'excel!Excel.Range#toJSON:member(1)'
      - 'excel!Excel.Range#track:member(1)'
      - 'excel!Excel.Range#unmerge:member(1)'
      - 'excel!Excel.Range#untrack:member(1)'
      - 'excel!Excel.Range#values:member'
      - 'excel!Excel.Range#valueTypes:member'
      - 'excel!Excel.Range#worksheet:member'
  - uid: 'excel!Excel.Range#address:member'
    summary: "<span data-ttu-id=\"0a83b-104\">Représente la référence de plage dans le style a1.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-104\">Represents the range reference in A1-style.</span></span> <span data-ttu-id=\"0a83b-105\">La valeur de l’adresse contiendra la référence de la feuille (par exemple, «Sheet1\_! A1\_: B4 \").</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-105\">Address value will contain the Sheet reference (e.g. \"Sheet1!A1:B4\").</span></span> <span data-ttu-id=\"0a83b-106\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-106\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-107\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-107\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: address
    fullName: address
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly address: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#addressLocal:member'
    summary: "<span data-ttu-id=\"0a83b-108\">Représente la référence de la plage spécifiée dans le langage de l’utilisateur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-108\">Represents range reference for the specified range in the language of the user.</span></span> <span data-ttu-id=\"0a83b-109\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-109\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-110\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-110\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: addressLocal
    fullName: addressLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly addressLocal: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Range#autoFill:member(1)'
    summary: "<span data-ttu-id=\"0a83b-111\">Remplit la plage de la plage actuelle jusqu’à la plage de destination à l’aide de la logique de remplissage automatique spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-111\">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id=\"0a83b-112\">La plage de destination doit étendre la source à l’horizontale ou à la verticale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-112\">The destination range must extend the source either horizontally or vertically.</span></span>\n\n<span data-ttu-id=\"0a83b-113\">Pour plus d’informations, consultez la lecture de l' [AutoFill et du remplissage instantané](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-113\">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id=\"0a83b-114\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-114\"></span></span>\n\n<span data-ttu-id=\"0a83b-115\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-115\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillType?: Excel.AutoFillType): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="0a83b-116">Plage de destination à remplir.</span><span class="sxs-lookup"><span data-stu-id="0a83b-116">The destination range to fill.</span></span> <span data-ttu-id="0a83b-117">Les plages discontinues ne sont pas prises en charge.</span><span class="sxs-lookup"><span data-stu-id="0a83b-117">Discontiguous ranges are not supported.</span></span>
          type:
            - 'excel!Excel.Range#autoFill~0:complex'
        - id: autoFillType
          description: "<span data-ttu-id=\"0a83b-118\">Type de remplissage automatique.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-118\">The type of autofill.</span></span> <span data-ttu-id=\"0a83b-119\">Indique comment la plage de destination doit être remplie, en fonction du contenu de la plage actuelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-119\">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id=\"0a83b-120\">La valeur par défaut est «\_FillDefault\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-120\">Default is \"FillDefault\".</span></span>"
          type:
            - 'excel!Excel.AutoFillType:enum'
  - uid: 'excel!Excel.Range#autoFill:member(2)'
    summary: "<span data-ttu-id=\"0a83b-121\">Remplit la plage de la plage actuelle jusqu’à la plage de destination à l’aide de la logique de remplissage automatique spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-121\">Fills range from the current range to the destination range using the specified AutoFill logic.</span></span> <span data-ttu-id=\"0a83b-122\">La plage de destination doit étendre la source à l’horizontale ou à la verticale.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-122\">The destination range must extend the source either horizontally or vertically.</span></span>\n\n<span data-ttu-id=\"0a83b-123\">Pour plus d’informations, consultez la lecture de l' [AutoFill et du remplissage instantané](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-123\">For more information, read [Use AutoFill and Flash Fill](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)</span></span><!-- --><span data-ttu-id=\"0a83b-124\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-124\"></span></span>\n\n<span data-ttu-id=\"0a83b-125\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-125\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'autoFill(destinationRange, autoFillTypeString)'
    fullName: 'autoFill(destinationRange, autoFillTypeString)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'autoFill(destinationRange: Range | string, autoFillTypeString?: "FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: <span data-ttu-id="0a83b-126">Plage de destination à remplir.</span><span class="sxs-lookup"><span data-stu-id="0a83b-126">The destination range to fill.</span></span> <span data-ttu-id="0a83b-127">Les plages discontinues ne sont pas prises en charge.</span><span class="sxs-lookup"><span data-stu-id="0a83b-127">Discontiguous ranges are not supported.</span></span>
          type:
            - 'excel!Excel.Range#autoFill~1:complex'
        - id: autoFillTypeString
          description: "<span data-ttu-id=\"0a83b-128\">Type de remplissage automatique.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-128\">The type of autofill.</span></span> <span data-ttu-id=\"0a83b-129\">Indique comment la plage de destination doit être remplie, en fonction du contenu de la plage actuelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-129\">Specifies how the destination range is to be filled, based on the contents of the current range.</span></span> <span data-ttu-id=\"0a83b-130\">La valeur par défaut est «\_FillDefault\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-130\">Default is \"FillDefault\".</span></span>"
          type:
            - '"FillDefault" | "FillCopy" | "FillSeries" | "FillFormats" | "FillValues" | "FillDays" | "FillWeekdays" | "FillMonths" | "FillYears" | "LinearTrend" | "GrowthTrend" | "FlashFill"'
  - uid: 'excel!Excel.Range#calculate:member(1)'
    summary: "<span data-ttu-id=\"0a83b-131\">Calcule une plage de cellules dans une feuille de calcul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-131\">Calculates a range of cells on a worksheet.</span></span>\n\n<span data-ttu-id=\"0a83b-132\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-132\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#cellCount:member'
    summary: "<span data-ttu-id=\"0a83b-133\">Nombre de cellules dans la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-133\">Number of cells in the range.</span></span> <span data-ttu-id=\"0a83b-134\">Cette API renvoie -1 si le nombre de cellules est supérieur à 2^31-1\_(2\_147\_483\_647).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-134\">This API will return -1 if the cell count exceeds 2^31-1 (2,147,483,647).</span></span> <span data-ttu-id=\"0a83b-135\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-135\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-136\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-136\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: cellCount
    fullName: cellCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#clear:member(1)'
    summary: "<span data-ttu-id=\"0a83b-137\">Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-137\">Clear range values, format, fill, border, etc.</span></span>\n\n<span data-ttu-id=\"0a83b-138\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-138\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: Excel.ClearApplyTo): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-139">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-139">Examples</span></span>

          ```javascript
          // Below example clears format and contents of the range. 
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.clear();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: applyTo
          description: '<span data-ttu-id="0a83b-140">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="0a83b-140">Optional.</span></span> <span data-ttu-id="0a83b-141">Détermine le type d’action de suppression.</span><span class="sxs-lookup"><span data-stu-id="0a83b-141">Determines the type of clear action.</span></span> <span data-ttu-id="0a83b-142">Pour plus d’informations, voir Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="0a83b-142">See Excel.ClearApplyTo for details.</span></span>'
          type:
            - 'excel!Excel.ClearApplyTo:enum'
  - uid: 'excel!Excel.Range#clear:member(2)'
    summary: "<span data-ttu-id=\"0a83b-143\">Supprime les valeurs et les propriétés de format, de remplissage, de bordure, etc. de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-143\">Clear range values, format, fill, border, etc.</span></span>\n\n<span data-ttu-id=\"0a83b-144\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-144\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: clear(applyToString)
    fullName: clear(applyToString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyToString?: "All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyToString
          description: '<span data-ttu-id="0a83b-145">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="0a83b-145">Optional.</span></span> <span data-ttu-id="0a83b-146">Détermine le type d’action de suppression.</span><span class="sxs-lookup"><span data-stu-id="0a83b-146">Determines the type of clear action.</span></span> <span data-ttu-id="0a83b-147">Pour plus d’informations, voir Excel. ClearApplyTo.</span><span class="sxs-lookup"><span data-stu-id="0a83b-147">See Excel.ClearApplyTo for details.</span></span>'
          type:
            - '"All" | "Formats" | "Contents" | "Hyperlinks" | "RemoveHyperlinks"'
  - uid: 'excel!Excel.Range#columnCount:member'
    summary: "<span data-ttu-id=\"0a83b-148\">Représente le nombre total de colonnes dans la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-148\">Represents the total number of columns in the range.</span></span> <span data-ttu-id=\"0a83b-149\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-149\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-150\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-150\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: columnCount
    fullName: columnCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#columnHidden:member'
    summary: "<span data-ttu-id=\"0a83b-151\">Indique si toutes les colonnes de la plage active sont masquées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-151\">Represents if all columns of the current range are hidden.</span></span>\n\n<span data-ttu-id=\"0a83b-152\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-152\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: columnHidden
    fullName: columnHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'columnHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#columnIndex:member'
    summary: "<span data-ttu-id=\"0a83b-153\">Représente le numéro de colonne de la première cellule de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-153\">Represents the column number of the first cell in the range.</span></span> <span data-ttu-id=\"0a83b-154\">Avec indice zéro.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-154\">Zero-indexed.</span></span> <span data-ttu-id=\"0a83b-155\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-155\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-156\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-156\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: columnIndex
    fullName: columnIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly columnIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#conditionalFormats:member'
    summary: "<span data-ttu-id=\"0a83b-157\">Collection d’ConditionalFormats qui croisent la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-157\">Collection of ConditionalFormats that intersect the range.</span></span> <span data-ttu-id=\"0a83b-158\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-158\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-159\">\\[[Ensemble d’API\_: ExcelApi 1,6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-159\">\\[ [API set: ExcelApi 1.6](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: conditionalFormats
    fullName: conditionalFormats
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly conditionalFormats: Excel.ConditionalFormatCollection;'
      return:
        type:
          - 'excel!Excel.ConditionalFormatCollection:class'
  - uid: 'excel!Excel.Range#context:member'
    summary: <span data-ttu-id="0a83b-160">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="0a83b-160">The request context associated with the object.</span></span> <span data-ttu-id="0a83b-161">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="0a83b-161">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.Range#convertDataTypeToText:member(1)'
    summary: "<span data-ttu-id=\"0a83b-162\">Convertit la plage de cellules avec des types de données en texte.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-162\">Converts the range cells with datatypes into text.</span></span>\n\n<span data-ttu-id=\"0a83b-163\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-163\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#convertToLinkedDataType:member(1)'
    summary: "<span data-ttu-id=\"0a83b-164\">Convertit la plage de cellules en type de données liée dans la feuille de calcul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-164\">Converts the range cells into linked datatype in the worksheet.</span></span>\n\n<span data-ttu-id=\"0a83b-165\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-165\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertToLinkedDataType(serviceID: number, languageCulture: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: <span data-ttu-id="0a83b-166">ID de service qui sera utilisé pour interroger les données.</span><span class="sxs-lookup"><span data-stu-id="0a83b-166">The Service ID which will be used to query the data.</span></span>
          type:
            - number
        - id: languageCulture
          description: <span data-ttu-id="0a83b-167">Culture de langue pour laquelle interroger le service.</span><span class="sxs-lookup"><span data-stu-id="0a83b-167">Language Culture to query the service for.</span></span>
          type:
            - string
  - uid: 'excel!Excel.Range#copyFrom:member(1)'
    summary: "<span data-ttu-id=\"0a83b-168\">Copie les cellules de données ou de mise en forme à partir de la plage source ou RangeAreas à la plage active.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-168\">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id=\"0a83b-169\">La taille de la plage de destination peut être différente de celle de la plage source ou RangeAreas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-169\">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id=\"0a83b-170\">La destination est étendue automatiquement si elle est plus petite que la source.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-170\">The destination will be expanded automatically if it is smaller than the source.</span></span>\n\n<span data-ttu-id=\"0a83b-171\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-171\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyType?: Excel.RangeCopyType, skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-172">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-172">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              sheet.getRange("F2").values = [["Copied Formula"]];
              sheet.getRange("F2").format.autofitColumns();

              // copy a range preserving the formulas
              // note: non-formula values are copied over as is
              sheet.getRange("G2").copyFrom("A1:E1", Excel.RangeCopyType.formulas);
              await context.sync();
          });
          ```
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="0a83b-173">Plage source ou RangeAreas à partir de laquelle effectuer la copie.</span><span class="sxs-lookup"><span data-stu-id="0a83b-173">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="0a83b-174">Lorsque le RangeAreas source est doté de plusieurs plages, il doit se présenter sous la forme d’un plan, qui peut être créé en supprimant des lignes ou des colonnes entières d’une plage rectangulaire.</span><span class="sxs-lookup"><span data-stu-id="0a83b-174">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~0:complex'
        - id: copyType
          description: "<span data-ttu-id=\"0a83b-175\">Type de données de cellule ou de mise en forme à copier.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-175\">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id=\"0a83b-176\">La valeur par défaut est «\_All\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-176\">Default is \"All\".</span></span>"
          type:
            - 'excel!Excel.RangeCopyType:enum'
        - id: skipBlanks
          description: <span data-ttu-id="0a83b-177">True si pour ignorer les cellules vides dans la plage source.</span><span class="sxs-lookup"><span data-stu-id="0a83b-177">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="0a83b-178">La valeur par défaut est False.</span><span class="sxs-lookup"><span data-stu-id="0a83b-178">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="0a83b-179">True si pour transposer les cellules dans la plage de destination.</span><span class="sxs-lookup"><span data-stu-id="0a83b-179">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="0a83b-180">La valeur par défaut est False.</span><span class="sxs-lookup"><span data-stu-id="0a83b-180">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#copyFrom:member(2)'
    summary: "<span data-ttu-id=\"0a83b-181\">Copie les cellules de données ou de mise en forme à partir de la plage source ou RangeAreas à la plage active.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-181\">Copies cell data or formatting from the source range or RangeAreas to the current range.</span></span> <span data-ttu-id=\"0a83b-182\">La taille de la plage de destination peut être différente de celle de la plage source ou RangeAreas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-182\">The destination range can be of different size than the source range or RangeAreas.</span></span> <span data-ttu-id=\"0a83b-183\">La destination est étendue automatiquement si elle est plus petite que la source.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-183\">The destination will be expanded automatically if it is smaller than the source.</span></span>\n\n<span data-ttu-id=\"0a83b-184\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-184\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyTypeString, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'copyFrom(sourceRange: Range | RangeAreas | string, copyTypeString?: "All" | "Formulas" | "Values" | "Formats", skipBlanks?: boolean, transpose?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: '<span data-ttu-id="0a83b-185">Plage source ou RangeAreas à partir de laquelle effectuer la copie.</span><span class="sxs-lookup"><span data-stu-id="0a83b-185">The source range or RangeAreas to copy from.</span></span> <span data-ttu-id="0a83b-186">Lorsque le RangeAreas source est doté de plusieurs plages, il doit se présenter sous la forme d’un plan, qui peut être créé en supprimant des lignes ou des colonnes entières d’une plage rectangulaire.</span><span class="sxs-lookup"><span data-stu-id="0a83b-186">When the source RangeAreas has multiple ranges, it must in the outline form which can be created by removing full rows or columns from a rectangular range.</span></span>'
          type:
            - 'excel!Excel.Range#copyFrom~1:complex'
        - id: copyTypeString
          description: "<span data-ttu-id=\"0a83b-187\">Type de données de cellule ou de mise en forme à copier.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-187\">The type of cell data or formatting to copy over.</span></span> <span data-ttu-id=\"0a83b-188\">La valeur par défaut est «\_All\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-188\">Default is \"All\".</span></span>"
          type:
            - '"All" | "Formulas" | "Values" | "Formats"'
        - id: skipBlanks
          description: <span data-ttu-id="0a83b-189">True si pour ignorer les cellules vides dans la plage source.</span><span class="sxs-lookup"><span data-stu-id="0a83b-189">True if to skip blank cells in the source range.</span></span> <span data-ttu-id="0a83b-190">La valeur par défaut est False.</span><span class="sxs-lookup"><span data-stu-id="0a83b-190">Default is false.</span></span>
          type:
            - boolean
        - id: transpose
          description: <span data-ttu-id="0a83b-191">True si pour transposer les cellules dans la plage de destination.</span><span class="sxs-lookup"><span data-stu-id="0a83b-191">True if to transpose the cells in the destination range.</span></span> <span data-ttu-id="0a83b-192">La valeur par défaut est False.</span><span class="sxs-lookup"><span data-stu-id="0a83b-192">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#dataValidation:member'
    summary: "<span data-ttu-id=\"0a83b-193\">Renvoie un objet de validation des données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-193\">Returns a data validation object.</span></span>\n\n<span data-ttu-id=\"0a83b-194\">\\[[Ensemble d’API\_: ExcelApi 1,8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-194\">\\[ [API set: ExcelApi 1.8](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: dataValidation
    fullName: dataValidation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataValidation: Excel.DataValidation;'
      return:
        type:
          - 'excel!Excel.DataValidation:class'
  - uid: 'excel!Excel.Range#delete:member(1)'
    summary: "<span data-ttu-id=\"0a83b-195\">Supprime les cellules associées à la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-195\">Deletes the cells associated with the range.</span></span>\n\n<span data-ttu-id=\"0a83b-196\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-196\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: Excel.DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-197">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-197">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.delete("Left");
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: '<span data-ttu-id="0a83b-198">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="0a83b-198">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0a83b-199">Pour plus d’informations, voir Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0a83b-199">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - 'excel!Excel.DeleteShiftDirection:enum'
  - uid: 'excel!Excel.Range#delete:member(2)'
    summary: "<span data-ttu-id=\"0a83b-200\">Supprime les cellules associées à la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-200\">Deletes the cells associated with the range.</span></span>\n\n<span data-ttu-id=\"0a83b-201\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-201\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: delete(shiftString)
    fullName: delete(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shiftString: "Up" | "Left"): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="0a83b-202">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="0a83b-202">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0a83b-203">Pour plus d’informations, voir Excel. DeleteShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0a83b-203">See Excel.DeleteShiftDirection for details.</span></span>'
          type:
            - '"Up" | "Left"'
  - uid: 'excel!Excel.Range#find:member(1)'
    summary: "<span data-ttu-id=\"0a83b-204\">Recherche la chaîne donnée basée sur les critères spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-204\">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id=\"0a83b-205\">Si la plage active est plus grande qu’une seule cellule, la recherche est limitée à cette plage, sinon la recherche porte sur la totalité de la feuille qui commence après cette cellule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-205\">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span>\n\n<span data-ttu-id=\"0a83b-206\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-206\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="0a83b-207">Plage correspondant aux critères de recherche.</span><span class="sxs-lookup"><span data-stu-id="0a83b-207">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="0a83b-208">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-208">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();

              // NOTE: If no match is found, an ItemNotFound error
              // is thrown when Range.find is evaluated.
              const foundRange = searchRange.find($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();


              console.log(foundRange.address);
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="0a83b-209">Chaîne à rechercher.</span><span class="sxs-lookup"><span data-stu-id="0a83b-209">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="0a83b-210">Critères de recherche supplémentaires, y compris le sens de la recherche et si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.</span><span class="sxs-lookup"><span data-stu-id="0a83b-210">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#findOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"0a83b-211\">Recherche la chaîne donnée basée sur les critères spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-211\">Finds the given string based on the criteria specified.</span></span> <span data-ttu-id=\"0a83b-212\">Si la plage active est plus grande qu’une seule cellule, la recherche est limitée à cette plage, sinon la recherche porte sur la totalité de la feuille qui commence après cette cellule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-212\">If the current range is larger than a single cell, then the search will be limited to that range, else the search will cover the entire sheet starting after that cell.</span></span> <span data-ttu-id=\"0a83b-213\">S’il n’y a aucune correspondance, cette fonction renverra un objet null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-213\">If there are no matches, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"0a83b-214\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-214\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'findOrNullObject(text, criteria)'
    fullName: 'findOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findOrNullObject(text: string, criteria: Excel.SearchCriteria): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-
          <span data-ttu-id="0a83b-215">Plage correspondant aux critères de recherche.</span><span class="sxs-lookup"><span data-stu-id="0a83b-215">The Range which matched the search criteria.</span></span>

          #### <a name="examples"></a><span data-ttu-id="0a83b-216">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-216">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const table = sheet.tables.getItem("ExpensesTable");
              const searchRange = table.getRange();
              const foundRange = searchRange.findOrNullObject($("#searchText").text(), {
                  completeMatch: isCompleteMatchToggle,
                  matchCase: isMatchCaseToggle,
                  searchDirection: searchDirectionToggle
              });
              
              foundRange.load("address");
              await context.sync();

              if (foundRange.isNullObject) {
                  console.log("Text not found");
              } else {
                  console.log(foundRange.address);
              }
          });
          ```
      parameters:
        - id: text
          description: <span data-ttu-id="0a83b-217">Chaîne à rechercher.</span><span class="sxs-lookup"><span data-stu-id="0a83b-217">The string to find.</span></span>
          type:
            - string
        - id: criteria
          description: '<span data-ttu-id="0a83b-218">Critères de recherche supplémentaires, y compris le sens de la recherche et si la recherche doit correspondre à la totalité de la cellule ou respecter la casse.</span><span class="sxs-lookup"><span data-stu-id="0a83b-218">Additional search criteria, including the search direction and whether the search needs to match the entire cell or be case sensitive.</span></span>'
          type:
            - 'excel!Excel.SearchCriteria:interface'
  - uid: 'excel!Excel.Range#flashFill:member(1)'
    summary: "<span data-ttu-id=\"0a83b-219\">Apporte un remplissage instantané étendue en cours. Le remplissage instantané renseignera automatiquement les données lorsqu’il détectera un modèle, la plage doit donc être la seule plage de la colonne et avoir des données autour afin de trouver le modèle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-219\">Does FlashFill to current range.Flash Fill will automatically fills data when it senses a pattern, so the range must be single column range and have data around in order to find pattern.</span></span>\n\n<span data-ttu-id=\"0a83b-220\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-220\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#format:member'
    summary: "<span data-ttu-id=\"0a83b-221\">Renvoie un objet format qui encapsule la police, le remplissage, les bordures, l’alignement et d’autres propriétés de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-221\">Returns a format object, encapsulating the range's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id=\"0a83b-222\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-222\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-223\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-223\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: format
    fullName: format
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly format: Excel.RangeFormat;'
      return:
        type:
          - 'excel!Excel.RangeFormat:class'
  - uid: 'excel!Excel.Range#formulas:member'
    summary: "<span data-ttu-id=\"0a83b-224\">Représente la formule dans le style de notation A1.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-224\">Represents the formula in A1-style notation.</span></span> <span data-ttu-id=\"0a83b-225\">Lorsque vous définissez des formules pour une plage, l’argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-225\">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-226\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-226\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-227\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-227\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: formulas
    fullName: formulas
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulas: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasLocal:member'
    summary: "<span data-ttu-id=\"0a83b-228\">Représente la formule en notation\_A1, en utilisant le langage et les paramètres de format de nombre régionaux de l’utilisateur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-228\">Represents the formula in A1-style notation, in the user's language and number-formatting locale.</span></span> <span data-ttu-id=\"0a83b-229\">Par exemple, la formule «\_=SUM(A1, 1.5)\_» en anglais deviendrait «\_=SUMME(A1; 1,5)\_» en allemand.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-229\">For example, the English \"=SUM(A1, 1.5)\" formula would become \"=SUMME(A1; 1,5)\" in German.</span></span> <span data-ttu-id=\"0a83b-230\">Lorsque vous définissez des formules pour une plage, l’argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-230\">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-231\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-231\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-232\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-232\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: formulasLocal
    fullName: formulasLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#formulasR1C1:member'
    summary: "<span data-ttu-id=\"0a83b-233\">Représente la formule dans le style de notation R1C1.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-233\">Represents the formula in R1C1-style notation.</span></span> <span data-ttu-id=\"0a83b-234\">Lorsque vous définissez des formules pour une plage, l’argument value peut être une valeur unique (une chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-234\">When setting formulas to a range, the value argument can be either a single value (a string) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-235\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-235\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-236\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-236\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: formulasR1C1
    fullName: formulasR1C1
    langs:
      - typeScript
    type: property
    syntax:
      content: 'formulasR1C1: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#getAbsoluteResizedRange:member(1)'
    summary: "<span data-ttu-id=\"0a83b-237\">Obtient un objet Plage avec la même cellule supérieure gauche que l’objet de Plage en cours, mais avec un nombre spécifié de lignes et colonnes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-237\">Gets a Range object with the same top-left cell as the current Range object, but with the specified numbers of rows and columns.</span></span>\n\n<span data-ttu-id=\"0a83b-238\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-238\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: numRows
          description: <span data-ttu-id="0a83b-239">Nombre de lignes de la nouvelle taille de la plage.</span><span class="sxs-lookup"><span data-stu-id="0a83b-239">The number of rows of the new range size.</span></span>
          type:
            - number
        - id: numColumns
          description: <span data-ttu-id="0a83b-240">Nombre de colonnes de la nouvelle taille de la plage.</span><span class="sxs-lookup"><span data-stu-id="0a83b-240">The number of columns of the new range size.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getBoundingRect:member(1)'
    summary: "<span data-ttu-id=\"0a83b-241\">Renvoie le plus petit objet de plage qui englobe les plages données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-241\">Gets the smallest range object that encompasses the given ranges.</span></span> <span data-ttu-id=\"0a83b-242\">Par exemple, la valeur GetBoundingRect pour «\_B2:C5\_» et «\_D10:E15\_» est «\_B2:E15\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-242\">For example, the GetBoundingRect of \"B2:C5\" and \"D10:E15\" is \"B2:E15\".</span></span>\n\n<span data-ttu-id=\"0a83b-243\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-243\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-244">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-244">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:G6";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var range = range.getBoundingRect("G4:H8");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // Prints Sheet1!D4:H8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: '<span data-ttu-id="0a83b-245">Nom, adresse ou objet de plage.</span><span class="sxs-lookup"><span data-stu-id="0a83b-245">The range object or address or range name.</span></span>'
          type:
            - 'excel!Excel.Range#getBoundingRect~0:complex'
  - uid: 'excel!Excel.Range#getCell:member(1)'
    summary: "<span data-ttu-id=\"0a83b-246\">Renvoie l’objet de plage qui contient une cellule donnée sur la base des numéros de ligne et de colonne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-246\">Gets the range object containing the single cell based on row and column numbers.</span></span> <span data-ttu-id=\"0a83b-247\">La cellule peut être située en dehors des limites de sa plage parente, tant qu’elle reste dans la grille de la feuille de calcul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-247\">The cell can be outside the bounds of its parent range, so long as it stays within the worksheet grid.</span></span> <span data-ttu-id=\"0a83b-248\">L’emplacement de la cellule renvoyée est déterminé à partir de la cellule supérieure gauche de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-248\">The returned cell is located relative to the top left cell of the range.</span></span>\n\n<span data-ttu-id=\"0a83b-249\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-249\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-250">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-250">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              var cell = range.cell(0,0);
              cell.load('address');
              return ctx.sync().then(function() {
                  console.log(cell.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="0a83b-251">Numéro de ligne de la cellule à récupérer.</span><span class="sxs-lookup"><span data-stu-id="0a83b-251">Row number of the cell to be retrieved.</span></span> <span data-ttu-id="0a83b-252">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0a83b-252">Zero-indexed.</span></span>
          type:
            - number
        - id: column
          description: <span data-ttu-id="0a83b-253">Numéro de colonne de la cellule à récupérer.</span><span class="sxs-lookup"><span data-stu-id="0a83b-253">Column number of the cell to be retrieved.</span></span> <span data-ttu-id="0a83b-254">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0a83b-254">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getCellProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-255\">Renvoie une plage en 2D, qui comprend les propriétés de police, de remplissage, de bordures, d’alignement, etc. de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-255\">Returns a 2D array, encapsulating the data for each cell's font, fill, borders, alignment, and other properties.</span></span>\n\n<span data-ttu-id=\"0a83b-256\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-256\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCellProperties(cellPropertiesLoadOptions)
    fullName: getCellProperties(cellPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellProperties(cellPropertiesLoadOptions: CellPropertiesLoadOptions): OfficeExtension.ClientResult<CellProperties[][]>;'
      return:
        type:
          - 'excel!Excel.Range#getCellProperties~0:complex'
        description: |-
          <span data-ttu-id="0a83b-257">Tableau 2D où chaque élément représente les propriétés demandées de la cellule correspondante.</span><span class="sxs-lookup"><span data-stu-id="0a83b-257">A 2D array where each item represents the requested properties of the corresponding cell.</span></span>

          #### <a name="examples"></a><span data-ttu-id="0a83b-258">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-258">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const cell = context.workbook.getActiveCell();

              // Define the cell properties to get by setting the matching LoadOptions to true.
              const propertiesToGet = cell.getCellProperties({
                  address: true,
                  format: {
                      fill: {
                          color: true
                      },
                      font: {
                          color: true
                      }
                  },
                  style: true
              });

              // Sync to get the data from the workbook.
              await context.sync();
              const cellProperties = propertiesToGet.value[0][0];
              console.log(
                  `Address: ${cellProperties.address}\nStyle: ${cellProperties.style}\nFill Color: ${cellProperties.format.fill.color}\nFont Color: ${cellProperties.format.font.color}`);
          });
          ```
      parameters:
        - id: cellPropertiesLoadOptions
          description: <span data-ttu-id="0a83b-259">Objet qui représente les propriétés de cellule à charger.</span><span class="sxs-lookup"><span data-stu-id="0a83b-259">An object that represents which cell properties to load.</span></span>
          type:
            - 'excel!Excel.CellPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumn:member(1)'
    summary: "<span data-ttu-id=\"0a83b-260\">Obtient une colonne contenue dans la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-260\">Gets a column contained in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-261\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-261\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-262">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-262">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet19";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getColumn(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!B1:B8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: column
          description: <span data-ttu-id="0a83b-263">Numéro de colonne de la plage à récupérer.</span><span class="sxs-lookup"><span data-stu-id="0a83b-263">Column number of the range to be retrieved.</span></span> <span data-ttu-id="0a83b-264">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0a83b-264">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-265\">Renvoie une plage à dimension unique, qui comprend les données de char colonne de police, de remplissage, de bordures, d’alignement, etc. de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-265\">Returns a single-dimensional array, encapsulating the data for each column's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id=\"0a83b-266\">Pour les propriétés ne sont pas cohérentes au sein de chaque cellule dans une colonne donnée, null est renvoyé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-266\">For properties that are not consistent across each cell within a given column, null will be returned.</span></span>\n\n<span data-ttu-id=\"0a83b-267\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-267\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getColumnProperties(columnPropertiesLoadOptions)
    fullName: getColumnProperties(columnPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnProperties(columnPropertiesLoadOptions: ColumnPropertiesLoadOptions): OfficeExtension.ClientResult<ColumnProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getColumnProperties~0:complex'
        description: <span data-ttu-id="0a83b-268">Tableau où chaque élément représente les propriétés demandées de la colonne correspondante.</span><span class="sxs-lookup"><span data-stu-id="0a83b-268">An array where each item represents the requested properties of the corresponding column.</span></span>
      parameters:
        - id: columnPropertiesLoadOptions
          description: <span data-ttu-id="0a83b-269">Objet qui représente les propriétés de colonne à charger.</span><span class="sxs-lookup"><span data-stu-id="0a83b-269">An object that represents which column properties to load.</span></span>
          type:
            - 'excel!Excel.ColumnPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getColumnsAfter:member(1)'
    summary: "<span data-ttu-id=\"0a83b-270\">Obtient un certain nombre de colonnes à droite de l’objet de plage actuel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-270\">Gets a certain number of columns to the right of the current Range object.</span></span>\n\n<span data-ttu-id=\"0a83b-271\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-271\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="0a83b-p140">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p140">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getColumnsBefore:member(1)'
    summary: "<span data-ttu-id=\"0a83b-277\">Obtient un certain nombre de colonnes à gauche de l’objet de plage actuel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-277\">Gets a certain number of columns to the left of the current Range object.</span></span>\n\n<span data-ttu-id=\"0a83b-278\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-278\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="0a83b-p141">Facultatif. Nombre de colonnes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p141">Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getEntireColumn:member(1)'
    summary: "<span data-ttu-id=\"0a83b-284\">Obtient un objet qui représente la colonne entière de la plage (par exemple, si la plage actuelle représente les cellules «\_B4\_: E11\_», `getEntireColumn` qu’il s’agit d’une plage qui représente les colonnes «\_B\_:E\_»).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-284\">Gets an object that represents the entire column of the range (for example, if the current range represents cells \"B4:E11\", its `getEntireColumn` is a range that represents columns \"B:E\").</span></span>\n\n<span data-ttu-id=\"0a83b-285\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-285\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-286">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-286">Examples</span></span>

          ```javascript
          // Note: the grid properties of the Range (values, numberFormat, formulas) 
          // contains null since the Range in question is unbounded.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeEC = range.getEntireColumn();
              rangeEC.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeEC.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getEntireRow:member(1)'
    summary: "<span data-ttu-id=\"0a83b-287\">Obtient un objet qui représente la ligne entière de la plage (par exemple, si la plage actuelle représente les cellules «\_B4\_: E11\_», `GetEntireRow` qu’il s’agit d’une plage qui représente les lignes «\_4:11\_»).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-287\">Gets an object that represents the entire row of the range (for example, if the current range represents cells \"B4:E11\", its `GetEntireRow` is a range that represents rows \"4:11\").</span></span>\n\n<span data-ttu-id=\"0a83b-288\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-288\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-289">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-289">Examples</span></span>

          ```javascript
          // Gets an object that represents the entire row of the range 
          // (for example, if the current range represents cells "B4:E11", 
          // its GetEntireRow is a range that represents rows "4:11").
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "D:F"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeER = range.getEntireRow();
              rangeER.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeER.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getImage:member(1)'
    summary: "<span data-ttu-id=\"0a83b-290\">Affiche la plage en tant qu’image png encodée au format Base64.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-290\">Renders the range as a base64-encoded png image.</span></span>\n\n<span data-ttu-id=\"0a83b-291\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-291\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): OfficeExtension.ClientResult<string>;'
      return:
        type:
          - 'excel!Excel.Range#getImage~0:complex'
        description: ''
  - uid: 'excel!Excel.Range#getIntersection:member(1)'
    summary: "<span data-ttu-id=\"0a83b-292\">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-292\">Gets the range object that represents the rectangular intersection of the given ranges.</span></span>\n\n<span data-ttu-id=\"0a83b-293\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-293\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-294">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-294">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getIntersection("D4:G6");
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!D4:F6
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="0a83b-295">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="0a83b-295">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersection~0:complex'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"0a83b-296\">Obtient l’objet de plage qui représente l’intersection rectangulaire des plages données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-296\">Gets the range object that represents the rectangular intersection of the given ranges.</span></span> <span data-ttu-id=\"0a83b-297\">Si aucune intersection n’est trouvée, renvoie un objet Null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-297\">If no intersection is found, will return a null object.</span></span>\n\n<span data-ttu-id=\"0a83b-298\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-298\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getIntersectionOrNullObject(anotherRange)
    fullName: getIntersectionOrNullObject(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersectionOrNullObject(anotherRange: Range | string): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-299">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-299">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: anotherRange
          description: <span data-ttu-id="0a83b-300">Objet de plage ou adresse de plage utilisé pour déterminer l’intersection des plages.</span><span class="sxs-lookup"><span data-stu-id="0a83b-300">The range object or range address that will be used to determine the intersection of ranges.</span></span>
          type:
            - 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
  - uid: 'excel!Excel.Range#getLastCell:member(1)'
    summary: "<span data-ttu-id=\"0a83b-301\">Obtient la dernière cellule de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-301\">Gets the last cell within the range.</span></span> <span data-ttu-id=\"0a83b-302\">Par exemple, la dernière cellule de la plage «\_B2:D5\_» est «\_D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-302\">For example, the last cell of \"B2:D5\" is \"D5\".</span></span>\n\n<span data-ttu-id=\"0a83b-303\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-303\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-304">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-304">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastCell();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastColumn:member(1)'
    summary: "<span data-ttu-id=\"0a83b-305\">Obtient la dernière colonne de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-305\">Gets the last column within the range.</span></span> <span data-ttu-id=\"0a83b-306\">Par exemple, la dernière colonne de la plage «\_B2:D5\_» est «\_D2:D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-306\">For example, the last column of \"B2:D5\" is \"D2:D5\".</span></span>\n\n<span data-ttu-id=\"0a83b-307\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-307\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-308">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-308">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastColumn();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!F1:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getLastRow:member(1)'
    summary: "<span data-ttu-id=\"0a83b-309\">Obtient la dernière ligne de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-309\">Gets the last row within the range.</span></span> <span data-ttu-id=\"0a83b-310\">Par exemple, la dernière ligne de la plage «\_B2:D5\_» est «\_B5:D5\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-310\">For example, the last row of \"B2:D5\" is \"B5:D5\".</span></span>\n\n<span data-ttu-id=\"0a83b-311\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-311\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-312">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-312">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getLastRow();
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A8:F8
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#getOffsetRange:member(1)'
    summary: "<span data-ttu-id=\"0a83b-p146\">Obtient un objet qui représente une plage décalée par rapport à la plage spécifiée. Les dimensions de la plage renvoyée correspondent à cette plage. Si la plage obtenue se retrouve en dehors des limites de grille de la feuille de calcul, une erreur est déclenchée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-p146\">Gets an object which represents a range that's offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.</span></span>\n\n<span data-ttu-id=\"0a83b-316\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-316\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-317">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-317">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D4:F6";
              var range = 
                  ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getOffsetRange(-1,4);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!H3:K5
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: rowOffset
          description: '<span data-ttu-id="0a83b-p147">Nombre de lignes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers le bas et les valeurs négatives un décalage vers le haut.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p147">The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.</span></span>'
          type:
            - number
        - id: columnOffset
          description: '<span data-ttu-id="0a83b-p148">Nombre de colonnes (positif, négatif ou nul) duquel décaler la plage. Les valeurs positives représentent un décalage vers la droite et les valeurs négatives un décalage vers la gauche.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p148">The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getResizedRange:member(1)'
    summary: "<span data-ttu-id=\"0a83b-322\">Obtient un objet de plage semblable à l’objet de plage actuel, mais avec le coin inférieur droit développé (ou contracté) selon un certain nombre de lignes et de colonnes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-322\">Gets a Range object similar to the current Range object, but with its bottom-right corner expanded (or contracted) by some number of rows and columns.</span></span>\n\n<span data-ttu-id=\"0a83b-323\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-323\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: deltaRows
          description: '<span data-ttu-id="0a83b-p149">Nombre de lignes par lequel développer le coin inférieur droit, par rapport à la plage actuelle. Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p149">The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
        - id: deltaColumns
          description: '<span data-ttu-id="0a83b-326">Nombre de colonnes en fonction desquelles développer le coin inférieur droit par rapport à la plage actuelle.</span><span class="sxs-lookup"><span data-stu-id="0a83b-326">The number of columns by which to expand the bottom-right corner, relative to the current range.</span></span> <span data-ttu-id="0a83b-327">Utilisez un nombre positif pour étendre la plage ou un nombre négatif pour la réduire.</span><span class="sxs-lookup"><span data-stu-id="0a83b-327">Use a positive number to expand the range, or a negative number to decrease it.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRow:member(1)'
    summary: "<span data-ttu-id=\"0a83b-328\">Obtient une ligne contenue dans la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-328\">Gets a row contained in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-329\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-329\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-330">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-330">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress).getRow(1);
              range.load('address');
              return ctx.sync().then(function() {
                  console.log(range.address); // prints Sheet1!A2:F2
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: row
          description: <span data-ttu-id="0a83b-331">Numéro de ligne de la plage à récupérer.</span><span class="sxs-lookup"><span data-stu-id="0a83b-331">Row number of the range to be retrieved.</span></span> <span data-ttu-id="0a83b-332">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0a83b-332">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.Range#getRowProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-333\">Renvoie une plage à dimension unique , qui comprend les données de police, de remplissage, de bordures, d’alignement, etc. de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-333\">Returns a single-dimensional array, encapsulating the data for each row's font, fill, borders, alignment, and other properties.</span></span> <span data-ttu-id=\"0a83b-334\">Pour les propriétés ne sont pas cohérentes au sein de chaque cellule dans une rangée donnée, la valeur null est renvoyée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-334\">For properties that are not consistent across each cell within a given row, null will be returned.</span></span>\n\n<span data-ttu-id=\"0a83b-335\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-335\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getRowProperties(rowPropertiesLoadOptions)
    fullName: getRowProperties(rowPropertiesLoadOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowProperties(rowPropertiesLoadOptions: RowPropertiesLoadOptions): OfficeExtension.ClientResult<RowProperties[]>;'
      return:
        type:
          - 'excel!Excel.Range#getRowProperties~0:complex'
        description: <span data-ttu-id="0a83b-336">Tableau où chaque élément représente les propriétés demandées de la ligne correspondante.</span><span class="sxs-lookup"><span data-stu-id="0a83b-336">An array where each item represents the requested properties of the corresponding row.</span></span>
      parameters:
        - id: rowPropertiesLoadOptions
          description: <span data-ttu-id="0a83b-337">Objet qui représente les propriétés de ligne à charger.</span><span class="sxs-lookup"><span data-stu-id="0a83b-337">An object that represents which row properties to load.</span></span>
          type:
            - 'excel!Excel.RowPropertiesLoadOptions:interface'
  - uid: 'excel!Excel.Range#getRowsAbove:member(1)'
    summary: "<span data-ttu-id=\"0a83b-338\">Obtient un certain nombre de lignes au-dessus de l’objet de plage actuel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-338\">Gets a certain number of rows above the current Range object.</span></span>\n\n<span data-ttu-id=\"0a83b-339\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-339\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="0a83b-p153">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p153">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getRowsBelow:member(1)'
    summary: "<span data-ttu-id=\"0a83b-345\">Obtient un certain nombre de lignes en dessous de l’objet de plage actuel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-345\">Gets a certain number of rows below the current Range object.</span></span>\n\n<span data-ttu-id=\"0a83b-346\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-346\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: count
          description: '<span data-ttu-id="0a83b-p154">Facultatif. Nombre de lignes à inclure dans la plage obtenue. En règle générale, utilisez un nombre positif pour créer une plage en dehors de la plage actuelle. Vous pouvez également utiliser un nombre négatif pour créer une plage à l’intérieur de la plage actuelle. La valeur par défaut est 1.</span><span class="sxs-lookup"><span data-stu-id="0a83b-p154">Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.</span></span>'
          type:
            - number
  - uid: 'excel!Excel.Range#getSpecialCells:member(1)'
    summary: "<span data-ttu-id=\"0a83b-352\">Obtient l’objet RangeAreas, comprenant une ou plusieurs plages rectangulaires qui représente toutes les cellules qui correspondent au type et la valeur spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-352\">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id=\"0a83b-353\">Si aucune cellule spéciale n’est trouvée, une erreur ItemNotFound est générée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-353\">If no special cells are found, an ItemNotFound error will be thrown.</span></span>\n\n<span data-ttu-id=\"0a83b-354\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-354\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-355">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-355">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {

              const sheet = context.workbook.worksheets.getActiveWorksheet();
              const usedRange = sheet.getUsedRange();

              // Find the ranges with either text or logical (boolean) values.
              const formulaRanges = usedRange.getSpecialCells("Constants", "LogicalText");
              formulaRanges.format.fill.color = "orange";

              return context.sync();
          });
          ```
      parameters:
        - id: cellType
          description: <span data-ttu-id="0a83b-356">Type de cellules à inclure.</span><span class="sxs-lookup"><span data-stu-id="0a83b-356">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="0a83b-357">Si cellType est une constante ou une formule, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="0a83b-357">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="0a83b-358">Ces valeurs peuvent être combinées pour renvoyer plusieurs types.</span><span class="sxs-lookup"><span data-stu-id="0a83b-358">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="0a83b-359">Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu''en soit le type.</span><span class="sxs-lookup"><span data-stu-id="0a83b-359">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCells:member(2)'
    summary: "<span data-ttu-id=\"0a83b-360\">Obtient l’objet RangeAreas, comprenant une ou plusieurs plages rectangulaires qui représente toutes les cellules qui correspondent au type et la valeur spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-360\">Gets the RangeAreas object, comprising one or more rectangular ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id=\"0a83b-361\">Si aucune cellule spéciale n’est trouvée, une erreur ItemNotFound est générée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-361\">If no special cells are found, an ItemNotFound error will be thrown.</span></span>\n\n<span data-ttu-id=\"0a83b-362\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-362\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getSpecialCells(cellTypeString, cellValueType)'
    fullName: 'getSpecialCells(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCells(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="0a83b-363">Type de cellules à inclure.</span><span class="sxs-lookup"><span data-stu-id="0a83b-363">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="0a83b-364">Si cellType est une constante ou une formule, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="0a83b-364">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="0a83b-365">Ces valeurs peuvent être combinées pour renvoyer plusieurs types.</span><span class="sxs-lookup"><span data-stu-id="0a83b-365">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="0a83b-366">Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu''en soit le type.</span><span class="sxs-lookup"><span data-stu-id="0a83b-366">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"0a83b-367\">Obtient l’objet RangeAreas, comprenant une ou plusieurs plages qui représente les cellules qui correspondent au type et à la valeur spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-367\">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id=\"0a83b-368\">Si aucune cellule spéciale n’est trouvée, un objet null est renvoyé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-368\">If no special cells are found, a null object will be returned.</span></span>\n\n<span data-ttu-id=\"0a83b-369\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-369\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellType: Excel.SpecialCellType, cellValueType?: Excel.SpecialCellValueType): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellType
          description: <span data-ttu-id="0a83b-370">Type de cellules à inclure.</span><span class="sxs-lookup"><span data-stu-id="0a83b-370">The type of cells to include.</span></span>
          type:
            - 'excel!Excel.SpecialCellType:enum'
        - id: cellValueType
          description: '<span data-ttu-id="0a83b-371">Si cellType est une constante ou une formule, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="0a83b-371">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="0a83b-372">Ces valeurs peuvent être combinées pour renvoyer plusieurs types.</span><span class="sxs-lookup"><span data-stu-id="0a83b-372">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="0a83b-373">Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu''en soit le type.</span><span class="sxs-lookup"><span data-stu-id="0a83b-373">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - 'excel!Excel.SpecialCellValueType:enum'
  - uid: 'excel!Excel.Range#getSpecialCellsOrNullObject:member(2)'
    summary: "<span data-ttu-id=\"0a83b-374\">Obtient l’objet RangeAreas, comprenant une ou plusieurs plages qui représente les cellules qui correspondent au type et à la valeur spécifiés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-374\">Gets the RangeAreas object, comprising one or more ranges, that represents all the cells that match the specified type and value.</span></span> <span data-ttu-id=\"0a83b-375\">Si aucune cellule spéciale n’est trouvée, un objet null est renvoyé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-375\">If no special cells are found, a null object will be returned.</span></span>\n\n<span data-ttu-id=\"0a83b-376\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-376\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    fullName: 'getSpecialCellsOrNullObject(cellTypeString, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSpecialCellsOrNullObject(cellTypeString: "ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible", cellValueType?: "All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
      parameters:
        - id: cellTypeString
          description: <span data-ttu-id="0a83b-377">Type de cellules à inclure.</span><span class="sxs-lookup"><span data-stu-id="0a83b-377">The type of cells to include.</span></span>
          type:
            - '"ConditionalFormats" | "DataValidations" | "Blanks" | "Constants" | "Formulas" | "SameConditionalFormat" | "SameDataValidation" | "Visible"'
        - id: cellValueType
          description: '<span data-ttu-id="0a83b-378">Si cellType est une constante ou une formule, cet argument est utilisé pour déterminer les types de cellules à inclure dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="0a83b-378">If cellType is either Constants or Formulas, this argument is used to determine which types of cells to include in the result.</span></span> <span data-ttu-id="0a83b-379">Ces valeurs peuvent être combinées pour renvoyer plusieurs types.</span><span class="sxs-lookup"><span data-stu-id="0a83b-379">These values can be combined together to return more than one type.</span></span> <span data-ttu-id="0a83b-380">Par défaut, toutes les constantes ou formules sont sélectionnées, quel qu''en soit le type.</span><span class="sxs-lookup"><span data-stu-id="0a83b-380">The default is to select all constants or formulas, no matter what the type.</span></span>'
          type:
            - '"All" | "Errors" | "ErrorsLogical" | "ErrorsNumbers" | "ErrorsText" | "ErrorsLogicalNumber" | "ErrorsLogicalText" | "ErrorsNumberText" | "Logical" | "LogicalNumbers" | "LogicalText" | "LogicalNumbersText" | "Numbers" | "NumbersText" | "Text"'
  - uid: 'excel!Excel.Range#getSurroundingRegion:member(1)'
    summary: "<span data-ttu-id=\"0a83b-381\">Renvoie un objet PLage qui représente la région environnante pour la cellule en haut à gauche de cette plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-381\">Returns a Range object that represents the surrounding region for the top-left cell in this range.</span></span> <span data-ttu-id=\"0a83b-382\">Une région environnante est une plage délimitée par une combinaison de lignes et de colonnes vides par rapport à cette plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-382\">A surrounding region is a range bounded by any combination of blank rows and blank columns relative to this range.</span></span>\n\n<span data-ttu-id=\"0a83b-383\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-383\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#getTables:member(1)'
    summary: "<span data-ttu-id=\"0a83b-384\">Obtient une collection de tableaux qui se chevauchent avec la plage dans l’étendue.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-384\">Gets a scoped collection of tables that overlap with the range.</span></span>\n\n<span data-ttu-id=\"0a83b-385\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-385\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Excel.TableScopedCollection;'
      return:
        type:
          - 'excel!Excel.TableScopedCollection:class'
        description: ''
      parameters:
        - id: fullyContained
          description: '<span data-ttu-id="0a83b-386">Si la valeur est true, renvoie uniquement les tables qui sont entièrement contenues dans les limites de la plage.</span><span class="sxs-lookup"><span data-stu-id="0a83b-386">If true, returns only tables that are fully contained within the range bounds.</span></span> <span data-ttu-id="0a83b-387">La valeur par défaut est false.</span><span class="sxs-lookup"><span data-stu-id="0a83b-387">The default value is false.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRange:member(1)'
    summary: "<span data-ttu-id=\"0a83b-p165\">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction génère une erreur ItemNotFound.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-p165\">Returns the used range of the given range object. If there are no used cells within the range, this function will throw an ItemNotFound error.</span></span>\n\n<span data-ttu-id=\"0a83b-390\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-390\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-391">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-391">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "D:F";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              var rangeUR = range.getUsedRange();
              rangeUR.load('address');
              return ctx.sync().then(function() {
                  console.log(rangeUR.address);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // We want the most recent quarter that has data, so
              // exclude quarters without data and get the last of
              // the remaining columns.
              const usedDataRange = dataRange.getUsedRange(true /* valuesOnly */);
              const currentQuarterRange = usedDataRange.getLastColumn();

              // Asian and European teams have separate contests.
              const asianSalesRange = sheet.getRange("A2:E4");
              const europeanSalesRange = sheet.getRange("A5:E7");

              // The data for each chart is the intersection of the
              // current quarter column and the rows for the continent.
              const asianContestRange = asianSalesRange.getIntersectionOrNullObject(currentQuarterRange);
              const europeanContestRange = europeanSalesRange.getIntersectionOrNullObject(currentQuarterRange);

              // Must sync before you can test the output of *OrNullObject
              // method/property.
              await context.sync();

              if (asianContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("Asian");
              } else {
                  createContinentChart(
                      sheet,
                      "Asian",
                      asianContestRange,
                      "A9",
                      "F24"
                  );
              }

              if (europeanContestRange.isNullObject) {
                  // See the declaration of this method for how to
                  // test this code path.
                  reportMissingData("European");
              } else {
                  createContinentChart(
                      sheet,
                      "European",
                      europeanContestRange,
                      "A25",
                      "F40"
                  );
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: "<span data-ttu-id=\"0a83b-392\">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-392\">Considers only cells with values as used cells.</span></span> <span data-ttu-id=\"0a83b-393\">\\[Ensemble d’API\_: ExcelApi 1,2\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-393\">\\[Api set: ExcelApi 1.2\\]</span></span>"
          type:
            - boolean
  - uid: 'excel!Excel.Range#getUsedRangeOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"0a83b-p167\">Renvoie la plage utilisée d’un objet de plage donné. Si aucune cellule n’est utilisée dans la plage, cette fonction renvoie un objet null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-p167\">Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.</span></span>\n\n<span data-ttu-id=\"0a83b-396\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-396\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-397">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-397">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const salesTable = sheet.tables.getItem("SalesTable");
              const dataRange = salesTable.getDataBodyRange();

              // Pass true so only cells with values count as used
              const usedDataRange = dataRange.getUsedRangeOrNullObject(
                  true /* valuesOnly */
              );

              //Must sync before reading value returned from *OrNullObject method/property.
              await context.sync();

              if (usedDataRange.isNullObject) {
                  console.log("Need Data to Make Chart");
                  console.log("To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.");
              } else {
                  const chart = sheet.charts.add(
                      Excel.ChartType.columnClustered,
                      dataRange,
                      "Columns"
                  );
                  chart.setPosition("A15", "F30");
                  chart.title.text = "Quarterly sales chart";
                  chart.legend.position = "Right";
                  chart.legend.format.fill.setSolidColor("white");
                  chart.dataLabels.format.font.size = 15;
                  chart.dataLabels.format.font.color = "black";
              }

              await context.sync();
          });
          ```
      parameters:
        - id: valuesOnly
          description: <span data-ttu-id="0a83b-398">Prend uniquement en compte les cellules avec des valeurs sous forme de cellules utilisées.</span><span class="sxs-lookup"><span data-stu-id="0a83b-398">Considers only cells with values as used cells.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#getVisibleView:member(1)'
    summary: "<span data-ttu-id=\"0a83b-399\">Représente les lignes visibles de la plage en cours.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-399\">Represents the visible rows of the current range.</span></span>\n\n<span data-ttu-id=\"0a83b-400\">\\[[Ensemble d’API\_: ExcelApi 1,3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-400\">\\[ [API set: ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): Excel.RangeView;'
      return:
        type:
          - 'excel!Excel.RangeView:class'
        description: ''
  - uid: 'excel!Excel.Range#hidden:member'
    summary: "<span data-ttu-id=\"0a83b-401\">Indique si toutes les cellules de la plage active sont masquées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-401\">Represents if all cells of the current range are hidden.</span></span> <span data-ttu-id=\"0a83b-402\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-402\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-403\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-403\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: hidden
    fullName: hidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly hidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#hyperlink:member'
    summary: "<span data-ttu-id=\"0a83b-404\">Représente le lien hypertexte de la plage active.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-404\">Represents the hyperlink for the current range.</span></span>\n\n<span data-ttu-id=\"0a83b-405\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-405\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: hyperlink
    fullName: hyperlink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'hyperlink: Excel.RangeHyperlink;'
      return:
        type:
          - 'excel!Excel.RangeHyperlink:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-406">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-406">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Orders");

              let productsRange = sheet.getRange("A3:A5");
              productsRange.load("values");

              await context.sync();

              // Create a hyperlink to a URL 
              // for each product name in the first table.
              for (let i = 0; i < productsRange.values.length; i++) {
                  let cellRange = productsRange.getCell(i, 0);
                  let cellText = productsRange.values[i][0];

                  let hyperlink = {
                      textToDisplay: cellText,
                      screenTip: "Search Bing for '" + cellText + "'",
                      address: "https://www.bing.com?q=" + cellText
                  }
                  cellRange.hyperlink = hyperlink;
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#insert:member(1)'
    summary: "<span data-ttu-id=\"0a83b-p169\">Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-p169\">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>\n\n<span data-ttu-id=\"0a83b-409\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-409\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: Excel.InsertShiftDirection): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-410">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-410">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.insert();
              return ctx.sync(); 
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: shift
          description: '<span data-ttu-id="0a83b-411">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="0a83b-411">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0a83b-412">Pour plus d’informations, voir Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0a83b-412">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - 'excel!Excel.InsertShiftDirection:enum'
  - uid: 'excel!Excel.Range#insert:member(2)'
    summary: "<span data-ttu-id=\"0a83b-p171\">Insère une cellule ou une plage de cellules dans la feuille de calcul à la place d’une plage donnée et décale les autres cellules pour libérer de l’espace. Renvoie un nouvel objet Range dans l’espace vide qui s’est créé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-p171\">Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.</span></span>\n\n<span data-ttu-id=\"0a83b-415\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-415\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: insert(shiftString)
    fullName: insert(shiftString)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shiftString: "Down" | "Right"): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: shiftString
          description: '<span data-ttu-id="0a83b-416">Indique la façon dont les cellules doivent être décalées.</span><span class="sxs-lookup"><span data-stu-id="0a83b-416">Specifies which way to shift the cells.</span></span> <span data-ttu-id="0a83b-417">Pour plus d’informations, voir Excel. InsertShiftDirection.</span><span class="sxs-lookup"><span data-stu-id="0a83b-417">See Excel.InsertShiftDirection for details.</span></span>'
          type:
            - '"Down" | "Right"'
  - uid: 'excel!Excel.Range#isEntireColumn:member'
    summary: "<span data-ttu-id=\"0a83b-418\">Représente si la plage active est une colonne entière.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-418\">Represents if the current range is an entire column.</span></span> <span data-ttu-id=\"0a83b-419\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-419\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-420\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-420\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: isEntireColumn
    fullName: isEntireColumn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireColumn: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#isEntireRow:member'
    summary: "<span data-ttu-id=\"0a83b-421\">Représente si la plage active est une ligne entière.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-421\">Represents if the current range is an entire row.</span></span> <span data-ttu-id=\"0a83b-422\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-422\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-423\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-423\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: isEntireRow
    fullName: isEntireRow
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isEntireRow: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#linkedDataTypeState:member'
    summary: "<span data-ttu-id=\"0a83b-424\">Représente l’état du type de données de chaque cellule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-424\">Represents the data type state of each cell.</span></span> <span data-ttu-id=\"0a83b-425\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-425\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-426\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-426\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: linkedDataTypeState
    fullName: linkedDataTypeState
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly linkedDataTypeState: Excel.LinkedDataTypeState[][];'
      return:
        type:
          - 'excel!Excel.Range#linkedDataTypeState~0:complex'
  - uid: 'excel!Excel.Range#load:member(1)'
    summary: "<span data-ttu-id=\"0a83b-427\">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-427\">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id=\"0a83b-428\">Vous devez appeler «\_context.sync()\_» avant de lire les propriétés.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-428\">You must call \"context.sync()\" before reading the properties.</span></span>"
    remarks: "<span data-ttu-id=\"0a83b-429\">En plus de cette signature, cette méthode possède les signatures suivantes\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-429\">In addition to this signature, this method has the following signatures:</span></span>\n\n<span data-ttu-id=\"0a83b-430\">`load(option?: string | string[]): Excel.Range`-WHERE option est une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-430\">`load(option?: string | string[]): Excel.Range` - Where option is a comma-delimited string or an array of strings that specify the properties to load.</span></span>\n\n<span data-ttu-id=\"0a83b-431\">`load(option?: { select?: string; expand?: string; }): Excel.Range`Option-WHERE option. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-431\">`load(option?: { select?: string; expand?: string; }): Excel.Range` - Where option.select is a comma-delimited string that specifies the properties to load, and options.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>\n\n<span data-ttu-id=\"0a83b-432\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range`-Uniquement disponible sur les types de collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-432\">`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Excel.Range` - Only available on collection types.</span></span> <span data-ttu-id=\"0a83b-433\">Elle est similaire à la signature précédente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-433\">It is similar to the preceding signature.</span></span> <span data-ttu-id=\"0a83b-434\">Option. Top indique le nombre maximal d’éléments de collection qui peuvent être inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-434\">Option.top specifies the maximum number of collection items that can be included in the result.</span></span> <span data-ttu-id=\"0a83b-435\">Option. Skip indique le nombre d’éléments qui doivent être ignorés et qui ne sont pas inclus dans le résultat.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-435\">Option.skip specifies the number of items that are to be skipped and not included in the result.</span></span> <span data-ttu-id=\"0a83b-436\">Si option. Top est spécifié, le jeu de résultats démarre après avoir ignoré le nombre spécifié d’éléments.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-436\">If option.top is specified, the result set will start after skipping the specified number of items.</span></span>"
    name: load(option)
    fullName: load(option)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(option?: Excel.Interfaces.RangeLoadOptions): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: option
          description: ''
          type:
            - 'excel!Excel.Interfaces.RangeLoadOptions:interface'
  - uid: 'excel!Excel.Range#load:member(2)'
    summary: <span data-ttu-id="0a83b-437">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="0a83b-437">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0a83b-438">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="0a83b-438">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-439">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-439">Examples</span></span>

          ```javascript
          // Below example uses range address to get the range object.
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "A1:F8"; 
              var worksheet = ctx.workbook.worksheets.getItem(sheetName);
              var range = worksheet.getRange(rangeAddress);
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Below example uses a named-range to get the range object.
          Excel.run(function (ctx) { 
              var rangeName = 'MyRange';
              var range = ctx.workbook.names.getItem(rangeName).range;
              range.load('cellCount');
              return ctx.sync().then(function() {
                  console.log(range.cellCount);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // The example below sets number-format, values and formulas on a grid that contains 2x3 grid.
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "F5:G7";
              var numberFormat = [[null, "d-mmm"], [null, "d-mmm"], [null, null]]
              var values = [["Today", 42147], ["Tomorrow", "5/24"], ["Difference in days", null]];
              var formulas = [[null,null], [null,null], [null,"=G6-G5"]];
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.numberFormat = numberFormat;
              range.values = values;
              range.formulas= formulas;
              range.load('text');
              return ctx.sync().then(function() {
                  console.log(range.text);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="0a83b-440">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="0a83b-440">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Range#load:member(3)'
    summary: <span data-ttu-id="0a83b-441">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="0a83b-441">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="0a83b-442">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="0a83b-442">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: { select?: string; expand?: string; }): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="0a83b-443">Où propertyNamesAndPaths. Select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et propertyNamesAndPaths. Expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="0a83b-443">Where propertyNamesAndPaths.select is a comma-delimited string that specifies the properties to load, and propertyNamesAndPaths.expand is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - '{ select?: string; expand?: string; }'
  - uid: 'excel!Excel.Range#merge:member(1)'
    summary: "<span data-ttu-id=\"0a83b-444\">Fusionne la plage de cellules dans une zone de la feuille de calcul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-444\">Merge the range cells into one region in the worksheet.</span></span>\n\n<span data-ttu-id=\"0a83b-445\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-445\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-446">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-446">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.merge(true);
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: across
          description: "<span data-ttu-id=\"0a83b-447\">Facultatif.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-447\">Optional.</span></span> <span data-ttu-id=\"0a83b-448\">Définit la valeur «\_true\_» pour fusionner séparément les cellules de chaque ligne de la plage spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-448\">Set true to merge cells in each row of the specified range as separate merged cells.</span></span> <span data-ttu-id=\"0a83b-449\">La valeur par défaut est «\_false\_».</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-449\">The default value is false.</span></span>"
          type:
            - boolean
  - uid: 'excel!Excel.Range#numberFormat:member'
    summary: "<span data-ttu-id=\"0a83b-450\">Représente le code de format de nombre d’Excel pour la plage donnée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-450\">Represents Excel's number format code for the given range.</span></span> <span data-ttu-id=\"0a83b-451\">Lorsque vous définissez la propriété format numérique sur une plage, l’argument valeur peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-451\">When setting number format to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-452\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-452\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-453\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-453\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: numberFormat
    fullName: numberFormat
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormat: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#numberFormatLocal:member'
    summary: "<span data-ttu-id=\"0a83b-454\">Représente le code de format de nombre d’Excel pour la plage donnée, en fonction des paramètres de langue de l’utilisateur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-454\">Represents Excel's number format code for the given range, based on the language settings of the user.</span></span> <span data-ttu-id=\"0a83b-455\">Lorsque vous définissez le format de nombre local à une plage, l’argument valeur peut être une valeur unique (chaîne) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-455\">When setting number format local to a range, the value argument can be either a single value (string) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-456\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-456\">If the argument is a single value, it will be applied to all cells in the range.</span></span> <span data-ttu-id=\"0a83b-457\">Excel n’effectue aucune langue ou contrainte de format lors de l’obtention ou de `numberFormatLocal` la définition de la propriété.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-457\">Excel does not perform any language or format coercion when getting or setting the `numberFormatLocal` property.</span></span> <span data-ttu-id=\"0a83b-458\">Tout texte renvoyé utilise les chaînes mises en forme localement en fonction de la langue spécifiée dans les paramètres système.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-458\">Any returned text uses the locally-formatted strings based on the language specified in the system settings.</span></span>\n\n<span data-ttu-id=\"0a83b-459\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-459\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: numberFormatLocal
    fullName: numberFormatLocal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'numberFormatLocal: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#removeDuplicates:member(1)'
    summary: "<span data-ttu-id=\"0a83b-460\">Supprime les valeurs dupliquées de la plage spécifiée par les colonnes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-460\">Removes duplicate values from the range specified by the columns.</span></span>\n\n<span data-ttu-id=\"0a83b-461\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-461\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeDuplicates(columns: number[], includesHeader: boolean): Excel.RemoveDuplicatesResult;'
      return:
        type:
          - 'excel!Excel.RemoveDuplicatesResult:class'
        description: |-
          <span data-ttu-id="0a83b-462">Objet résultant qui contient le nombre de lignes supprimées et le nombre de lignes uniques restantes.</span><span class="sxs-lookup"><span data-stu-id="0a83b-462">The resulting object that contains the number of rows removed and the number of remaining unique rows.</span></span>

          #### <a name="examples"></a><span data-ttu-id="0a83b-463">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-463">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getItem("Sample");
              const range = sheet.getRange("B2:D11");

              const deleteResult = range.removeDuplicates([0],true);    
              deleteResult.load();    
              await context.sync();

              console.log(deleteResult.removed + " entries with duplicate names removed.");
              console.log(deleteResult.uniqueRemaining + " entries with unique names remain in the range.");
          });
          ```
      parameters:
        - id: columns
          description: <span data-ttu-id="0a83b-464">Les colonnes à l’intérieur de la plage qui peuvent contenir des doublons.</span><span class="sxs-lookup"><span data-stu-id="0a83b-464">The columns inside the range that may contain duplicates.</span></span> <span data-ttu-id="0a83b-465">Au moins une colonne doit être spécifiée.</span><span class="sxs-lookup"><span data-stu-id="0a83b-465">At least one column needs to be specified.</span></span> <span data-ttu-id="0a83b-466">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="0a83b-466">Zero-indexed.</span></span>
          type:
            - 'number[]'
        - id: includesHeader
          description: <span data-ttu-id="0a83b-467">True si les données d’entrée contiennent un en-tête.</span><span class="sxs-lookup"><span data-stu-id="0a83b-467">True if the input data contains header.</span></span> <span data-ttu-id="0a83b-468">La valeur par défaut est False.</span><span class="sxs-lookup"><span data-stu-id="0a83b-468">Default is false.</span></span>
          type:
            - boolean
  - uid: 'excel!Excel.Range#replaceAll:member(1)'
    summary: "<span data-ttu-id=\"0a83b-469\">Détecte et remplace la chaîne donnée basée sur les critères spécifiés dans la plage active.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-469\">Finds and replaces the given string based on the criteria specified within the current range.</span></span>\n\n<span data-ttu-id=\"0a83b-470\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-470\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'replaceAll(text: string, replacement: string, criteria: Excel.ReplaceCriteria): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.Range#replaceAll~0:complex'
        description: <span data-ttu-id="0a83b-471">Nombre de remplacements effectués.</span><span class="sxs-lookup"><span data-stu-id="0a83b-471">The number of replacements performed.</span></span>
      parameters:
        - id: text
          description: <span data-ttu-id="0a83b-472">Chaîne à rechercher.</span><span class="sxs-lookup"><span data-stu-id="0a83b-472">String to find.</span></span>
          type:
            - string
        - id: replacement
          description: <span data-ttu-id="0a83b-473">Chaîne de remplacement de l’original par.</span><span class="sxs-lookup"><span data-stu-id="0a83b-473">String to replace the original with.</span></span>
          type:
            - string
        - id: criteria
          description: <span data-ttu-id="0a83b-474">Critères de remplacement supplémentaires.</span><span class="sxs-lookup"><span data-stu-id="0a83b-474">Additional Replace Criteria.</span></span>
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Range#rowCount:member'
    summary: "<span data-ttu-id=\"0a83b-475\">Renvoie le nombre total de lignes de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-475\">Returns the total number of rows in the range.</span></span> <span data-ttu-id=\"0a83b-476\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-476\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-477\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-477\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: rowCount
    fullName: rowCount
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowCount: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#rowHidden:member'
    summary: "<span data-ttu-id=\"0a83b-478\">Indique si toutes les lignes de la plage active sont masquées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-478\">Represents if all rows of the current range are hidden.</span></span>\n\n<span data-ttu-id=\"0a83b-479\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-479\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: rowHidden
    fullName: rowHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rowHidden: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Range#rowIndex:member'
    summary: "<span data-ttu-id=\"0a83b-480\">Renvoie le numéro de ligne de la première cellule de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-480\">Returns the row number of the first cell in the range.</span></span> <span data-ttu-id=\"0a83b-481\">Avec indice zéro.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-481\">Zero-indexed.</span></span> <span data-ttu-id=\"0a83b-482\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-482\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-483\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-483\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: rowIndex
    fullName: rowIndex
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly rowIndex: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Range#select:member(1)'
    summary: "<span data-ttu-id=\"0a83b-484\">Sélectionne la plage spécifiée dans l’interface utilisateur d’Excel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-484\">Selects the specified range in the Excel UI.</span></span>\n\n<span data-ttu-id=\"0a83b-485\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-485\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-486">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-486">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) {
              var sheetName = "Sheet1";
              var rangeAddress = "F5:F10"; 
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.select();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#set:member(1)'
    summary: '<span data-ttu-id="0a83b-487">Définit plusieurs propriétés d’un objet en même temps.</span><span class="sxs-lookup"><span data-stu-id="0a83b-487">Sets multiple properties of an object at the same time.</span></span> <span data-ttu-id="0a83b-488">Vous pouvez transmettre un objet plain avec les propriétés appropriées, ou un autre objet API du même type.</span><span class="sxs-lookup"><span data-stu-id="0a83b-488">You can pass either a plain object with the appropriate properties, or another API object of the same type.</span></span>'
    remarks: "<span data-ttu-id=\"0a83b-489\">Cette méthode est dotée de la signature supplémentaire suivante\_:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-489\">This method has the following additional signature:</span></span>\n\n`set(properties: Excel.Range): void`\n\n#### <a name=\"examples\"></a><span data-ttu-id=\"0a83b-490\">Exemples</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-490\">Examples</span></span>\n\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const range = sheet.getRange(\"B2:E2\");\n    range.set({\n        format: {\n            fill: {\n                color: \"#4472C4\"\n            },\n            font: {\n                name: \"Verdana\",\n                color: \"white\"\n            }\n        }\n    })\n    range.format.autofitColumns();\n    await context.sync();\n});\n```\n```typescript\nawait Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const sourceRange = sheet.getRange(\"B2:E2\");\n    sourceRange.load(\"format/fill/color, format/font/name, format/font/color\");\n    await context.sync();\n\n    // Set properties based on the loaded and synced \n    // source range.\n    const targetRange = sheet.getRange(\"B7:E7\");\n    targetRange.set(sourceRange); \n    targetRange.format.autofitColumns();\n    await context.sync();\n});\n```"
    name: 'set(properties, options)'
    fullName: 'set(properties, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Interfaces.RangeUpdateData, options?: OfficeExtension.UpdateOptions): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: <span data-ttu-id="0a83b-491">Objet JavaScript avec des propriétés qui sont structurées isomorphically vers les propriétés de l’objet sur lequel la méthode est appelée.</span><span class="sxs-lookup"><span data-stu-id="0a83b-491">A JavaScript object with properties that are structured isomorphically to the properties of the object on which the method is called.</span></span>
          type:
            - 'excel!Excel.Interfaces.RangeUpdateData:interface'
        - id: options
          description: <span data-ttu-id="0a83b-492">Fournit une option permettant de supprimer les erreurs si l’objet Properties tente de définir des propriétés en lecture seule.</span><span class="sxs-lookup"><span data-stu-id="0a83b-492">Provides an option to suppress errors if the properties object tries to set any read-only properties.</span></span>
          type:
            - 'excel!OfficeExtension.UpdateOptions:interface'
  - uid: 'excel!Excel.Range#set:member(2)'
    summary: '<span data-ttu-id="0a83b-493">Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.</span><span class="sxs-lookup"><span data-stu-id="0a83b-493">Sets multiple properties on the object at the same time, based on an existing loaded object.</span></span>'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.Range): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.Range:class'
  - uid: 'excel!Excel.Range#setCellProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-494\">Met à jour la plage basée sur une matrice 2D des propriétés de la cellule, résumant les éléments tels que la police, remplissage, bordures, alignement et ainsi de suite.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-494\">Updates the range based on a 2D array of cell properties , encapsulating things like font, fill, borders, alignment, and so forth.</span></span>\n\n<span data-ttu-id=\"0a83b-495\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-495\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: setCellProperties(cellPropertiesData)
    fullName: setCellProperties(cellPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setCellProperties(cellPropertiesData: SettableCellProperties[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-496">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-496">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              const sheet = context.workbook.worksheets.getActiveWorksheet();

              // Creating the SettableCellProperties objects to use for the range.
              // In your add-in, these should be created once, outside the function.
              const topHeaderProps: Excel.SettableCellProperties = {
                  // The style property takes a string matching the name of an Excel style.
                  // Note that a style will overwrite any formatting,
                  // so do not use the format property with the style property.
                  style: "Heading1"
              };

              const headerProps: Excel.SettableCellProperties = {
                  // Any subproperties of format that are not set will not be changed when these cell properties are set.
                  format: {
                      fill: {
                          color: "Blue"
                      },
                      font: {
                          color: "White",
                          bold: true
                      }
                  }
              };

              const nonApplicableProps: Excel.SettableCellProperties = {
                  format: {
                      fill: {
                          pattern: Excel.FillPattern.gray25
                      },
                      font: {
                          color: "Gray",
                          italic: true
                      }
                  }
              };

              const matchupScoreProps: Excel.SettableCellProperties = {
                  format: {
                      borders: {
                          bottom: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          left: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          right: {
                              style: Excel.BorderLineStyle.continuous
                          },
                          top: {
                              style: Excel.BorderLineStyle.continuous
                          }
                      }
                  }
              };

              const range = sheet.getRange("A1:E5");

              // You can use empty JSON objects to avoid changing a cell's properties.
              range.setCellProperties([
                  [topHeaderProps, {}, {}, {}, {}],
                  [{}, {}, headerProps, headerProps, headerProps],
                  [{}, headerProps, nonApplicableProps, matchupScoreProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, nonApplicableProps, matchupScoreProps],
                  [{}, headerProps, matchupScoreProps, matchupScoreProps, nonApplicableProps]
              ]);

              sheet.getUsedRange().format.autofitColumns();
              await context.sync();
          });
          ```
      parameters:
        - id: cellPropertiesData
          description: <span data-ttu-id="0a83b-497">Tableau 2D qui représente les propriétés à définir dans chaque cellule.</span><span class="sxs-lookup"><span data-stu-id="0a83b-497">A 2D array that represents which properties to set in each cell.</span></span>
          type:
            - 'excel!Excel.Range#setCellProperties~0:complex'
  - uid: 'excel!Excel.Range#setColumnProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-498\">Met à jour la plage basée sur une matrice à une dimension des propriétés de la cellule, résumant les éléments tels que la police, remplissage, bordures, alignement et ainsi de suite.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-498\">Updates the range based on a single-dimensional array of column properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>\n\n<span data-ttu-id=\"0a83b-499\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-499\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: setColumnProperties(columnPropertiesData)
    fullName: setColumnProperties(columnPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnProperties(columnPropertiesData: SettableColumnProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnPropertiesData
          description: <span data-ttu-id="0a83b-500">Tableau qui représente les propriétés à définir dans chaque colonne.</span><span class="sxs-lookup"><span data-stu-id="0a83b-500">An array that represents which properties to set in each column.</span></span>
          type:
            - 'excel!Excel.Range#setColumnProperties~0:complex'
  - uid: 'excel!Excel.Range#setDirty:member(1)'
    summary: "<span data-ttu-id=\"0a83b-501\">Cette méthode désigne une plage qui doit être recalculée lorsque le recalcul suivant se produit.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-501\">Set a range to be recalculated when the next recalculation occurs.</span></span>\n\n<span data-ttu-id=\"0a83b-502\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-502\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#setRowProperties:member(1)'
    summary: "<span data-ttu-id=\"0a83b-503\">Met à jour la plage basée sur une matrice à une dimension des propriétés de la cellule, résumant les éléments tels que la police, remplissage, bordures, alignement et ainsi de suite.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-503\">Updates the range based on a single-dimensional array of row properties, encapsulating things like font, fill, borders, alignment, and so forth.</span></span>\n\n<span data-ttu-id=\"0a83b-504\">\\[[Ensemble d’API\_: ExcelApi 1,9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-504\">\\[ [API set: ExcelApi 1.9](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: setRowProperties(rowPropertiesData)
    fullName: setRowProperties(rowPropertiesData)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowProperties(rowPropertiesData: SettableRowProperties[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowPropertiesData
          description: <span data-ttu-id="0a83b-505">Tableau qui représente les propriétés à définir dans chaque ligne.</span><span class="sxs-lookup"><span data-stu-id="0a83b-505">An array that represents which properties to set in each row.</span></span>
          type:
            - 'excel!Excel.Range#setRowProperties~0:complex'
  - uid: 'excel!Excel.Range#showCard:member(1)'
    summary: "<span data-ttu-id=\"0a83b-506\">Affiche la carte pour une cellule active si son contenu est riche en valeur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-506\">Displays the card for an active cell if it has rich value content.</span></span>\n\n<span data-ttu-id=\"0a83b-507\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-507\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Range#sort:member'
    summary: "<span data-ttu-id=\"0a83b-508\">Représente le tri de plage de la plage actuelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-508\">Represents the range sort of the current range.</span></span> <span data-ttu-id=\"0a83b-509\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-509\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-510\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-510\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: sort
    fullName: sort
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly sort: Excel.RangeSort;'
      return:
        type:
          - 'excel!Excel.RangeSort:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-511">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-511">Examples</span></span>

          ```typescript
          async function sortTopToBottom(criteria: string) {
              await Excel.run(async (context) => {
                  const sheet = context.workbook.worksheets.getActiveWorksheet();
                  const range = sheet.getRange("A1:E5");

                  // Find the column header that provides the sort criteria.
                  const header = range.find(criteria, {});
                  header.load("columnIndex");
                  await context.sync();

                  range.sort.apply(
                      [
                          {
                              key: header.columnIndex,
                              sortOn: Excel.SortOn.value
                          }
                      ],
                      false /*matchCase*/,
                      true /*hasHeaders*/,
                      Excel.SortOrientation.rows
                  );
                  await context.sync();
              });
          }
          ```
  - uid: 'excel!Excel.Range#style:member'
    summary: "<span data-ttu-id=\"0a83b-512\">Représente le style de la plage actuelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-512\">Represents the style of the current range.</span></span> <span data-ttu-id=\"0a83b-513\">Si les styles des cellules sont incohérents, la valeur null est renvoyée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-513\">If the styles of the cells are inconsistent, null will be returned.</span></span> <span data-ttu-id=\"0a83b-514\">Pour les styles personnalisés, le nom du style est renvoyé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-514\">For custom styles, the style name will be returned.</span></span> <span data-ttu-id=\"0a83b-515\">Pour les styles intégrés, une chaîne représentant une valeur dans l’énumération BuiltInStyle est retournée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-515\">For built-in styles, a string representing a value in the BuiltInStyle enum will be returned.</span></span>\n\n<span data-ttu-id=\"0a83b-516\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-516\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: style
    fullName: style
    langs:
      - typeScript
    type: property
    syntax:
      content: 'style: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-517">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-517">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let worksheet = context.workbook.worksheets.getItem("Sample");
              let range = worksheet.getRange("A1:E1");

              // Apply built-in style. 
              // Styles are in the Home tab ribbon.
              range.style = Excel.BuiltInStyle.neutral;
              range.format.horizontalAlignment = "Right";

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#text:member'
    summary: "<span data-ttu-id=\"0a83b-518\">Valeurs de texte de la plage spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-518\">Text values of the specified range.</span></span> <span data-ttu-id=\"0a83b-519\">La valeur de texte ne dépend pas de la largeur de la cellule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-519\">The Text value will not depend on the cell width.</span></span> <span data-ttu-id=\"0a83b-520\">La \\# substitution de signe qui se produit dans l’interface utilisateur d’Excel n’affecte pas la valeur de texte renvoyée par l’API.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-520\">The \\# sign substitution that happens in Excel UI will not affect the text value returned by the API.</span></span> <span data-ttu-id=\"0a83b-521\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-521\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-522\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-522\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: text
    fullName: text
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly text: string[][];'
      return:
        type:
          - 'string[][]'
  - uid: 'excel!Excel.Range#toJSON:member(1)'
    summary: '<span data-ttu-id="0a83b-523">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class="sxs-lookup"><span data-stu-id="0a83b-523">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id="0a83b-524">.</span><span class="sxs-lookup"><span data-stu-id="0a83b-524"></span></span> <span data-ttu-id="0a83b-525">(`JSON.stringify`</span><span class="sxs-lookup"><span data-stu-id="0a83b-525"></span></span><!-- --><span data-ttu-id="0a83b-526">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que l’objet Excel. Range d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.RangeData`</span><span class="sxs-lookup"><span data-stu-id="0a83b-526">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original Excel.Range object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.RangeData`</span></span><!-- --><span data-ttu-id="0a83b-527">) qui contient des copies superficielles de toutes les propriétés enfants chargées à partir de l’objet d’origine.</span><span class="sxs-lookup"><span data-stu-id="0a83b-527">) that contains shallow copies of any loaded child properties from the original object.</span></span>'
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.RangeData;'
      return:
        type:
          - 'excel!Excel.Interfaces.RangeData:interface'
        description: ''
  - uid: 'excel!Excel.Range#track:member(1)'
    summary: "<span data-ttu-id=\"0a83b-528\">Effectuer le suivi de l’objet pour l’ajustement automatique en fonction environnant des modifications dans le document.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-528\">Track the object for automatic adjustment based on surrounding changes in the document.</span></span> <span data-ttu-id=\"0a83b-529\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-529\">This call is a shorthand for context.trackedObjects.add(thisObject).</span></span> <span data-ttu-id=\"0a83b-530\">Si vous utilisez cet objet au sein de «\_.sync\_» appels et en dehors de l’exécution séquentielle d’un lot de «\_.run\_» et rencontrez un message d’erreur «\_InvalidObjectPath\_» lors de la définition d’une propriété ou appeler une méthode sur l’objet, vous devez ajouter l’objet à l’objet de suivi collection de sites lors de l’objet a été créé.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-530\">If you are using this object across \".sync\" calls and outside the sequential execution of a \".run\" batch, and get an \"InvalidObjectPath\" error when setting a property or invoking a method on the object, you needed to have added the object to the tracked object collection when the object was first created.</span></span>"
    name: track()
    fullName: track()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'track(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.Range#unmerge:member(1)'
    summary: "<span data-ttu-id=\"0a83b-531\">Annule la fusion de la plage de cellules et les sépare dans des cellules distinctes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-531\">Unmerge the range cells into separate cells.</span></span>\n\n<span data-ttu-id=\"0a83b-532\">\\[[Ensemble d’API\_: ExcelApi 1,2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-532\">\\[ [API set: ExcelApi 1.2](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-533">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-533">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var sheetName = "Sheet1";
              var rangeAddress = "A1:C3";
              var range = ctx.workbook.worksheets.getItem(sheetName).getRange(rangeAddress);
              range.unmerge();
              return ctx.sync(); 
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
  - uid: 'excel!Excel.Range#untrack:member(1)'
    summary: "<span data-ttu-id=\"0a83b-534\">Publication mémoire associée à cet objet si elle a été précédemment suivie.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-534\">Release the memory associated with this object, if it has previously been tracked.</span></span> <span data-ttu-id=\"0a83b-535\">Cet appel est abréviations context.trackedObjects.add(thisObject).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-535\">This call is shorthand for context.trackedObjects.remove(thisObject).</span></span> <span data-ttu-id=\"0a83b-536\">Vous rencontrez de nombreux objets suivies ralentit l’application hôte, donc n’oubliez pas de libérer les objets que l'on ajoute, une fois que vous avez terminé à les utiliser.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-536\">Having many tracked objects slows down the host application, so please remember to free any objects you add, once you're done using them.</span></span> <span data-ttu-id=\"0a83b-537\">Vous devez appeler «\_context.sync()\_» avant la publication de mémoire prend effet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-537\">You will need to call \"context.sync()\" before the memory release takes effect.</span></span>"
    name: untrack()
    fullName: untrack()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'untrack(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="0a83b-538">Exemples</span><span class="sxs-lookup"><span data-stu-id="0a83b-538">Examples</span></span>

          ```typescript
          Excel.run(async (context) => {
              const largeRange = context.workbook.getSelectedRange();
              largeRange.load(["rowCount", "columnCount"]);
              await context.sync();

              for (let i = 0; i < largeRange.rowCount; i++) {
                  for (let j = 0; j < largeRange.columnCount; j++) {
                      let cell = largeRange.getCell(i, j);
                      cell.values = [[i *j]];

                      // call untrack() to release the range from memory
                      cell.untrack();
                  }
              }

              await context.sync();
          });
          ```
  - uid: 'excel!Excel.Range#values:member'
    summary: "<span data-ttu-id=\"0a83b-539\">Représente les valeurs brutes de la plage spécifiée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-539\">Represents the raw values of the specified range.</span></span> <span data-ttu-id=\"0a83b-540\">Les données renvoyées peuvent être des chaînes, des valeurs numériques ou des valeurs booléennes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-540\">The data returned could be of type string, number, or a boolean.</span></span> <span data-ttu-id=\"0a83b-541\">Les cellules contenant une erreur renvoie la chaîne d’erreur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-541\">Cells that contain an error will return the error string.</span></span> <span data-ttu-id=\"0a83b-542\">Lors de la définition de valeurs à une plage, l’argument value peut être une valeur unique (String, Number ou Boolean) ou un tableau à deux dimensions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-542\">When setting values to a range, the value argument can be either a single value (string, number or boolean) or a two-dimensional array.</span></span> <span data-ttu-id=\"0a83b-543\">Si l’argument est une valeur unique, il est appliqué à toutes les cellules de la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-543\">If the argument is a single value, it will be applied to all cells in the range.</span></span>\n\n<span data-ttu-id=\"0a83b-544\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-544\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: values
    fullName: values
    langs:
      - typeScript
    type: property
    syntax:
      content: 'values: any[][];'
      return:
        type:
          - 'any[][]'
  - uid: 'excel!Excel.Range#valueTypes:member'
    summary: "<span data-ttu-id=\"0a83b-545\">Représente le type de données de chaque cellule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-545\">Represents the type of data of each cell.</span></span> <span data-ttu-id=\"0a83b-546\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-546\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-547\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-547\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: valueTypes
    fullName: valueTypes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly valueTypes: Excel.RangeValueType[][];'
      return:
        type:
          - 'excel!Excel.Range#valueTypes~0:complex'
  - uid: 'excel!Excel.Range#worksheet:member'
    summary: "<span data-ttu-id=\"0a83b-548\">Feuille de calcul contenant la plage.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-548\">The worksheet containing the current range.</span></span> <span data-ttu-id=\"0a83b-549\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-549\">Read-only.</span></span>\n\n<span data-ttu-id=\"0a83b-550\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"0a83b-550\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: worksheet
    fullName: worksheet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly worksheet: Excel.Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:class'
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Range#autoFill~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.AutoFillType:enum'
    name: Excel.AutoFillType
  - uid: 'excel!Excel.Range#autoFill~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.ClearApplyTo:enum'
    name: Excel.ClearApplyTo
  - uid: 'excel!Excel.ConditionalFormatCollection:class'
    name: Excel.ConditionalFormatCollection
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RangeCopyType:enum'
    name: Excel.RangeCopyType
  - uid: 'excel!Excel.Range#copyFrom~1:complex'
    name: Range | RangeAreas | string
    fullName: Excel.Range | Excel.RangeAreas | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'excel!Excel.RangeAreas:class'
        name: RangeAreas
        fullName: Excel.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.DataValidation:class'
    name: Excel.DataValidation
  - uid: 'excel!Excel.DeleteShiftDirection:enum'
    name: Excel.DeleteShiftDirection
  - uid: 'excel!Excel.Range:class'
    name: Excel.Range
  - uid: 'excel!Excel.SearchCriteria:interface'
    name: Excel.SearchCriteria
  - uid: 'excel!Excel.RangeFormat:class'
    name: Excel.RangeFormat
  - uid: 'excel!Excel.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getCellProperties~0:complex'
    name: 'OfficeExtension.ClientResult<CellProperties[][]>'
    fullName: 'OfficeExtension.ClientResult<Excel.CellProperties[][]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.CellProperties:interface'
        name: CellProperties
        fullName: Excel.CellProperties
      - name: '[][]>'
        fullName: '[][]>'
  - uid: 'excel!Excel.CellPropertiesLoadOptions:interface'
    name: CellPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getColumnProperties~0:complex'
    name: 'OfficeExtension.ClientResult<ColumnProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.ColumnProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.ColumnProperties:interface'
        name: ColumnProperties
        fullName: Excel.ColumnProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.ColumnPropertiesLoadOptions:interface'
    name: ColumnPropertiesLoadOptions
  - uid: 'excel!Excel.Range#getImage~0:complex'
    name: OfficeExtension.ClientResult<string>
    fullName: OfficeExtension.ClientResult<string>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <string>
        fullName: <string>
  - uid: 'excel!Excel.Range#getIntersection~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getIntersectionOrNullObject~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.Range#getRowProperties~0:complex'
    name: 'OfficeExtension.ClientResult<RowProperties[]>'
    fullName: 'OfficeExtension.ClientResult<Excel.RowProperties[]>'
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <
        fullName: <
      - uid: 'excel!Excel.RowProperties:interface'
        name: RowProperties
        fullName: Excel.RowProperties
      - name: '[]>'
        fullName: '[]>'
  - uid: 'excel!Excel.RowPropertiesLoadOptions:interface'
    name: RowPropertiesLoadOptions
  - uid: 'excel!Excel.RangeAreas:class'
    name: Excel.RangeAreas
  - uid: 'excel!Excel.SpecialCellType:enum'
    name: Excel.SpecialCellType
  - uid: 'excel!Excel.SpecialCellValueType:enum'
    name: Excel.SpecialCellValueType
  - uid: 'excel!Excel.TableScopedCollection:class'
    name: Excel.TableScopedCollection
  - uid: 'excel!Excel.RangeView:class'
    name: Excel.RangeView
  - uid: 'excel!Excel.RangeHyperlink:interface'
    name: Excel.RangeHyperlink
  - uid: 'excel!Excel.InsertShiftDirection:enum'
    name: Excel.InsertShiftDirection
  - uid: 'excel!Excel.Range#linkedDataTypeState~0:complex'
    name: 'Excel.LinkedDataTypeState[][]'
    fullName: 'Excel.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'excel!Excel.LinkedDataTypeState:enum'
        name: Excel.LinkedDataTypeState
        fullName: Excel.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Interfaces.RangeLoadOptions:interface'
    name: Excel.Interfaces.RangeLoadOptions
  - uid: 'excel!Excel.RemoveDuplicatesResult:class'
    name: Excel.RemoveDuplicatesResult
  - uid: 'excel!Excel.Range#replaceAll~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: Excel.ReplaceCriteria
  - uid: 'excel!Excel.Interfaces.RangeUpdateData:interface'
    name: Interfaces.RangeUpdateData
  - uid: 'excel!OfficeExtension.UpdateOptions:interface'
    name: OfficeExtension.UpdateOptions
  - uid: 'excel!Excel.Range#setCellProperties~0:complex'
    name: 'SettableCellProperties[][]'
    fullName: 'Excel.SettableCellProperties[][]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableCellProperties:interface'
        name: SettableCellProperties
        fullName: Excel.SettableCellProperties
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Range#setColumnProperties~0:complex'
    name: 'SettableColumnProperties[]'
    fullName: 'Excel.SettableColumnProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableColumnProperties:interface'
        name: SettableColumnProperties
        fullName: Excel.SettableColumnProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.Range#setRowProperties~0:complex'
    name: 'SettableRowProperties[]'
    fullName: 'Excel.SettableRowProperties[]'
    spec.typeScript:
      - uid: 'excel!Excel.SettableRowProperties:interface'
        name: SettableRowProperties
        fullName: Excel.SettableRowProperties
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.RangeSort:class'
    name: Excel.RangeSort
  - uid: 'excel!Excel.Interfaces.RangeData:interface'
    name: Excel.Interfaces.RangeData
  - uid: 'excel!Excel.Range#valueTypes~0:complex'
    name: 'Excel.RangeValueType[][]'
    fullName: 'Excel.RangeValueType[][]'
    spec.typeScript:
      - uid: 'excel!Excel.RangeValueType:enum'
        name: Excel.RangeValueType
        fullName: Excel.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'excel!Excel.Worksheet:class'
    name: Excel.Worksheet