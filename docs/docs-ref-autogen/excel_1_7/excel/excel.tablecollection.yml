### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.TableCollection:class'
    summary: "<span data-ttu-id=\"bd69d-101\">Représente une collection de tous les tableaux qui font partie du classeur ou de la feuille de calcul, en fonction de la méthode d’appel.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-101\">Represents a collection of all the tables that are part of the workbook or worksheet, depending on how it was reached.</span></span>\n\n<span data-ttu-id=\"bd69d-102\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-102\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: Excel.TableCollection
    fullName: Excel.TableCollection
    langs:
      - typeScript
    type: class
    extends:
      - 'excel!OfficeExtension.ClientObject:class'
    package: excel!
    children:
      - 'excel!Excel.TableCollection#add:member(1)'
      - 'excel!Excel.TableCollection#context:member'
      - 'excel!Excel.TableCollection#count:member'
      - 'excel!Excel.TableCollection#getCount:member(1)'
      - 'excel!Excel.TableCollection#getItem:member(1)'
      - 'excel!Excel.TableCollection#getItemAt:member(1)'
      - 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.TableCollection#items:member'
      - 'excel!Excel.TableCollection#load:member(1)'
      - 'excel!Excel.TableCollection#load:member(2)'
      - 'excel!Excel.TableCollection#load:member(3)'
      - 'excel!Excel.TableCollection#onChanged:member'
      - 'excel!Excel.TableCollection#toJSON:member(1)'
  - uid: 'excel!Excel.TableCollection#add:member(1)'
    summary: "<span data-ttu-id=\"bd69d-p101\">Crée un tableau L’adresse de la source ou de l’objet de la plage détermine la feuille de calcul dans laquelle le tableau sera ajouté. Si l’ajout ne peut être effectué (par exemple, parce que l’adresse n’est pas valide, ou parce que le tableau empiéterait sur un autre tableau), un message d’erreur apparaît.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-p101\">Create a new table. The range object or source address determines the worksheet under which the table will be added. If the table cannot be added (e.g., because the address is invalid, or the table would overlap with another table), an error will be thrown.</span></span>\n\n<span data-ttu-id=\"bd69d-106\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-106\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: 'add(address, hasHeaders)'
    fullName: 'add(address, hasHeaders)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(address: Range | string, hasHeaders: boolean): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd69d-107">Exemples</span><span class="sxs-lookup"><span data-stu-id="bd69d-107">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.add('Sheet1!A1:E7', true);
              table.load('name');
              return ctx.sync().then(function() {
                  console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: address
          description: "<span data-ttu-id=\"bd69d-108\">Objet de plage ou nom/adresse (string) de la plage représentant la source de données.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-108\">A Range object, or a string address or name of the range representing the data source.</span></span> <span data-ttu-id=\"bd69d-109\">Si l’adresse ne contient pas de nom de feuille, la feuille ouverte est utilisée.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-109\">If the address does not contain a sheet name, the currently-active sheet is used.</span></span> <span data-ttu-id=\"bd69d-110\">\\[Ensemble d’API\_: ExcelApi 1,1/1,3.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-110\">\\[Api set: ExcelApi 1.1 / 1.3.</span></span> <span data-ttu-id=\"bd69d-111\">Avant ExcelApi 1,3, ce paramètre doit être une chaîne.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-111\">Prior to ExcelApi 1.3, this parameter must be a string.</span></span> <span data-ttu-id=\"bd69d-112\">À partir de l’API Excel 1,3, ce paramètre peut être un objet Range ou une chaîne.\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-112\">Starting with Excel Api 1.3, this parameter may be a Range object or a string.\\]</span></span>"
          type:
            - 'excel!Excel.TableCollection#add~0:complex'
        - id: hasHeaders
          description: '<span data-ttu-id="bd69d-p103">Valeur booléenne qui indique si les données importées disposent d’étiquettes de colonne. Si la source ne contient pas d’en-têtes (autrement dit, lorsque cette propriété est définie sur false), Excel génère automatiquement un en-tête et décale les données d’une ligne vers le bas.</span><span class="sxs-lookup"><span data-stu-id="bd69d-p103">Boolean value that indicates whether the data being imported has column labels. If the source does not contain headers (i.e,. when this property set to false), Excel will automatically generate header shifting the data down by one row.</span></span>'
          type:
            - boolean
  - uid: 'excel!Excel.TableCollection#context:member'
    summary: <span data-ttu-id="bd69d-116">Contexte de demande associé à l’objet.</span><span class="sxs-lookup"><span data-stu-id="bd69d-116">The request context associated with the object.</span></span> <span data-ttu-id="bd69d-117">Cette opération connecte le processus du complément au processus de l’application hôte Office.</span><span class="sxs-lookup"><span data-stu-id="bd69d-117">This connects the add-in's process to the Office host application's process.</span></span>
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.TableCollection#count:member'
    summary: "<span data-ttu-id=\"bd69d-118\">Renvoie le nombre de tableaux dans le classeur.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-118\">Returns the number of tables in the workbook.</span></span> <span data-ttu-id=\"bd69d-119\">En lecture seule.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-119\">Read-only.</span></span>\n\n<span data-ttu-id=\"bd69d-120\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-120\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: count
    fullName: count
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly count: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.TableCollection#getCount:member(1)'
    summary: "<span data-ttu-id=\"bd69d-121\">Obtient le nombre de tableaux de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-121\">Gets the number of tables in the collection.</span></span>\n\n<span data-ttu-id=\"bd69d-122\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-122\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): OfficeExtension.ClientResult<number>;'
      return:
        type:
          - 'excel!Excel.TableCollection#getCount~0:complex'
        description: ''
  - uid: 'excel!Excel.TableCollection#getItem:member(1)'
    summary: "<span data-ttu-id=\"bd69d-123\">Obtient un tableau à l’aide de son nom ou de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-123\">Gets a table by Name or ID.</span></span>\n\n<span data-ttu-id=\"bd69d-124\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-124\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItem(key)
    fullName: getItem(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(key: string): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd69d-125">Exemples</span><span class="sxs-lookup"><span data-stu-id="bd69d-125">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tableName = 'Table1';
              var table = ctx.workbook.tables.getItem(tableName);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: key
          description: <span data-ttu-id="bd69d-126">Nom ou ID du tableau à récupérer.</span><span class="sxs-lookup"><span data-stu-id="bd69d-126">Name or ID of the table to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.TableCollection#getItemAt:member(1)'
    summary: "<span data-ttu-id=\"bd69d-127\">Obtient un tableau en fonction de sa position dans la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-127\">Gets a table based on its position in the collection.</span></span>\n\n<span data-ttu-id=\"bd69d-128\">\\[[Ensemble d’API\_: ExcelApi 1,1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-128\">\\[ [API set: ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemAt(index)
    fullName: getItemAt(index)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemAt(index: number): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd69d-129">Exemples</span><span class="sxs-lookup"><span data-stu-id="bd69d-129">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var table = ctx.workbook.tables.getItemAt(0);
              table.load('name');
              return ctx.sync().then(function() {
                      console.log(table.name);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: index
          description: <span data-ttu-id="bd69d-130">Valeur d’indice de l’objet à récupérer.</span><span class="sxs-lookup"><span data-stu-id="bd69d-130">Index value of the object to be retrieved.</span></span> <span data-ttu-id="bd69d-131">Avec indice zéro.</span><span class="sxs-lookup"><span data-stu-id="bd69d-131">Zero-indexed.</span></span>
          type:
            - number
  - uid: 'excel!Excel.TableCollection#getItemOrNullObject:member(1)'
    summary: "<span data-ttu-id=\"bd69d-132\">Obtient un tableau à l’aide de son nom ou de son ID.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-132\">Gets a table by Name or ID.</span></span> <span data-ttu-id=\"bd69d-133\">Si le tableau n’existe pas, renvoie un objet null.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-133\">If the table does not exist, will return a null object.</span></span>\n\n<span data-ttu-id=\"bd69d-134\">\\[[Ensemble d’API\_: ExcelApi 1,4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-134\">\\[ [API set: ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: getItemOrNullObject(key)
    fullName: getItemOrNullObject(key)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(key: string): Excel.Table;'
      return:
        type:
          - 'excel!Excel.Table:class'
        description: ''
      parameters:
        - id: key
          description: <span data-ttu-id="bd69d-135">Nom ou ID du tableau à récupérer.</span><span class="sxs-lookup"><span data-stu-id="bd69d-135">Name or ID of the table to be retrieved.</span></span>
          type:
            - string
  - uid: 'excel!Excel.TableCollection#items:member'
    summary: <span data-ttu-id="bd69d-136">Obtient l’élément enfant chargé dans cette collection de sites.</span><span class="sxs-lookup"><span data-stu-id="bd69d-136">Gets the loaded child items in this collection.</span></span>
    name: items
    fullName: items
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly items: Excel.Table[];'
      return:
        type:
          - 'excel!Excel.TableCollection#items~0:complex'
  - uid: 'excel!Excel.TableCollection#load:member(1)'
    summary: <span data-ttu-id="bd69d-137">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="bd69d-137">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd69d-138">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="bd69d-138">You must call `context.sync()` before reading the properties.</span></span>
    name: load(options)
    fullName: load(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(options?: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: ''
      parameters:
        - id: options
          description: <span data-ttu-id="bd69d-139">Fournit des options pour les propriétés de l’objet à charger.</span><span class="sxs-lookup"><span data-stu-id="bd69d-139">Provides options for which properties of the object to load.</span></span>
          type:
            - 'excel!Excel.TableCollection#load~0:complex'
  - uid: 'excel!Excel.TableCollection#load:member(2)'
    summary: <span data-ttu-id="bd69d-140">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="bd69d-140">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd69d-141">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="bd69d-141">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd69d-142">Exemples</span><span class="sxs-lookup"><span data-stu-id="bd69d-142">Examples</span></span>

          ```javascript
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load();
              return ctx.sync().then(function() {
                  console.log("tables Count: " + tables.count);
                  for (var i = 0; i < tables.items.length; i++)
                  {
                      console.log(tables.items[i].name);
                  }
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
          ```javascript
          // Get the number of tables
          Excel.run(function (ctx) { 
              var tables = ctx.workbook.tables;
              tables.load('count');
              return ctx.sync().then(function() {
                  console.log(tables.count);
              });
          }).catch(function(error) {
              console.log("Error: " + error);
              if (error instanceof OfficeExtension.Error) {
                  console.log("Debug info: " + JSON.stringify(error.debugInfo));
              }
          });
          ```
      parameters:
        - id: propertyNames
          description: <span data-ttu-id="bd69d-143">Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="bd69d-143">A comma-delimited string or an array of strings that specify the properties to load.</span></span>
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.TableCollection#load:member(3)'
    summary: <span data-ttu-id="bd69d-144">Files d’attente de la commande pour charger les propriétés de l’objet spécifié.</span><span class="sxs-lookup"><span data-stu-id="bd69d-144">Queues up a command to load the specified properties of the object.</span></span> <span data-ttu-id="bd69d-145">Vous devez appeler `context.sync()` avant de lire les propriétés.</span><span class="sxs-lookup"><span data-stu-id="bd69d-145">You must call `context.sync()` before reading the properties.</span></span>
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '<span data-ttu-id="bd69d-146">`propertyNamesAndPaths.select`est une chaîne délimitée par des virgules qui spécifie les propriétés à `propertyNamesAndPaths.expand` charger et une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="bd69d-146">`propertyNamesAndPaths.select` is a comma-delimited string that specifies the properties to load, and `propertyNamesAndPaths.expand` is a comma-delimited string that specifies the navigation properties to load.</span></span>'
          type:
            - 'excel!OfficeExtension.LoadOption:interface'
  - uid: 'excel!Excel.TableCollection#onChanged:member'
    summary: "<span data-ttu-id=\"bd69d-147\">Survient lors de la modification des données d’une table dans un classeur ou d’une feuille de calcul.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-147\">Occurs when data changes on any table in a workbook, or a worksheet.</span></span>\n\n<span data-ttu-id=\"bd69d-148\">\\[[Ensemble d’API\_: ExcelApi 1,7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\\]</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-148\">\\[ [API set: ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets) \\]</span></span>"
    name: onChanged
    fullName: onChanged
    langs:
      - typeScript
    type: event
    syntax:
      content: 'readonly onChanged: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>;'
      return:
        type:
          - 'excel!Excel.TableCollection#onChanged~0:complex'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="bd69d-149">Exemples</span><span class="sxs-lookup"><span data-stu-id="bd69d-149">Examples</span></span>

          ```typescript
          await Excel.run(async (context) => {
              let tables = context.workbook.tables;
              tables.onChanged.add(onChange);

              await context.sync();
              console.log("A handler has been registered for the table collection onChanged event");
          });
          ```
  - uid: 'excel!Excel.TableCollection#toJSON:member(1)'
    summary: "<span data-ttu-id=\"bd69d-150\">Remplace la méthode JavaScript `toJSON()` afin de fournir une sortie plus utile lorsqu’un objet d’API est transmis à`JSON.stringify()`</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-150\">Overrides the JavaScript `toJSON()` method in order to provide more useful output when an API object is passed to `JSON.stringify()`</span></span><!-- --><span data-ttu-id=\"bd69d-151\">.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-151\"></span></span> <span data-ttu-id=\"bd69d-152\">(`JSON.stringify`</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-152\"></span></span><!-- --><span data-ttu-id=\"bd69d-153\">, à son tour, appelle `toJSON` la méthode de l’objet qui lui est passé.) Tandis que `Excel.TableCollection` l’objet d’origine est un objet `toJSON` d’API, la méthode renvoie un objet JavaScript simple (tapé comme`Excel.Interfaces.TableCollectionData`</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-153\">, in turn, calls the `toJSON` method of the object that is passed to it.) Whereas the original `Excel.TableCollection` object is an API object, the `toJSON` method returns a plain JavaScript object (typed as `Excel.Interfaces.TableCollectionData`</span></span><!-- --><span data-ttu-id=\"bd69d-154\">) qui contient un tableau «\_éléments\_» avec des copies superficielles de toutes les propriétés chargées des éléments de la collection.</span><span class=\"sxs-lookup\"><span data-stu-id=\"bd69d-154\">) that contains an \"items\" array with shallow copies of any loaded properties from the collection's items.</span></span>"
    name: toJSON()
    fullName: toJSON()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'toJSON(): Excel.Interfaces.TableCollectionData;'
      return:
        type:
          - 'excel!Excel.Interfaces.TableCollectionData:interface'
        description: ''
references:
  - uid: 'excel!OfficeExtension.ClientObject:class'
    name: OfficeExtension.ClientObject
  - uid: 'excel!Excel.Table:class'
    name: Excel.Table
  - uid: 'excel!Excel.TableCollection#add~0:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:class'
        name: Range
        fullName: Excel.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
  - uid: 'excel!Excel.TableCollection#getCount~0:complex'
    name: OfficeExtension.ClientResult<number>
    fullName: OfficeExtension.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.ClientResult:class'
        name: OfficeExtension.ClientResult
        fullName: OfficeExtension.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.TableCollection#items~0:complex'
    name: 'Excel.Table[]'
    fullName: 'Excel.Table[]'
    spec.typeScript:
      - uid: 'excel!Excel.Table:class'
        name: Excel.Table
        fullName: Excel.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'excel!Excel.TableCollection:class'
    name: Excel.TableCollection
  - uid: 'excel!Excel.TableCollection#load~0:complex'
    name: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    fullName: Excel.Interfaces.TableCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions
    spec.typeScript:
      - uid: 'excel!Excel.Interfaces.TableCollectionLoadOptions:interface'
        name: Excel.Interfaces.TableCollectionLoadOptions
        fullName: Excel.Interfaces.TableCollectionLoadOptions
      - name: ' & '
        fullName: ' & '
      - uid: 'excel!Excel.Interfaces.CollectionLoadOptions:interface'
        name: Excel.Interfaces.CollectionLoadOptions
        fullName: Excel.Interfaces.CollectionLoadOptions
  - uid: 'excel!OfficeExtension.LoadOption:interface'
    name: OfficeExtension.LoadOption
  - uid: 'excel!Excel.TableCollection#onChanged~0:complex'
    name: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
    fullName: OfficeExtension.EventHandlers<Excel.TableChangedEventArgs>
    spec.typeScript:
      - uid: 'excel!OfficeExtension.EventHandlers:class'
        name: OfficeExtension.EventHandlers
        fullName: OfficeExtension.EventHandlers
      - name: <
        fullName: <
      - uid: 'excel!Excel.TableChangedEventArgs:interface'
        name: Excel.TableChangedEventArgs
        fullName: Excel.TableChangedEventArgs
      - name: '>'
        fullName: '>'
  - uid: 'excel!Excel.Interfaces.TableCollectionData:interface'
    name: Excel.Interfaces.TableCollectionData