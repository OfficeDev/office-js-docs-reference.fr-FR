### YamlMime:TSType
name: Excel.BindingCollection
uid: excel!Excel.BindingCollection:class
package: excel!
fullName: Excel.BindingCollection
summary: >-
  Représente la collection de l’ensemble des objets de liaison qui font partie du classeur.


  \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: context
  uid: excel!Excel.BindingCollection#context:member
  package: excel!
  fullName: context
  summary: Contexte de demande associé à l’objet. Cela connecte le processus du add-in au processus de l’application hôte Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: count
  uid: excel!Excel.BindingCollection#count:member
  package: excel!
  fullName: count
  summary: >-
    Renvoie le nombre de liaisons de la collection.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly count: number;'
    return:
      type: number
- name: items
  uid: excel!Excel.BindingCollection#items:member
  package: excel!
  fullName: items
  summary: Obtient l’élément enfant chargé dans cette collection de sites.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly items: Excel.Binding[];'
    return:
      type: <xref uid="excel!Excel.Binding:class" />[]
methods:
- name: add(range, bindingType, id)
  uid: excel!Excel.BindingCollection#add:member(1)
  package: excel!
  fullName: add(range, bindingType, id)
  summary: >-
    Ajoute une nouvelle liaison à une plage spécifique.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(range: Range | string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: range
      description: Plage à laquelle lier la liaison. Il peut s’agit `Range` d’un objet ou d’une chaîne. Si c’est une chaîne, elle doit contenir l’adresse complète, y compris le nom de la feuille.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: bindingType
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: add(range, bindingTypeString, id)
  uid: excel!Excel.BindingCollection#add:member(2)
  package: excel!
  fullName: add(range, bindingTypeString, id)
  summary: >-
    Ajoute une nouvelle liaison à une plage spécifique.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(range: Range | string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: range
      description: Plage à laquelle lier la liaison. Il peut s’agit `Range` d’un objet ou d’une chaîne. Si c’est une chaîne, elle doit contenir l’adresse complète, y compris le nom de la feuille.
      type: <xref uid="excel!Excel.Range:class" /> | string
    - id: bindingTypeString
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromNamedItem(name, bindingType, id)
  uid: excel!Excel.BindingCollection#addFromNamedItem:member(1)
  package: excel!
  fullName: addFromNamedItem(name, bindingType, id)
  summary: >-
    Ajoute une nouvelle liaison basée sur un élément nommé dans le classeur. Si l’élément nommé fait référence à plusieurs zones, `InvalidReference` l’erreur est renvoyée.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromNamedItem(name: string, bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: name
      description: Nom à partir duquel créer la liaison.
      type: string
    - id: bindingType
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromNamedItem(name, bindingTypeString, id)
  uid: excel!Excel.BindingCollection#addFromNamedItem:member(2)
  package: excel!
  fullName: addFromNamedItem(name, bindingTypeString, id)
  summary: >-
    Ajoute une nouvelle liaison basée sur un élément nommé dans le classeur. Si l’élément nommé fait référence à plusieurs zones, `InvalidReference` l’erreur est renvoyée.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromNamedItem(name: string, bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: name
      description: Nom à partir duquel créer la liaison.
      type: string
    - id: bindingTypeString
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromSelection(bindingType, id)
  uid: excel!Excel.BindingCollection#addFromSelection:member(1)
  package: excel!
  fullName: addFromSelection(bindingType, id)
  summary: >-
    Ajoute une nouvelle liaison basée sur la sélection en cours. Si la sélection possède plusieurs zones, `InvalidReference` l’erreur est renvoyée.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromSelection(bindingType: Excel.BindingType, id: string): Excel.Binding;'
    parameters:
    - id: bindingType
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: <xref uid="excel!Excel.BindingType:enum" />
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: addFromSelection(bindingTypeString, id)
  uid: excel!Excel.BindingCollection#addFromSelection:member(2)
  package: excel!
  fullName: addFromSelection(bindingTypeString, id)
  summary: >-
    Ajoute une nouvelle liaison basée sur la sélection en cours. Si la sélection possède plusieurs zones, `InvalidReference` l’erreur est renvoyée.


    \[[Ensemble d’API : ExcelApi 1.3](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addFromSelection(bindingTypeString: "Range" | "Table" | "Text", id: string): Excel.Binding;'
    parameters:
    - id: bindingTypeString
      description: Type de liaison. Voir `Excel.BindingType`<!-- -->.
      type: "\"Range\" | \"Table\" | \"Text\""
    - id: id
      description: Nom de la liaison.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: getCount()
  uid: excel!Excel.BindingCollection#getCount:member(1)
  package: excel!
  fullName: getCount()
  summary: >-
    Obtient le nombre de liaisons de la collection.


    \[[Ensemble d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(): OfficeExtension.ClientResult<number>;'
    return:
      type: <xref uid="office!OfficeExtension.ClientResult:class" />&lt;number&gt;
      description: ''
- name: getItem(id)
  uid: excel!Excel.BindingCollection#getItem:member(1)
  package: excel!
  fullName: getItem(id)
  summary: >-
    Obtient un objet de liaison par ID.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(id: string): Excel.Binding;'
    parameters:
    - id: id
      description: ID de l’objet de liaison à récupérer.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Create a table binding to monitor data changes in the table. \n// When data is changed, the background color of the table will be changed to orange.\nfunction addEventHandler() {\n    // Create Table1\n    Excel.run(function (ctx) { \n        ctx.workbook.tables.add(\"Sheet1!A1:C4\", true);\n        return ctx.sync().then(function() {\n                console.log(\"My Diet Data Inserted!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n    //Create a new table binding for Table1\n    Office.context.document.bindings.addFromNamedItemAsync(\n        \"Table1\", Office.CoercionType.Table, { id: \"myBinding\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n        else {\n            // If succeeded, then add event handler to the table binding.\n            Office.select(\"bindings#myBinding\").addHandlerAsync(\n                Office.EventType.BindingDataChanged, onBindingDataChanged);\n        }\n    });\n}\n    \n// when data in the table is changed, this event will be triggered.\nfunction onBindingDataChanged(eventArgs) {\n    Excel.run(function (ctx) { \n        // highlight the table in orange to indicate data has been changed.\n        ctx.workbook.bindings.getItem(eventArgs.binding.id).getTable().getDataBodyRange().format.fill.color = \"Orange\";\n        return ctx.sync().then(function() {\n                console.log(\"The value in this table got changed!\");\n        })\n        .catch(function (error) {\n                console.log(JSON.stringify(error));\n        });\n    });\n}\n```"
- name: getItemAt(index)
  uid: excel!Excel.BindingCollection#getItemAt:member(1)
  package: excel!
  fullName: getItemAt(index)
  summary: >-
    Obtient un objet de liaison en fonction de sa position dans le tableau d’éléments.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemAt(index: number): Excel.Binding;'
    parameters:
    - id: index
      description: Valeur d’indice de l’objet à récupérer. Avec indice zéro.
      type: number
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var lastPosition = ctx.workbook.bindings.count - 1;\n    var binding = ctx.workbook.bindings.getItemAt(lastPosition);\n    binding.load('type')\n    return ctx.sync().then(function() {\n            console.log(binding.type); \n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: getItemOrNullObject(id)
  uid: excel!Excel.BindingCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(id)
  summary: >-
    Obtient un objet de liaison par ID. Si l’objet de liaison n’existe pas, cette fonction retourne un objet dont la `isNullObject` propriété est définie sur `true`<!-- -->. Pour plus d’informations, [voir *OrNullObject methods and properties](https://docs.microsoft.com/office/dev/add-ins/develop/application-specific-api-model#ornullobject-methods-and-properties)<!-- -->.


    \[[Ensemble d’API : ExcelApi 1.4](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(id: string): Excel.Binding;'
    parameters:
    - id: id
      description: ID de l’objet de liaison à récupérer.
      type: string
    return:
      type: <xref uid="excel!Excel.Binding:class" />
      description: ''
- name: load(options)
  uid: excel!Excel.BindingCollection#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.BindingCollectionLoadOptions & Excel.Interfaces.CollectionLoadOptions): Excel.BindingCollection;'
    parameters:
    - id: options
      description: Fournit des options pour lesquelles les propriétés de l’objet à charger.
      type: <xref uid="excel!Excel.Interfaces.BindingCollectionLoadOptions:interface" /> & <xref uid="excel!Excel.Interfaces.CollectionLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.BindingCollection#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.BindingCollection;'
    parameters:
    - id: propertyNames
      description: Chaîne délimitée par des virgules ou tableau de chaînes spécifiant les propriétés à charger.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('items');\n    return ctx.sync().then(function() {\n        for (var i = 0; i < bindings.items.length; i++)\n        {\n            console.log(bindings.items[i].id);\n        }\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Get the number of bindings\nExcel.run(function (ctx) { \n    var bindings = ctx.workbook.bindings;\n    bindings.load('count');\n    return ctx.sync().then(function() {\n        console.log(\"Bindings: Count= \" + bindings.count);\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.BindingCollection#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNamesAndPaths?: OfficeExtension.LoadOption): Excel.BindingCollection;'
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et est une chaîne délimitée par des virgules qui spécifie les propriétés de `propertyNamesAndPaths.expand` navigation à charger.'
      type: <xref uid="office!OfficeExtension.LoadOption:interface" />
    return:
      type: <xref uid="excel!Excel.BindingCollection:class" />
      description: ''
- name: toJSON()
  uid: excel!Excel.BindingCollection#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Remplace la méthode JavaScript afin de fournir une sortie plus utile lorsqu’un objet `toJSON()` API est transmis à `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est transmis.) Alors que `Excel.BindingCollection` l’objet d’origine est un objet API, la méthode renvoie un objet `toJSON` JavaScript simple (tapé sous la forme `Excel.Interfaces.BindingCollectionData`<!-- -->) qui contient un tableau « éléments » avec des copies peu profondes de toutes les propriétés chargées à partir des éléments de la collection.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.BindingCollectionData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.BindingCollectionData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 3932968fc0e548c64df41cdf818a111626b1bf65
  ms.sourcegitcommit: ce09743deb2fc2a879cd63f96c8ff11ec84a42b2
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 04/02/2021
  ms.locfileid: "51554010"
