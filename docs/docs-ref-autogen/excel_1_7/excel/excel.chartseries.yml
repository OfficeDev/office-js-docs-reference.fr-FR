### YamlMime:TSType
name: Excel.ChartSeries
uid: excel!Excel.ChartSeries:class
package: excel!
fullName: Excel.ChartSeries
summary: >-
  Représente une série dans un graphique.


  \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
remarks: ''
isPreview: false
isDeprecated: false
type: class
properties:
- name: chartType
  uid: excel!Excel.ChartSeries#chartType:member
  package: excel!
  fullName: chartType
  summary: >-
    Représente le type de graphique d’une série. Pour plus d’informations, voir Excel.ChartType.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'chartType: Excel.ChartType | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel";'
    return:
      type: <xref uid="excel!Excel.ChartType:enum" /> | "Invalid" | "ColumnClustered" | "ColumnStacked" | "ColumnStacked100" | "3DColumnClustered" | "3DColumnStacked" | "3DColumnStacked100" | "BarClustered" | "BarStacked" | "BarStacked100" | "3DBarClustered" | "3DBarStacked" | "3DBarStacked100" | "LineStacked" | "LineStacked100" | "LineMarkers" | "LineMarkersStacked" | "LineMarkersStacked100" | "PieOfPie" | "PieExploded" | "3DPieExploded" | "BarOfPie" | "XYScatterSmooth" | "XYScatterSmoothNoMarkers" | "XYScatterLines" | "XYScatterLinesNoMarkers" | "AreaStacked" | "AreaStacked100" | "3DAreaStacked" | "3DAreaStacked100" | "DoughnutExploded" | "RadarMarkers" | "RadarFilled" | "Surface" | "SurfaceWireframe" | "SurfaceTopView" | "SurfaceTopViewWireframe" | "Bubble" | "Bubble3DEffect" | "StockHLC" | "StockOHLC" | "StockVHLC" | "StockVOHLC" | "CylinderColClustered" | "CylinderColStacked" | "CylinderColStacked100" | "CylinderBarClustered" | "CylinderBarStacked" | "CylinderBarStacked100" | "CylinderCol" | "ConeColClustered" | "ConeColStacked" | "ConeColStacked100" | "ConeBarClustered" | "ConeBarStacked" | "ConeBarStacked100" | "ConeCol" | "PyramidColClustered" | "PyramidColStacked" | "PyramidColStacked100" | "PyramidBarClustered" | "PyramidBarStacked" | "PyramidBarStacked100" | "PyramidCol" | "3DColumn" | "Line" | "3DLine" | "3DPie" | "Pie" | "XYScatter" | "3DArea" | "Area" | "Doughnut" | "Radar" | "Histogram" | "Boxwhisker" | "Pareto" | "RegionMap" | "Treemap" | "Waterfall" | "Sunburst" | "Funnel"
- name: context
  uid: excel!Excel.ChartSeries#context:member
  package: excel!
  fullName: context
  summary: Contexte de demande associé à l’objet. Cela connecte le processus du add-in au processus de l’application hôte Office.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'context: RequestContext;'
    return:
      type: <xref uid="excel!Excel.RequestContext:class" />
- name: doughnutHoleSize
  uid: excel!Excel.ChartSeries#doughnutHoleSize:member
  package: excel!
  fullName: doughnutHoleSize
  summary: >-
    Représente la taille du centre d’une série de graphiques en anneaux. Valide uniquement dans les graphiques en anneaux et doughnutExploded. Indique une exception d’argument non valide sur les graphiques non valides.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'doughnutHoleSize: number;'
    return:
      type: number
- name: filtered
  uid: excel!Excel.ChartSeries#filtered:member
  package: excel!
  fullName: filtered
  summary: >-
    Spécifie si la série est filtrée. Non applicable pour les graphiques en surface.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'filtered: boolean;'
    return:
      type: boolean
- name: format
  uid: excel!Excel.ChartSeries#format:member
  package: excel!
  fullName: format
  summary: >-
    Représente le format d’une série de graphique, à savoir le format de remplissage et des lignes.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: Excel.ChartSeriesFormat;'
    return:
      type: <xref uid="excel!Excel.ChartSeriesFormat:class" />
- name: gapWidth
  uid: excel!Excel.ChartSeries#gapWidth:member
  package: excel!
  fullName: gapWidth
  summary: >-
    Représente la largeur de l’intervalle d’une série de graphique. Valide uniquement sur les graphiques en barres et en colonnes, ainsi que sur des classes spécifiques de graphiques en courbes et en secteurs. Indique une exception d’argument non valide sur les graphiques non valides.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'gapWidth: number;'
    return:
      type: number
- name: hasDataLabels
  uid: excel!Excel.ChartSeries#hasDataLabels:member
  package: excel!
  fullName: hasDataLabels
  summary: >-
    Spécifie si la série possède des étiquettes de données.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'hasDataLabels: boolean;'
    return:
      type: boolean
- name: markerBackgroundColor
  uid: excel!Excel.ChartSeries#markerBackgroundColor:member
  package: excel!
  fullName: markerBackgroundColor
  summary: >-
    Spécifie la couleur d’arrière-plan des marqueurs d’une série de graphiques.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'markerBackgroundColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let salesTable = sheet.tables.getItem(\"SalesTable\");\n    let dataRange = sheet.getRange(\"A1:E7\");\n\n    // Create an XY scatter chart.\n    let chart = sheet.charts.add(\"XYScatterSmooth\", dataRange, \"Auto\");\n    chart.title.text = \"Bicycle Parts Quarterly Sales\"; \n  \n    let series = chart.series;\n    let series0 = series.getItemAt(0);\n    let series1 = series.getItemAt(1);\n    let series2 = series.getItemAt(2);\n    let series3 = series.getItemAt(3);\n\n    // Set markers.\n    series0.markerStyle = \"Dash\";\n    series0.markerForegroundColor = \"black\";\n    series1.markerStyle = \"Star\";\n    series1.markerForegroundColor = \"black\";\n    series2.markerStyle = \"X\";\n    series2.markerSize = 12;\n    series3.markerStyle = \"Triangle\";\n    series3.markerBackgroundColor = \"purple\";\n\n    await context.sync();\n});\n```"
- name: markerForegroundColor
  uid: excel!Excel.ChartSeries#markerForegroundColor:member
  package: excel!
  fullName: markerForegroundColor
  summary: >-
    Spécifie la couleur de premier plan des marqueurs d’une série de graphiques.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'markerForegroundColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let salesTable = sheet.tables.getItem(\"SalesTable\");\n    let dataRange = sheet.getRange(\"A1:E7\");\n\n    // Create an XY scatter chart.\n    let chart = sheet.charts.add(\"XYScatterSmooth\", dataRange, \"Auto\");\n    chart.title.text = \"Bicycle Parts Quarterly Sales\"; \n  \n    let series = chart.series;\n    let series0 = series.getItemAt(0);\n    let series1 = series.getItemAt(1);\n    let series2 = series.getItemAt(2);\n    let series3 = series.getItemAt(3);\n\n    // Set markers.\n    series0.markerStyle = \"Dash\";\n    series0.markerForegroundColor = \"black\";\n    series1.markerStyle = \"Star\";\n    series1.markerForegroundColor = \"black\";\n    series2.markerStyle = \"X\";\n    series2.markerSize = 12;\n    series3.markerStyle = \"Triangle\";\n    series3.markerBackgroundColor = \"purple\";\n\n    await context.sync();\n});\n```"
- name: markerSize
  uid: excel!Excel.ChartSeries#markerSize:member
  package: excel!
  fullName: markerSize
  summary: >-
    Spécifie la taille de marqueur d’une série de graphiques.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'markerSize: number;'
    return:
      type: number
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let salesTable = sheet.tables.getItem(\"SalesTable\");\n    let dataRange = sheet.getRange(\"A1:E7\");\n\n    // Create an XY scatter chart.\n    let chart = sheet.charts.add(\"XYScatterSmooth\", dataRange, \"Auto\");\n    chart.title.text = \"Bicycle Parts Quarterly Sales\"; \n  \n    let series = chart.series;\n    let series0 = series.getItemAt(0);\n    let series1 = series.getItemAt(1);\n    let series2 = series.getItemAt(2);\n    let series3 = series.getItemAt(3);\n\n    // Set markers.\n    series0.markerStyle = \"Dash\";\n    series0.markerForegroundColor = \"black\";\n    series1.markerStyle = \"Star\";\n    series1.markerForegroundColor = \"black\";\n    series2.markerStyle = \"X\";\n    series2.markerSize = 12;\n    series3.markerStyle = \"Triangle\";\n    series3.markerBackgroundColor = \"purple\";\n\n    await context.sync();\n});\n```"
- name: markerStyle
  uid: excel!Excel.ChartSeries#markerStyle:member
  package: excel!
  fullName: markerStyle
  summary: >-
    Spécifie le style de marqueur d’une série de graphiques. Pour plus d’informations, voir Excel.ChartMarkerStyle.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'markerStyle: Excel.ChartMarkerStyle | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X" | "Star" | "Dot" | "Dash" | "Circle" | "Plus" | "Picture";'
    return:
      type: <xref uid="excel!Excel.ChartMarkerStyle:enum" /> | "Invalid" | "Automatic" | "None" | "Square" | "Diamond" | "Triangle" | "X" | "Star" | "Dot" | "Dash" | "Circle" | "Plus" | "Picture"
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series-markers.yaml\nawait Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let salesTable = sheet.tables.getItem(\"SalesTable\");\n    let dataRange = sheet.getRange(\"A1:E7\");\n\n    // Create an XY scatter chart.\n    let chart = sheet.charts.add(\"XYScatterSmooth\", dataRange, \"Auto\");\n    chart.title.text = \"Bicycle Parts Quarterly Sales\"; \n  \n    let series = chart.series;\n    let series0 = series.getItemAt(0);\n    let series1 = series.getItemAt(1);\n    let series2 = series.getItemAt(2);\n    let series3 = series.getItemAt(3);\n\n    // Set markers.\n    series0.markerStyle = \"Dash\";\n    series0.markerForegroundColor = \"black\";\n    series1.markerStyle = \"Star\";\n    series1.markerForegroundColor = \"black\";\n    series2.markerStyle = \"X\";\n    series2.markerSize = 12;\n    series3.markerStyle = \"Triangle\";\n    series3.markerBackgroundColor = \"purple\";\n\n    await context.sync();\n});\n```"
- name: name
  uid: excel!Excel.ChartSeries#name:member
  package: excel!
  fullName: name
  summary: >-
    Spécifie le nom d’une série dans un graphique. La longueur du nom ne doit pas être supérieure à 255 caractères.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: plotOrder
  uid: excel!Excel.ChartSeries#plotOrder:member
  package: excel!
  fullName: plotOrder
  summary: >-
    Spécifie l’ordre de traçage d’une série de graphiques dans le groupe de graphiques.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'plotOrder: number;'
    return:
      type: number
- name: points
  uid: excel!Excel.ChartSeries#points:member
  package: excel!
  fullName: points
  summary: >-
    Renvoie une collection de tous les points de la série.


    \[[Ensemble d’API : ExcelApi 1.1](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly points: Excel.ChartPointsCollection;'
    return:
      type: <xref uid="excel!Excel.ChartPointsCollection:class" />
- name: showShadow
  uid: excel!Excel.ChartSeries#showShadow:member
  package: excel!
  fullName: showShadow
  summary: >-
    Spécifie si la série possède une ombre.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showShadow: boolean;'
    return:
      type: boolean
- name: smooth
  uid: excel!Excel.ChartSeries#smooth:member
  package: excel!
  fullName: smooth
  summary: >-
    Spécifie si la série est lisse. Applicable uniquement aux graphiques en courbes et en nuages de points.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'smooth: boolean;'
    return:
      type: boolean
- name: trendlines
  uid: excel!Excel.ChartSeries#trendlines:member
  package: excel!
  fullName: trendlines
  summary: >-
    Collection des tendances de la série.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly trendlines: Excel.ChartTrendlineCollection;'
    return:
      type: <xref uid="excel!Excel.ChartTrendlineCollection:class" />
methods:
- name: delete()
  uid: excel!Excel.ChartSeries#delete:member(1)
  package: excel!
  fullName: delete()
  summary: >-
    Supprime la série graphique.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n  const seriesCollection = sheet.charts.getItemAt(0).series;\n  seriesCollection.load(\"count\");\n  await context.sync();\n\n  if (seriesCollection.count > 0) {\n    const series = seriesCollection.getItemAt(0);\n\n    // Delete the first series.\n    series.delete();\n  }\n\n  await context.sync();\n});\n```"
- name: load(options)
  uid: excel!Excel.ChartSeries#load:member(1)
  package: excel!
  fullName: load(options)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(options?: Excel.Interfaces.ChartSeriesLoadOptions): Excel.ChartSeries;'
    parameters:
    - id: options
      description: Fournit des options pour lesquelles les propriétés de l’objet à charger.
      type: <xref uid="excel!Excel.Interfaces.ChartSeriesLoadOptions:interface" />
    return:
      type: <xref uid="excel!Excel.ChartSeries:class" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.ChartSeries#load:member(2)
  package: excel!
  fullName: load(propertyNames)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): Excel.ChartSeries;'
    parameters:
    - id: propertyNames
      description: Chaîne délimitée par des virgules ou tableau de chaînes spécifiant les propriétés à charger.
      type: string | string[]
    return:
      type: <xref uid="excel!Excel.ChartSeries:class" />
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Rename the 1st series of Chart1 to \"New Series Name\"\nExcel.run(function (ctx) { \n    var chart = ctx.workbook.worksheets.getItem(\"Sheet1\").charts.getItem(\"Chart1\");    \n    chart.series.getItemAt(0).name = \"New Series Name\";\n    return ctx.sync().then(function() {\n            console.log(\"Series1 Renamed\");\n    });\n}).catch(function(error) {\n    console.log(\"Error: \" + error);\n    if (error instanceof OfficeExtension.Error) {\n        console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n    }\n});\n```"
- name: load(propertyNamesAndPaths)
  uid: excel!Excel.ChartSeries#load:member(3)
  package: excel!
  fullName: load(propertyNamesAndPaths)
  summary: Files d’attente de la commande pour charger les propriétés de l’objet spécifié. Vous devez contacter `context.sync()` avant de lire les propriétés.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      load(propertyNamesAndPaths?: {
                  select?: string;
                  expand?: string;
              }): Excel.ChartSeries;
    parameters:
    - id: propertyNamesAndPaths
      description: '`propertyNamesAndPaths.select` est une chaîne délimitée par des virgules qui spécifie les propriétés à charger, et est une chaîne délimitée par des virgules qui spécifie les propriétés de `propertyNamesAndPaths.expand` navigation à charger.'
      type: >-
        {
                    select?: string;
                    expand?: string;
                }
    return:
      type: <xref uid="excel!Excel.ChartSeries:class" />
      description: ''
- name: set(properties, options)
  uid: excel!Excel.ChartSeries#set:member(1)
  package: excel!
  fullName: set(properties, options)
  summary: Définit plusieurs propriétés d’un objet en même temps. Vous pouvez transmettre un objet simple avec les propriétés appropriées ou un autre objet API du même type.
  remarks: >-
    Cette méthode possède la signature supplémentaire suivante :


    `set(properties: Excel.ChartSeries): void`
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Interfaces.ChartSeriesUpdateData, options?: OfficeExtension.UpdateOptions): void;'
    parameters:
    - id: properties
      description: Objet JavaScript avec des propriétés structurées de manière isomorphe aux propriétés de l’objet sur lequel la méthode est appelée.
      type: <xref uid="excel!Excel.Interfaces.ChartSeriesUpdateData:interface" />
    - id: options
      description: Fournit une option pour supprimer les erreurs si l’objet propriétés tente de définir des propriétés en lecture seule.
      type: <xref uid="office!OfficeExtension.UpdateOptions:interface" />
    return:
      type: void
      description: ''
- name: set(properties)
  uid: excel!Excel.ChartSeries#set:member(2)
  package: excel!
  fullName: set(properties)
  summary: Définit plusieurs propriétés de l’objet en même temps, en fonction d’un objet chargé existant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'set(properties: Excel.ChartSeries): void;'
    parameters:
    - id: properties
      description: ''
      type: <xref uid="excel!Excel.ChartSeries:class" />
    return:
      type: void
      description: ''
- name: setBubbleSizes(sourceData)
  uid: excel!Excel.ChartSeries#setBubbleSizes:member(1)
  package: excel!
  fullName: setBubbleSizes(sourceData)
  summary: >-
    Définit les tailles des bulles pour une série de graphiques. Fonctionne uniquement pour les graphiques en bulles.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setBubbleSizes(sourceData: Range): void;'
    parameters:
    - id: sourceData
      description: Objet Range correspondant aux données source.
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-bubble-chart.yaml\nawait Excel.run(async (context) => {\n  /*\n    The table is expected to look like this:\n    Product, Inventory, Price, Current Market Share\n    Calamansi, 2000, $2.45, 10%\n    ...\n\n    We want each bubble to represent a single row.\n  */\n\n  // Get the worksheet and table data.\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n  const table = sheet.tables.getItem(\"Sales\");\n  const dataRange = table.getDataBodyRange();\n\n  // Get the table data without the row names.\n  const valueRange = dataRange.getOffsetRange(0, 1).getResizedRange(0, -1);\n\n  // Create the chart.\n  const bubbleChart = sheet.charts.add(Excel.ChartType.bubble, valueRange);\n  bubbleChart.name = \"Product Chart\";\n\n  // Remove the default series, since we want a unique series for each row.\n  bubbleChart.series.getItemAt(0).delete();\n\n  // Load the data necessary to make a chart series.\n  dataRange.load([\"rowCount\", \"values\"]);\n  await context.sync();\n\n  // For each row, create a chart series (a bubble).\n  for (let i = 0; i < dataRange.rowCount; i++) {\n    const newSeries = bubbleChart.series.add(dataRange.values[i][0], i);\n    newSeries.setXAxisValues(dataRange.getCell(i, 1));\n    newSeries.setValues(dataRange.getCell(i, 2));\n    newSeries.setBubbleSizes(dataRange.getCell(i, 3));\n\n    // Show the product name and market share percentage.\n    newSeries.dataLabels.showSeriesName = true;\n    newSeries.dataLabels.showBubbleSize = true;\n    newSeries.dataLabels.showValue = false;\n  }\n\n  await context.sync();\n});\n```"
- name: setValues(sourceData)
  uid: excel!Excel.ChartSeries#setValues:member(1)
  package: excel!
  fullName: setValues(sourceData)
  summary: >-
    Définit les valeurs d’une série de graphiques. Pour un graphique en nuages de points, cela signifie des valeurs de l’axe Y.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setValues(sourceData: Range): void;'
    parameters:
    - id: sourceData
      description: Objet Range correspondant aux données source.
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```typescript\n// Link to full sample: https://raw.githubusercontent.com/OfficeDev/office-js-snippets/prod/samples/excel/10-chart/chart-series.yaml\nawait Excel.run(async (context) => {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n  let seriesCollection = sheet.charts.getItemAt(0);\n  let rangeSelection = sheet.getRange(\"C2:C7\");\n  let xRangeSelection = sheet.getRange(\"A1:A7\");\n\n  // Add a series.\n  let newSeries = seriesCollection.series.add(\"Qtr2\");\n  newSeries.setValues(rangeSelection);\n  newSeries.setXAxisValues(xRangeSelection);\n\n  await context.sync();\n});\n```"
- name: setXAxisValues(sourceData)
  uid: excel!Excel.ChartSeries#setXAxisValues:member(1)
  package: excel!
  fullName: setXAxisValues(sourceData)
  summary: >-
    Définit les valeurs de l’axe X d’une série de graphiques. Fonctionne uniquement pour les graphiques en nuages de points.


    \[[Ensemble d’API : ExcelApi 1.7](/office/dev/add-ins/reference/requirement-sets/excel-api-requirement-sets)\]
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setXAxisValues(sourceData: Range): void;'
    parameters:
    - id: sourceData
      description: Objet Range correspondant aux données source.
      type: <xref uid="excel!Excel.Range:class" />
    return:
      type: void
      description: ''
- name: toJSON()
  uid: excel!Excel.ChartSeries#toJSON:member(1)
  package: excel!
  fullName: toJSON()
  summary: Remplace la méthode JavaScript afin de fournir une sortie plus utile lorsqu’un objet `toJSON()` API est transmis à `JSON.stringify()`<!-- -->. (`JSON.stringify`<!-- -->, à son tour, appelle `toJSON` la méthode de l’objet qui lui est transmis.) Alors que l’objet Excel.ChartSeries d’origine est un objet API, la méthode renvoie un objet `toJSON` JavaScript simple (tapé sous la forme `Excel.Interfaces.ChartSeriesData`<!-- -->) qui contient des copies superficiels de toutes les propriétés enfants chargées à partir de l’objet d’origine.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'toJSON(): Excel.Interfaces.ChartSeriesData;'
    return:
      type: <xref uid="excel!Excel.Interfaces.ChartSeriesData:interface" />
      description: ''
extends: <xref uid="office!OfficeExtension.ClientObject:class" />
metadata:
  ms.openlocfilehash: 1a5aea8b5a20d9e4c3389e47f324b5a9aafe8ef4
  ms.sourcegitcommit: d14ccd5d21286fdad1d3451f3ac745c603d9400d
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 01/13/2021
  ms.locfileid: "49861538"
