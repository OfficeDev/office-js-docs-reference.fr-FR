### YamlMime:UniversalReference
ms.openlocfilehash: 5f2515572a153917a287b2c7d7b09f20bda41aaa
ms.sourcegitcommit: 2dcedf6deec4167dca476a42dad411e28cc92a97
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 01/23/2019
ms.locfileid: "29384684"
items:
- uid: word.Word.SearchOptions
  summary: >-
    Spécifie les options à inclure dans une opération de recherche.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: Word.SearchOptions
  fullName: Word.SearchOptions
  langs:
  - typeScript
  type: class
  extends:
  - office.OfficeExtension.ClientObject
  package: word
  children:
  - word.Word.SearchOptions.context
  - word.Word.SearchOptions.ignorePunct
  - word.Word.SearchOptions.ignoreSpace
  - word.Word.SearchOptions.load
  - word.Word.SearchOptions.matchCase
  - word.Word.SearchOptions.matchPrefix
  - word.Word.SearchOptions.matchSuffix
  - word.Word.SearchOptions.matchWholeWord
  - word.Word.SearchOptions.matchWildcards
  - word.Word.SearchOptions.matchWildCards
  - word.Word.SearchOptions.newObject
  - word.Word.SearchOptions.toJSON
- uid: word.Word.SearchOptions.context
  summary: Contexte de la requête associé à l’objet. Il connecte processus du complément au processus de l’application hôte Office.
  name: context
  fullName: context
  langs:
  - typeScript
  type: property
  syntax:
    content: 'context: RequestContext;'
    return:
      type:
      - RequestContext
- uid: word.Word.SearchOptions.ignorePunct
  summary: >-
    Obtient ou définit une valeur indiquant si toutes les marques de ponctuation entre les mots doivent être ignorées. Correspond à la case à cocher Ignorer les marques de ponctuation de la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: ignorePunct
  fullName: ignorePunct
  langs:
  - typeScript
  type: property
  syntax:
    content: 'ignorePunct: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.ignoreSpace
  summary: >-
    Obtient ou définit une valeur qui indique s’il faut ignorer tous les espaces entre les mots. Correspond à la case à cocher Ignorer les espaces dans la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: ignoreSpace
  fullName: ignoreSpace
  langs:
  - typeScript
  type: property
  syntax:
    content: 'ignoreSpace: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.load
  summary: Files d’attente d’une commande pour charger les propriétés de l’objet spécifiées. Vous devez appeler « context.sync() » avant de lire les propriétés.
  remarks: "Outre cette signature, cette méthode présente les signatures suivantes :\n\n`load(option?: { select?: string; expand?: string; }): Word.SearchOptions`-Où option.select est une chaîne délimitée par des virgules qui spécifie les propriétés à charger et options.expand est une chaîne délimitée par des virgules qui spécifie les propriétés de navigation à charger.\n\n`load(option?: { select?: string; expand?: string; top?: number; skip?: number }): Word.SearchOptions`-Uniquement disponible sur les types de la collection. Il est similaire à la signature précédente. Option.Top Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection. Option.Skip Spécifie le nombre d’éléments qui doivent être ignoré et non inclus dans le résultat. Si option.top est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Ignore punctuation search\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document and ignore punctuation.\n    var searchResults = context.document.body.search('video you', {ignorePunct: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search based on a prefix\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document based on a prefix.\n    var searchResults = context.document.body.search('vid', {matchPrefix: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = '#FFFF00'; //Yellow\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search based on a suffix\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Queue a command to search the document for any string of characters after 'ly'.\n    var searchResults = context.document.body.search('ly', {matchSuffix: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'orange';\n            searchResults.items[i].font.highlightColor = 'black';\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```\n```javascript\n// Search using a wildcard\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n    \n    // Queue a command to search the document with a wildcard\n    // for any string of characters that starts with 'to' and ends with 'n'.\n    var searchResults = context.document.body.search('to*n', {matchWildCards: true});\n\n    // Queue a command to load the search results and get the font property values.\n    context.load(searchResults, 'font');\n    \n    // Synchronize the document state by executing the queued commands, \n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        console.log('Found count: ' + searchResults.items.length);\n\n        // Queue a set of commands to change the font for each found item.\n        for (var i = 0; i < searchResults.items.length; i++) {\n            searchResults.items[i].font.color = 'purple';\n            searchResults.items[i].font.highlightColor = 'pink';\n            searchResults.items[i].font.bold = true;\n        }\n        \n        // Synchronize the document state by executing the queued commands, \n        // and return a promise to indicate task completion.\n        return context.sync();\n    });  \n})\n.catch(function (error) {\n    console.log('Error: ' + JSON.stringify(error));\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Debug info: ' + JSON.stringify(error.debugInfo));\n    }\n});\n```"
  name: load(option)
  fullName: load
  langs:
  - typeScript
  type: method
  syntax:
    content: 'load(option?: string | string[]): Word.SearchOptions;'
    return:
      type:
      - word.Word.SearchOptions
      description: ''
    parameters:
    - id: option
      description: Une chaîne délimitée par des virgules ou un tableau de chaînes qui spécifient les propriétés à charger.
      type:
      - string | string[]
- uid: word.Word.SearchOptions.matchCase
  summary: >-
    Obtient ou définit une valeur qui indique s’il faut effectuer une recherche respectant la casse. Correspond à la case à cocher Respecter la casse dans la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchCase
  fullName: matchCase
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchCase: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchPrefix
  summary: >-
    Obtient ou définit une valeur indiquant si la recherche doit porter sur les mots qui commencent par la chaîne entrée. Correspond à la case à cocher Préfixe de la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchPrefix
  fullName: matchPrefix
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchPrefix: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchSuffix
  summary: >-
    Obtient ou définit une valeur indiquant si la recherche doit porter sur les mots qui se terminent par la chaîne entrée. Correspond à la case à cocher Suffixe de la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchSuffix
  fullName: matchSuffix
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchSuffix: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWholeWord
  summary: >-
    Obtient ou définit une valeur indiquant si la recherche doit uniquement porter sur des mots entiers et exclure le texte s’il est inclus dans un mot plus long. Correspond à la case à cocher Mot entier de la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchWholeWord
  fullName: matchWholeWord
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWholeWord: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWildcards
  summary: >-
    Obtient ou définit une valeur indiquant si la recherche est effectuée à l’aide d’opérateurs de recherche spéciaux. Correspond à la case Caractères génériques de la boîte de dialogue Rechercher et remplacer.


    \[[Du jeu d’API : WordApi 1.1](/office/dev/add-ins/reference/requirement-sets/word-api-requirement-sets)\]
  name: matchWildcards
  fullName: matchWildcards
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWildcards: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.matchWildCards
  name: matchWildCards
  fullName: matchWildCards
  langs:
  - typeScript
  type: property
  syntax:
    content: 'matchWildCards: boolean;'
    return:
      type:
      - boolean
- uid: word.Word.SearchOptions.newObject
  summary: Créer une nouvelle instance de l’objet Word.SearchOptions
  name: newObject(context)
  fullName: newObject
  langs:
  - typeScript
  type: method
  syntax:
    content: 'static newObject(context: OfficeExtension.ClientRequestContext): Word.SearchOptions;'
    return:
      type:
      - word.Word.SearchOptions
      description: ''
    parameters:
    - id: context
      description: ''
      type:
      - office.OfficeExtension.ClientRequestContext
- uid: word.Word.SearchOptions.toJSON
  name: toJSON()
  fullName: toJSON
  langs:
  - typeScript
  type: method
  syntax:
    content: 'toJSON(): Word.Interfaces.SearchOptionsData;'
    return:
      type:
      - word.Word.Interfaces.SearchOptionsData
      description: ''
