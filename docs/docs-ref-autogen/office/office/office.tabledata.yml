### YamlMime:UniversalReference
items:
  - uid: office.Office.TableData
    summary: 'Représente les données d’une table ou d’un [Office. TableBinding](xref:office.Office.TableBinding)<!-- -->.'
    name: Office.TableData
    fullName: Office.TableData
    langs:
      - typeScript
    type: class
    package: office
    children:
      - office.Office.TableData.(constructor)
      - office.Office.TableData.(constructor)_1
      - office.Office.TableData.headers
      - office.Office.TableData.rows
  - uid: office.Office.TableData.(constructor)
    summary: Construit une nouvelle instance de la `TableData` classe.
    name: '(constructor)(rows, headers)'
    fullName: '(constructor)(rows, headers)'
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(rows: any[][], headers: any[]);'
      parameters:
        - id: rows
          description: ''
          type:
            - 'any[][]'
        - id: headers
          description: ''
          type:
            - 'any[]'
  - uid: office.Office.TableData.(constructor)_1
    summary: Construit une nouvelle instance de la `TableData` classe.
    name: (constructor)()
    fullName: (constructor)()
    langs:
      - typeScript
    type: constructor
    syntax:
      content: constructor();
  - uid: office.Office.TableData.headers
    summary: Obtient ou définit les en-têtes du tableau.
    remarks: |-
      Pour spécifier des en-têtes, vous devez spécifier un tableau de tableaux qui correspond à la structure du tableau. Par exemple, pour spécifier des en-têtes pour une table à deux colonnes, vous devez définir la \[ \[propriété d’en-tête sur «\]\]Header1», «header2».

      Si vous spécifiez la valeur null pour la propriété headers (ou si vous laissez la propriété vide quand vous construisez un objet TableData), les résultats suivants se produisent lors de l’exécution de votre code:

      - Si vous insérez un nouveau tableau, les en-têtes de colonnes par défaut du tableau sont créés.

      - Si vous remplacez ou mettez à jour un tableau existant, les en-têtes existants ne sont pas modifiés.

      #### <a name="examples"></a>Exemples

      ```javascript
      // The following example creates a single-column table with a header and three rows.
      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }
      ```
    name: headers
    fullName: headers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'headers: any[];'
      return:
        type:
          - 'any[]'
  - uid: office.Office.TableData.rows
    summary: Obtient ou définit les lignes dans le tableau. Renvoie un tableau de tableaux qui contient les données du tableau. Renvoie un tableau vide s’il n’y a pas de ligne.
    remarks: |-
      Pour spécifier des lignes, vous devez spécifier un tableau de tableaux qui correspond à la structure du tableau. Par exemple, pour spécifier deux lignes de valeurs de chaîne dans une table à deux colonnes, vous devez définir la propriété \[ \[Rows sur «a», «\]b \[», «c»,\]\]«d».

      Si vous spécifiez la valeur null pour la propriété Rows (ou si vous laissez la propriété vide quand vous construisez un objet TableData), les résultats suivants se produisent lors de l’exécution de votre code:

      - Si vous insérez un nouveau tableau, une ligne vide est insérée.

      - Si vous remplacez ou mettez à jour un tableau existant, les lignes existantes ne sont pas modifiées.

      #### <a name="examples"></a>範例

      ```javascript
      // The following example creates a single-column table with a header and three rows.
      function createTableData() {
          var tableData = new Office.TableData();
          tableData.headers = [['header1']];
          tableData.rows = [['row1'], ['row2'], ['row3']];
          return tableData;
      }
      ```
    name: rows
    fullName: rows
    langs:
      - typeScript
    type: property
    syntax:
      content: 'rows: any[][];'
      return:
        type:
          - 'any[][]'