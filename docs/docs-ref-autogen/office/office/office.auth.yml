### YamlMime:UniversalReference
items:
  - uid: 'office!Office.Auth:interface'
    summary: "Espace de noms d’authentification Office, `Office.context.auth`<!-- -->, fournit une méthode qui permet à l’application cliente Office d’obtenir un jeton d’accès à l’application Web du complément. Indirectement, ceci active également le complément pour accéder aux données de Microsoft\_Graph de l’utilisateur sans que l’utilisateur ne doive se connecter une deuxième fois."
    name: Office.Auth
    fullName: Office.Auth
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.Auth#getAccessToken:member(1)'
      - 'office!Office.Auth#getAccessTokenAsync:member(1)'
      - 'office!Office.Auth#getAccessTokenAsync:member(2)'
  - uid: 'office!Office.Auth#getAccessToken:member(1)'
    summary: "Appelle le point de terminaison Azure Active Directory V\_2.0 pour obtenir un jeton d’accès à l’application web de votre complément. Permet à des compléments d’identifier les utilisateurs. Le code côté serveur peut utiliser ce jeton pour accéder à Microsoft Graph pour l’application Web du complément à l’aide du [flux OAuth «\_de la part de\_»](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!-- -->. Cette API nécessite une configuration à authentification unique qui relie le complément à une application Azure. Les utilisateurs d’Office se connectent avec des comptes d’organisation et des comptes Microsoft. Microsoft Azure renvoie des jetons destinés aux deux types de comptes utilisateur afin d’accéder aux ressources dans Microsoft Graph."
    remarks: |-
      **Hôtes**: Excel, OneNote, Outlook, PowerPoint, Word

      **Important**: dans Outlook, cette API n’est pas prise en charge si le complément est chargé dans une boîte aux lettres Outlook.com ou gmail.

      **Ensemble de conditions requises**: [ensembles](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)
    name: getAccessToken(options)
    fullName: getAccessToken(options)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAccessToken(options?: AuthOptions): Promise<string>;'
      return:
        type:
          - 'office!Office.Auth#getAccessToken~0:complex'
        description: Promesse du jeton d’accès.
      parameters:
        - id: options
          description: Facultatif. Accepte un `AuthOptions` objet pour définir les comportements de connexion.
          type:
            - 'office!Office.AuthOptions:interface'
  - uid: 'office!Office.Auth#getAccessTokenAsync:member(1)'
    summary: "Appelle le point de terminaison Azure Active Directory V\_2.0 pour obtenir un jeton d’accès à l’application web de votre complément. Permet à des compléments d’identifier les utilisateurs. Le code côté serveur peut utiliser ce jeton pour accéder à Microsoft Graph pour l’application Web du complément à l’aide du [flux OAuth «\_de la part de\_»](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!-- -->."
    remarks: |-
      **Hôtes**: Excel, OneNote, Outlook, PowerPoint, Word

      **Ensemble de conditions requises**: [ensembles](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)

      Cette API nécessite une configuration à authentification unique qui relie le complément à une application Azure. Les utilisateurs d’Office se connectent avec des comptes d’organisation et des comptes Microsoft. Microsoft Azure renvoie des jetons destinés aux deux types de comptes utilisateur afin d’accéder aux ressources dans Microsoft Graph.

      #### <a name="examples"></a>Exemples

      ```javascript
      Office.context.auth.getAccessTokenAsync(function(result) {
          if (result.status === "succeeded") {
              var token = result.value;
              // ...
          } else {
              console.log("Error obtaining token", result.error);
          }
      });
      ```
    deprecated:
      content: |-
        Use Office.auth.getAccessToken instead.

        \*\*Important\*\*: In Outlook, this API is not supported if the add-in is loaded in an Outlook.com or Gmail mailbox.
    name: 'getAccessTokenAsync(options, callback)'
    fullName: 'getAccessTokenAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAccessTokenAsync(options?: AuthOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Facultatif. Accepte un `AuthOptions` objet pour définir les comportements de connexion.
          type:
            - 'office!Office.AuthOptions:interface'
        - id: callback
          description: "Facultatif. Accepte une méthode de rappel qui peut analyser le jeton pour l’ID de l’utilisateur ou utilisez le jeton dans le flux de «\_de la part de\_» pour accéder à Microsoft Graph. Si `AsyncResult.status` le est «\_réussi\_», alors `AsyncResult.value` est le AAD brut v. 2.0: le jeton d’accès mis en forme."
          type:
            - 'office!Office.Auth#getAccessTokenAsync~0:complex'
  - uid: 'office!Office.Auth#getAccessTokenAsync:member(2)'
    summary: "Appelle le point de terminaison Azure Active Directory V\_2.0 pour obtenir un jeton d’accès à l’application web de votre complément. Permet à des compléments d’identifier les utilisateurs. Le code côté serveur peut utiliser ce jeton pour accéder à Microsoft Graph pour l’application Web du complément à l’aide du [flux OAuth «\_de la part de\_»](https://docs.microsoft.com/azure/active-directory/develop/active-directory-v2-protocols-oauth-on-behalf-of)<!-- -->."
    remarks: |-
      **Hôtes**: Excel, OneNote, Outlook, PowerPoint, Word

      **Ensemble de conditions requises**: [ensembles](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/identity-api-requirement-sets)

      Cette API nécessite une configuration à authentification unique qui relie le complément à une application Azure. Les utilisateurs d’Office se connectent avec des comptes d’organisation et des comptes Microsoft. Microsoft Azure renvoie des jetons destinés aux deux types de comptes utilisateur afin d’accéder aux ressources dans Microsoft Graph.
    deprecated:
      content: |-
        Use `Office.auth.getAccessToken` instead.

        \*\*Important\*\*: In Outlook, this API is not supported if the add-in is loaded in an Outlook.com or Gmail mailbox.
    name: getAccessTokenAsync(callback)
    fullName: getAccessTokenAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAccessTokenAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: "Facultatif. Accepte une méthode de rappel qui peut analyser le jeton pour l’ID de l’utilisateur ou utilisez le jeton dans le flux de «\_de la part de\_» pour accéder à Microsoft Graph. Si `AsyncResult.status` le est «\_réussi\_», alors `AsyncResult.value` est le AAD brut v. 2.0: le jeton d’accès mis en forme."
          type:
            - 'office!Office.Auth#getAccessTokenAsync~1:complex'
references:
  - uid: 'office!Office.Auth#getAccessToken~0:complex'
    name: Promise<string>
    fullName: Promise<string>
    spec.typeScript:
      - uid: '!Promise:interface'
        name: Promise
        fullName: Promise
      - name: <string>
        fullName: <string>
  - uid: 'office!Office.AuthOptions:interface'
    name: AuthOptions
  - uid: 'office!Office.Auth#getAccessTokenAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.Auth#getAccessTokenAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void