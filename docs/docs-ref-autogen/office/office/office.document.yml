### YamlMime:TSType
name: Office.Document
uid: office!Office.Document:interface
package: office!
fullName: Office.Document
summary: Une classe abstraite qui représente le document avec lequel interagit le complément.
remarks: '**Hôtes**: Excel, PowerPoint, Project, Word'
isPreview: false
isDeprecated: false
type: interface
properties:
- name: bindings
  uid: office!Office.Document#bindings:member
  package: office!
  fullName: bindings
  summary: Obtient un objet qui fournit l’accès aux liaisons définies dans le document.
  remarks: "Vous n’instanciez pas l’objet document directement dans votre script. Pour appeler des membres de l’objet Document afin d’interagir avec le document actif ou la feuille de calcul active, utilisez `Office.context.document` dans votre script.\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\nfunction displayAllBindings() {\n    Office.context.document.bindings.getAllAsync(function (asyncResult) {\n        var bindingString = '';\n        for (var i in asyncResult.value) {\n            bindingString += asyncResult.value[i].id + '\\n';\n        }\n        write('Existing bindings: ' + bindingString);\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'bindings: Bindings;'
    return:
      type: <xref uid="office!Office.Bindings:interface" />
- name: customXmlParts
  uid: office!Office.Document#customXmlParts:member
  package: office!
  fullName: customXmlParts
  summary: Obtient un objet qui représente les parties XML personnalisées contenues dans le document.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'customXmlParts: CustomXmlParts;'
    return:
      type: <xref uid="office!Office.CustomXmlParts:interface" />
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\nfunction getCustomXmlParts(){\n    Office.context.document.customXmlParts.getByNamespaceAsync('http://tempuri.org', function (asyncResult) {\n        write('Retrieved ' + asyncResult.value.length + ' custom XML parts');\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
- name: mode
  uid: office!Office.Document#mode:member
  package: office!
  fullName: mode
  summary: Obtient le mode dans lequel se trouve le document.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'mode: DocumentMode;'
    return:
      type: <xref uid="office!Office.DocumentMode:enum" />
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\nfunction displayDocumentMode() {\n    write(Office.context.document.mode);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following example initializes the add-in and then gets properties of the\n// Document object that are available in the context of a Project document.\n// A Project document is the opened, active project. To access members of the\n// ProjectDocument object, use the Office.context.document object as shown in\n// the code examples for ProjectDocument methods and events.\n// The example assumes your add-in has a reference to the jQuery library and\n// that the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information about the document.\n            showDocumentProperties();\n        });\n    };\n\n    // Get the document mode and the URL of the active project.\n    function showDocumentProperties() {\n        var output = String.format(\n            'The document mode is {0}.<br/>The URL of the active project is {1}.',\n            Office.context.document.mode,\n            Office.context.document.url);\n        $('#message').html(output);\n    }\n})();\n```"
- name: settings
  uid: office!Office.Document#settings:member
  package: office!
  fullName: settings
  summary: Obtient un objet qui représente les paramètres personnalisés enregistrés du complément de contenu ou de volet des tâches pour le document actif.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'settings: Settings;'
    return:
      type: <xref uid="office!Office.Settings:interface" />
- name: url
  uid: office!Office.Document#url:member
  package: office!
  fullName: url
  summary: Obtient l’URL du document actuellement ouvert dans l’application hôte. Renvoie la valeur null si l’URL n’est pas disponible.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'url: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\nfunction displayDocumentUrl() {\n    write(Office.context.document.url);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
methods:
- name: addHandlerAsync(eventType, handler, options, callback)
  uid: office!Office.Document#addHandlerAsync:member(1)
  package: office!
  fullName: addHandlerAsync(eventType, handler, options, callback)
  summary: Ajoute un gestionnaire d’événements pour un événement d’objet document.
  remarks: >-
    **Ensemble de conditions requises**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    Vous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Pour un événement d’objet document, le paramètre eventType peut être spécifié en tant que `Office.EventType.Document.SelectionChanged` ou `Office.EventType.Document.ActiveViewChanged`<!-- -->ou la valeur de texte correspondante de cette énumération.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Obligatoire.
      type: any
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: addHandlerAsync(eventType, handler, callback)
  uid: office!Office.Document#addHandlerAsync:member(2)
  package: office!
  fullName: addHandlerAsync(eventType, handler, callback)
  summary: Ajoute un gestionnaire d’événements pour un événement d’objet document.
  remarks: "**Ensemble de conditions requises**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)\n\nVous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following example adds an event handler for the SelectionChanged event of a document\nfunction addSelectionChangedEventHandler() {\n    Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged, MyHandler);\n}\n\nfunction MyHandler(eventArgs) {\n    write('Event raised: ' + eventArgs.type);\n    doSomethingWithDocument(eventArgs.document);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example adds a handler for the ResourceSelectionChanged event.\n// When the resource selection changes in the document, it gets the GUID of the selected resource.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ResourceSelectionChanged,\n                getResourceGuid);\n        });\n    };\n\n    // Get the GUID of the selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ResourceSelectionChanged\n// event handler in a Project add-in, see \"Create your first task pane add-in\n// for Project 2013 by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example adds a handler for the TaskSelectionChanged event.\n// When the task selection changes in the document, it gets the GUID of the\n// selected task.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.TaskSelectionChanged,\n                getTaskGuid);\n            getTaskGuid();\n        });\n    };\n\n    // Get the GUID of the selected task and display it in the add-in.\n    function getTaskGuid() {\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html(result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```\n```javascript\n// The following code example adds a handler for the ViewSelectionChanged\n// event. When the active view changes, it gets the name and type of the active view.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the name and type of the active view and display it in the add-in.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, result.value.viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For an example that shows how to use a ViewSelectionChanged event handler in a\n// Project add-in, see \"Create your first task pane add-in for Project 2013 by\n// using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```\n```javascript\n// The following code example uses addHandlerAsync to add an event handler for the ViewSelectionChanged event.\n// When the active view changes, the handler checks the view type. It enables a button if the view is a resource\n// view and disables the button if it isn't a resource view. Choosing the button gets the GUID of the selected\n// resource and displays it in the add-in.\n// The example assumes that your add-in has a reference to the jQuery library and that the following page controls\n// are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" disabled=\"disabled\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            // Add a ViewSelectionChanged event handler.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            $('#get-info').click(getResourceGuid);\n\n            // This example calls the handler on page load to get the active view\n            // of the default page.\n            getActiveView();\n        });\n    };\n\n    // Activate the button based on the active view type of the document.\n    // This is the ViewSelectionChanged event handler.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var viewType = result.value.viewType;\n                    if (viewType == 6 ||   // ResourceForm\n                        viewType == 7 ||   // ResourceSheet\n                        viewType == 8 ||   // ResourceGraph\n                        viewType == 15) {  // ResourceUsage\n                        $('#get-info').removeAttr('disabled');\n                    }\n                    else {\n                        $('#get-info').attr('disabled', 'disabled');\n                    }\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    // Get the GUID of the currently selected resource and display it in the add-in.\n    function getResourceGuid() {\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    $('#message').html('Resource GUID: ' + result.value);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n\n// For a complete code sample that shows how to use a ViewSelectionChanged event handler in a Project add-in,\n// see \"Create your first task pane add-in for Project by using a text editor.\"\n// https://docs.microsoft.com/office/dev/add-ins/project/create-your-first-task-pane-add-in-for-project-by-using-a-text-editor\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Pour un événement d’objet document, le paramètre eventType peut être spécifié en tant que `Office.EventType.Document.SelectionChanged` ou `Office.EventType.Document.ActiveViewChanged`<!-- -->ou la valeur de texte correspondante de cette énumération.
      type: <xref uid="office!Office.EventType:enum" />
    - id: handler
      description: Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office.DocumentSelectionChangedEventArgs](xref:office!Office.DocumentSelectionChangedEventArgs:interface)<!-- -->. Obligatoire.
      type: any
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(options, callback)
  uid: office!Office.Document#getActiveViewAsync:member(1)
  package: office!
  fullName: getActiveViewAsync(options, callback)
  summary: Renvoie l’état de l’affichage actuel de la présentation (modification ou lecture).
  remarks: >-
    **Ensemble de conditions requises**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Peut déclencher un événement lorsque l’affichage change.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’état de la vue active de la présentation. La valeur renvoyée peut être « Edit » ou « Read ». « modifier » correspond à n’importe quel mode dans lequel vous pouvez modifier des diapositives, telles que normal ou mode plan. « lecture » correspond à un mode de diaporama ou de lecture.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getActiveViewAsync(callback)
  uid: office!Office.Document#getActiveViewAsync:member(2)
  package: office!
  fullName: getActiveViewAsync(callback)
  summary: Renvoie l’état de l’affichage actuel de la présentation (modification ou lecture).
  remarks: >-
    **Ensemble de conditions requises**: [ActiveView](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#activeview)


    Peut déclencher un événement lorsque l’affichage change.


    #### <a name="examples"></a>範例


    ```javascript

    function getFileView() {
        // Get whether the current view is edit or read.
        Office.context.document.getActiveViewAsync(function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage(asyncResult.value);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveViewAsync(callback?: (result: AsyncResult<"edit" | "read">) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’état de la vue active de la présentation. La valeur renvoyée peut être « Edit » ou « Read ». « modifier » correspond à n’importe quel mode dans lequel vous pouvez modifier des diapositives, telles que normal ou mode plan. « lecture » correspond à un mode de diaporama ou de lecture.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;"edit" | "read"&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, options, callback)
  uid: office!Office.Document#getFileAsync:member(1)
  package: office!
  fullName: getFileAsync(fileType, options, callback)
  summary: 'Renvoie l’intégralité du fichier de document sous forme de sections pouvant aller jusqu’à 4 194 304 octets (4 Mo). Pour les compléments sur iPad, la section de fichier est prise en charge jusqu’à 65536 (64 Ko). Remarque : la spécification de la taille de section de fichier au-dessus de la limite autorisée entraîne une erreur interne.'
  remarks: "**Ensembles de conditions requises**:\n\n- [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (lors de l’utilisation de `Office.FileType.Compressed`<!-- -->)\n\n- [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)\n\n- [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (lors de l’utilisation de `Office.FileType.Text`<!-- -->)\n\nPour les compléments s’exécutant dans les applications hôtes Office autres qu’Office sur iPad, la `getFileAsync` méthode prend en charge l’obtention de fichiers dans des sections allant jusqu’à 4194304 octets (4 Mo). Pour les compléments s’exécutant dans les applications Office sur iPad, la `getFileAsync` méthode prend en charge l’obtention de fichiers dans des sections allant jusqu’à 65536 (64 Ko).\n\nLe `fileType` paramètre peut être spécifié à l’aide de l’énumération [Office. filetype](xref:office!Office.FileType:enum) ou de valeurs de texte. Toutefois, les valeurs possibles varient en fonction de l’hôte :\n\n*FileTypes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Windows </th><th> Office sur le web </th><th> Office sur iPad </th><th> Office sur Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> Présentations </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Automatique </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following example gets the document in Office Open XML (\"compressed\") format in 65536 bytes (64 KB) slices.\n// Note: The implementation of app.showNotification in this example is from the Visual Studio template for Office Add-ins.\nfunction getDocumentAsCompressed() {\n    Office.context.document.getFileAsync(Office.FileType.Compressed, { sliceSize: 65536 /*64 KB*/ }, \n        function (result) {\n            if (result.status == \"succeeded\") {\n                // If the getFileAsync call succeeded, then\n                // result.value will return a valid File Object.\n                var myFile = result.value;\n                var sliceCount = myFile.sliceCount;\n                var slicesReceived = 0, gotAllSlices = true, docdataSlices = [];\n                app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n\n                // Get the file slices.\n                getSliceAsync(myFile, 0, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n            else {\n                app.showNotification(\"Error:\", result.error.message);\n            }\n    });\n}\n\nfunction getSliceAsync(file, nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived) {\n    file.getSliceAsync(nextSlice, function (sliceResult) {\n        if (sliceResult.status == \"succeeded\") {\n            if (!gotAllSlices) { // Failed to get all slices, no need to continue.\n                return;\n            }\n\n            // Got one slice, store it in a temporary array.\n            // (Or you can do something else, such as\n            // send it to a third-party server.)\n            docdataSlices[sliceResult.value.index] = sliceResult.value.data;\n            if (++slicesReceived == sliceCount) {\n              // All slices have been received.\n              file.closeAsync();\n              onGotAllSlices(docdataSlices);\n            }\n            else {\n                getSliceAsync(file, ++nextSlice, sliceCount, gotAllSlices, docdataSlices, slicesReceived);\n            }\n        }\n            else {\n                gotAllSlices = false;\n                file.closeAsync();\n                app.showNotification(\"getSliceAsync Error:\", sliceResult.error.message);\n            }\n    });\n}\n\nfunction onGotAllSlices(docdataSlices) {\n    var docdata = [];\n    for (var i = 0; i < docdataSlices.length; i++) {\n        docdata = docdata.concat(docdataSlices[i]);\n    }\n\n    var fileContent = new String();\n    for (var j = 0; j < docdata.length; j++) {\n        fileContent += String.fromCharCode(docdata[j]);\n    }\n\n    // Now all the file content is stored in 'fileContent' variable,\n    // you can do something with it, such as print, fax...\n}\n\n// The following example gets the document in PDF format.\nOffice.context.document.getFileAsync(Office.FileType.Pdf,\n    function(result) {\n        if (result.status == \"succeeded\") {\n            var myFile = result.value;\n            var sliceCount = myFile.sliceCount;\n            app.showNotification(\"File size:\" + myFile.size + \" #Slices: \" + sliceCount);\n            // Now, you can call getSliceAsync to download the files,\n            // as described in the previous code segment (compressed format).\n            \n            myFile.closeAsync();\n        }\n        else {\n            app.showNotification(\"Error:\", result.error.message);\n        }\n}\n);\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, options?: GetFileOptions, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Format dans lequel le fichier sera renvoyé.
      type: <xref uid="office!Office.FileType:enum" />
    - id: options
      description: Fournit des options pour définir la taille des secteurs dans lesquels le document sera divisé.
      type: <xref uid="office!Office.GetFileOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’objet file.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFileAsync(fileType, callback)
  uid: office!Office.Document#getFileAsync:member(2)
  package: office!
  fullName: getFileAsync(fileType, callback)
  summary: 'Renvoie l’intégralité du fichier de document sous forme de sections pouvant aller jusqu’à 4 194 304 octets (4 Mo). Pour les compléments sur iPad, la section de fichier est prise en charge jusqu’à 65536 (64 Ko). Remarque : la spécification de la taille de section de fichier au-dessus de la limite autorisée entraîne une erreur interne.'
  remarks: >-
    **Ensembles de conditions requises**:


    - [CompressedFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#compressedfile) (lors de l’utilisation de `Office.FileType.Compressed`<!-- -->)


    - [File](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#file)


    - [TextFile](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textfile) (lors de l’utilisation de `Office.FileType.Text`<!-- -->)


    Pour les compléments s’exécutant dans les applications hôtes Office autres qu’Office sur iPad, la `getFileAsync` méthode prend en charge l’obtention de fichiers dans des sections allant jusqu’à 4194304 octets (4 Mo). Pour les compléments exécutés dans Office sur les applications iPad, la `getFileAsync` méthode prend en charge l’obtention de fichiers dans des sections allant jusqu’à 65536 (64 Ko).


    Le `fileType` paramètre peut être spécifié à l’aide de l’énumération [Office. filetype](xref:office!Office.FileType:enum) ou de valeurs de texte. Toutefois, les valeurs possibles varient en fonction de l’hôte :


    *FileTypes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Windows </th><th> Office sur le web </th><th> Office sur iPad </th><th> Office sur Mac </th></tr> <tr><td><strong> Excel </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> <tr><td><strong> Présentations </strong></td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td><td> `Compressed`<!-- -->, `Pdf` </td></tr> <tr><td><strong> Automatique </strong></td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td><td> `Compressed` </td><td> `Compressed`<!-- -->, `Pdf`<!-- -->, `Text` </td></tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFileAsync(fileType: FileType, callback?: (result: AsyncResult<Office.File>) => void): void;'
    parameters:
    - id: fileType
      description: Format dans lequel le fichier sera renvoyé.
      type: <xref uid="office!Office.FileType:enum" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’objet file.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.File:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(options, callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(1)
  package: office!
  fullName: getFilePropertiesAsync(options, callback)
  summary: Obtient les propriétés de fichier du document actif.
  remarks: >-
    **Ensembles de conditions requises**: [pas dans un ensemble](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Vous obtenez l’URL du fichier avec la propriété URL `asyncResult.value.url`<!-- -->.
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés du fichier (avec l’URL disponible à l’adresse suivante : `asyncResult.value.url`<!-- -->).'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getFilePropertiesAsync(callback)
  uid: office!Office.Document#getFilePropertiesAsync:member(2)
  package: office!
  fullName: getFilePropertiesAsync(callback)
  summary: Obtient les propriétés de fichier du document actif.
  remarks: >-
    **Ensembles de conditions requises**: [pas dans un ensemble](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    Vous obtenez l’URL du fichier avec la propriété URL `asyncResult.value.url`<!-- -->.


    #### <a name="examples"></a>範例


    ```javascript

    // To read the URL of the current file, you need to write a callback function that returns the URL.

    // The following example shows how to:

    // 1. Pass an anonymous callback function that returns the value of the file's URL

    //    to the callback parameter of the getFilePropertiesAsync method.

    // 2. Display the value on the add-in's page.

    function getFileUrl() {
        // Get the URL of the current file.
        Office.context.document.getFilePropertiesAsync(function (asyncResult) {
            var fileUrl = asyncResult.value.url;
            if (fileUrl == "") {
                showMessage("The file hasn't been saved yet. Save the file and try again");
            }
            else {
                showMessage(fileUrl);
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFilePropertiesAsync(callback?: (result: AsyncResult<Office.FileProperties>) => void): void;'
    parameters:
    - id: callback
      description: 'Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés du fichier (avec l’URL disponible à l’adresse suivante : `asyncResult.value.url`<!-- -->).'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;<xref uid="office!Office.FileProperties:interface" />&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(options, callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(1)
  package: office!
  fullName: getMaxResourceIndexAsync(options, callback)
  summary: >-
    Documents de projet uniquement. Obtenir l’index maximal de la collection de ressources dans le projet en cours.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le numéro d’index le plus élevé dans la collection de ressources du projet actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxResourceIndexAsync(callback)
  uid: office!Office.Document#getMaxResourceIndexAsync:member(2)
  package: office!
  fullName: getMaxResourceIndexAsync(callback)
  summary: >-
    Documents de projet uniquement. Obtenir l’index maximal de la collection de ressources dans le projet en cours.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxResourceIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le numéro d’index le plus élevé dans la collection de ressources du projet actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getResourceTaskIndexAsync to get the maximum index of the collection \n// of resources in the current project. Then it uses the returned value and the getResourceByIndexAsync\n// method to get each resource GUID. The example assumes that your add-in has a reference to the \n// jQuery library and that the following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getMaxTaskIndexAsync(options, callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(1)
  package: office!
  fullName: getMaxTaskIndexAsync(options, callback)
  summary: >-
    Documents de projet uniquement. Obtenir l’index maximal de la collection de tâches dans le projet en cours.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le numéro d’index le plus élevé dans la collection de tâches du projet actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getMaxTaskIndexAsync(callback)
  uid: office!Office.Document#getMaxTaskIndexAsync:member(2)
  package: office!
  fullName: getMaxTaskIndexAsync(callback)
  summary: >-
    Documents de projet uniquement. Obtenir l’index maximal de la collection de tâches dans le projet en cours.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getMaxTaskIndexAsync(callback?: (result: AsyncResult<number>) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le numéro d’index le plus élevé dans la collection de tâches du projet actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;number&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the maximum index\n// of the collection of tasks in the current project. Then it uses the returned value\n// with the getTaskByIndexAsync method to get each task GUID.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getProjectFieldAsync(fieldId, options, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(1)
  package: office!
  fullName: getProjectFieldAsync(fieldId, options, callback)
  summary: Documents de projet uniquement. Obtenir le champ de projet (par exemple, ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Champs au niveau du projet.
      type: number
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient la `fieldValue` propriété, qui représente la valeur du champ spécifié.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getProjectFieldAsync(fieldId, callback)
  uid: office!Office.Document#getProjectFieldAsync:member(2)
  package: office!
  fullName: getProjectFieldAsync(fieldId, callback)
  summary: Documents de projet uniquement. Obtenir le champ de projet (par exemple, ProjectWebAccessURL).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getProjectFieldAsync(fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: fieldId
      description: Champs au niveau du projet.
      type: number
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient la `fieldValue` propriété, qui représente la valeur du champ spécifié.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example gets the values of three specified fields for the active project, \n// and then displays the values in the add-in.\n// The example calls getProjectFieldAsync recursively, after the previous call returns successfully.\n// It also tracks the calls to determine when all calls are sent.\n// The example assumes your add-in has a reference to the jQuery library and that the \n// following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // Get information for the active project.\n            getProjectInformation();\n        });\n    };\n\n    // Get the specified fields for the active project.\n    function getProjectInformation() {\n        var fields =\n            [Office.ProjectProjectFields.Start, \n             Office.ProjectProjectFields.Finish, \n             Office.ProjectProjectFields.GUID];\n        var fieldValues = ['Start: ', 'Finish: ', 'GUID: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == fields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n            else {\n                Office.context.document.getProjectFieldAsync(\n                    fields[index],\n                    function (result) {\n\n                        // If the call is successful, get the field value and then get the next field.\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceByIndexAsync(resourceIndex, options, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(1)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, options, callback)
  summary: >-
    Documents de projet uniquement. Obtenir le GUID de la ressource qui a l’index spécifié dans la collection de ressources.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Index de la ressource dans la collection de ressources pour le projet.
      type: number
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceByIndexAsync(resourceIndex, callback)
  uid: office!Office.Document#getResourceByIndexAsync:member(2)
  package: office!
  fullName: getResourceByIndexAsync(resourceIndex, callback)
  summary: >-
    Documents de projet uniquement. Obtenir le GUID de la ressource qui a l’index spécifié dans la collection de ressources.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceByIndexAsync(resourceIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceIndex
      description: Index de la ressource dans la collection de ressources pour le projet.
      type: number
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getMaxResourceIndexAsync to get the maximum index in the project's resource\n// collection, and then calls getResourceByIndexAsync to get the GUID for each resource.\n// The example assumes that your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var resourceGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the maximum resource index, and then get the resource GUIDs.\n    function getResourceInfo() {\n        getMaxResourceIndex().then(\n            function (data) {\n                getResourceGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the resources for the current project.\n    function getMaxResourceIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxResourceIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each resource GUID, and then display the GUIDs in the add-in.\n    // There is no 0 index for resources, so start with index 1.\n    function getResourceGuids(maxResourceIndex) {\n        var defer = $.Deferred();\n        for (var i = 1; i <= maxResourceIndex; i++) {\n            getResourceGuid(i);\n        }\n        return defer.promise();\n        function getResourceGuid(index) {\n            Office.context.document.getResourceByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        resourceGuids.push(result.value);\n                        if (index == maxResourceIndex) {\n                            defer.resolve();\n                            $('#message').html(resourceGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getResourceFieldAsync(resourceId, fieldId, options, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(1)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, options, callback)
  summary: Documents de projet uniquement. Champ obtenir une ressource pour l’ID de ressource fourni. (ex. Nom_ressource)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Soit une chaîne, soit une valeur de l’ID de ressource.
      type: string
    - id: fieldId
      description: Champs de ressources.
      type: number
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getResourceFieldAsync(resourceId, fieldId, callback)
  uid: office!Office.Document#getResourceFieldAsync:member(2)
  package: office!
  fullName: getResourceFieldAsync(resourceId, fieldId, callback)
  summary: Documents de projet uniquement. Champ obtenir une ressource pour l’ID de ressource fourni. (ex. Nom_ressource)
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getResourceFieldAsync(resourceId: string, fieldId: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: resourceId
      description: Soit une chaîne, soit une valeur de l’ID de ressource.
      type: string
    - id: fieldId
      description: Champs de ressources.
      type: number
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource\n// that's currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following \n// page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedDataAsync(coercionType, options, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(1)
  package: office!
  fullName: getSelectedDataAsync(coercionType, options, callback)
  summary: Lit les données contenues dans la sélection actuelle du document.
  remarks: "**Ensembles de conditions requises**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lors de l’utilisation de `Office.CoercionType.Html`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lors de l’utilisation de `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lors de l’utilisation de `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lors de l’utilisation de `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lors de l’utilisation de `Office.CoercionType.Text`<!-- -->)\n\nDans la fonction de rappel transmise à la méthode getSelectedDataAsync, vous pouvez utiliser les propriétés de l’objet AsyncResult pour renvoyer les informations suivantes.\n\n<table> <tr> <th>Propriété</th> <th>Utiliser pour...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Toujours renvoyer undefined car il n’existe aucun objet ou aucune donnée à récupérer.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Déterminer si l’opération a réussi ou échoué.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Accéder à un objet Error fournissant des informations sur l’erreur en cas d’échec de l’opération.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Élément de tout type défini par l’utilisateur qui est renvoyé dans l’objet AsyncResult sans être modifié.</td> </tr> </table>\n\nLes valeurs possibles pour le paramètre [Office. CoercionType](xref:office!Office.CoercionType:enum) varient en fonction de l’hôte.\n\n<table> <tr> <th>Hôte</th> <th>coercionType pris en charge</th> </tr> <tr> <td>Excel, PowerPoint, Project et Word</td> <td>`Office.CoercionType.Text` chaîne</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Matrix` (tableau de tableaux)</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Table` (Objet TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint sur le Web et Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint et Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following example uses the getSelectedDataAsync method of the Document object to retrieve the\n// user's current selection as text, and then display it in the add-in's page.\n\n// Display the user's current selection.\nfunction showSelection() {\n    Office.context.document.getSelectedDataAsync(\n        \"text\",                        // coercionType\n        {valueFormat: \"unformatted\",   // valueFormat\n        filterType: \"all\"},            // filterType\n        function (result) {            // callback\n            var dataValue; \n            dataValue = result.value;\n            write('Selected data is: ' + dataValue);\n        });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// To read the value of the current selection, you need to write a callback function that reads the selection.\n// The following example shows how to:\n// 1. Pass an anonymous callback function that reads the value of the current selection\n//    to the callback parameter of the getSelectedDataAsync method.\n// 2. Read the selection as text, unformatted, and not filtered.\n// 3. Display the value on the add-in's page.\nfunction getText() {\n    Office.context.document.getSelectedDataAsync(Office.CoercionType.Text, \n        { valueFormat: \"unformatted\", filterType: \"all\" },\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            } \n            else {\n                // Get selected data.\n                var dataValue = asyncResult.value; \n                write('Selected data is ' + dataValue);\n            }            \n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```\n```javascript\n// The following code example gets the values of the selected cells. It uses the optional\n// asyncContext parameter to pass some text to the callback function.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getSelectedText);\n        });\n    };\n\n    // Get the text from the selected cells in the document, and display it in the add-in.\n    function getSelectedText() {\n        Office.context.document.getSelectedDataAsync(\n            Office.CoercionType.Text,\n            {asyncContext: 'Some related info'},\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'Selected text: {0}<br/>Passed info: {1}',\n                        result.value, result.asyncContext);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, options?: GetSelectedDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Type de structure de données à renvoyer. Consultez la section Remarques pour les types de forçage de type pris en charge par chaque hôte.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: options
      description: Fournit des options pour personnaliser les données renvoyées et leur mise en forme.
      type: <xref uid="office!Office.GetSelectedDataOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les données dans la sélection actuelle. Cette fonction est renvoyée dans la structure ou le format des données que vous avez spécifié avec le paramètre coercionType. (Voir Remarques pour plus d’informations sur le forçage de type de données.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedDataAsync(coercionType, callback)
  uid: office!Office.Document#getSelectedDataAsync:member(2)
  package: office!
  fullName: getSelectedDataAsync(coercionType, callback)
  summary: Lit les données contenues dans la sélection actuelle du document.
  remarks: >-
    **Ensembles de conditions requises**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lors de l’utilisation de `Office.CoercionType.Html`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lors de l’utilisation de `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lors de l’utilisation de `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lors de l’utilisation de `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lors de l’utilisation de `Office.CoercionType.Text`<!-- -->)


    Dans la fonction de rappel transmise à la méthode getSelectedDataAsync, vous pouvez utiliser les propriétés de l’objet AsyncResult pour renvoyer les informations suivantes.


    <table> <tr> <th>Propriété</th> <th>Utiliser pour...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Toujours renvoyer undefined car il n’existe aucun objet ou aucune donnée à récupérer.</td> </tr> <tr> <td>AsyncResult. Status</td> <td>Déterminer si l’opération a réussi ou échoué.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Accéder à un objet Error fournissant des informations sur l’erreur en cas d’échec de l’opération.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Élément de tout type défini par l’utilisateur qui est renvoyé dans l’objet AsyncResult sans être modifié.</td> </tr> </table>


    Les valeurs possibles pour le paramètre [Office. CoercionType](xref:office!Office.CoercionType:enum) varient en fonction de l’hôte.


    <table> <tr> <th>Hôte</th> <th>coercionType pris en charge</th> </tr> <tr> <td>Excel, PowerPoint, Project et Word</td> <td>`Office.CoercionType.Text` chaîne</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Matrix` (tableau de tableaux)</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Table` (Objet TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint sur le Web et Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint et Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedDataAsync<T>(coercionType: Office.CoercionType, callback?: (result: AsyncResult<T>) => void): void;'
    parameters:
    - id: coercionType
      description: Type de structure de données à renvoyer. Consultez la section Remarques pour les types de forçage de type pris en charge par chaque hôte.
      type: <xref uid="office!Office.CoercionType:enum" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les données dans la sélection actuelle. Cette fonction est renvoyée dans la structure ou le format des données que vous avez spécifié avec le paramètre coercionType. (Voir Remarques pour plus d’informations sur le forçage de type de données.)
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;T&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(options, callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(1)
  package: office!
  fullName: getSelectedResourceAsync(options, callback)
  summary: Documents de projet uniquement. Obtenir l’ID de la ressource sélectionnée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedResourceAsync(callback)
  uid: office!Office.Document#getSelectedResourceAsync:member(2)
  package: office!
  fullName: getSelectedResourceAsync(callback)
  summary: Documents de projet uniquement. Obtenir l’ID de la ressource sélectionnée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedResourceAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's \n// currently selected in a resource view. Then it gets three resource field values by calling \n// getResourceFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page controls are\n// defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource and then get the resource fields.\n    function getResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                getResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected resource.\n    function getResourceFields(resourceGuid) {\n        var targetFields =\n            [Office.ProjectResourceFields.Name,\n             Office.ProjectResourceFields.Units, \n             Office.ProjectResourceFields.BaseCalendar];\n        var fieldValues = ['Name: ', 'Units: ', 'Base calendar: '];\n        var index = 0; \n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                var output = '';\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // If the call is successful, get the field value and then get the next field.\n            else {\n                Office.context.document.getResourceFieldAsync(\n                    resourceGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedTaskAsync(options, callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(1)
  package: office!
  fullName: getSelectedTaskAsync(options, callback)
  summary: Documents de projet uniquement. Obtenir l’ID de la tâche sélectionnée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedTaskAsync(callback)
  uid: office!Office.Document#getSelectedTaskAsync:member(2)
  package: office!
  fullName: getSelectedTaskAsync(callback)
  summary: Documents de projet uniquement. Obtenir l’ID de la tâche sélectionnée actuelle.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedTaskAsync(callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la ressource sous forme de chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets task properties by calling getTaskAsync.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getSelectedViewAsync(options, callback)
  uid: office!Office.Document#getSelectedViewAsync:member(1)
  package: office!
  fullName: getSelectedViewAsync(options, callback)
  summary: Documents de projet uniquement. Obtenir le type d’affichage sélectionné actuel (par exemple, Gantt) et nom de l’affichage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `viewName` -le nom de l’affichage, en tant que constante ProjectViewTypes. `viewType` -Le type de vue, en tant que valeur entière d’une constante ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getSelectedViewAsync(callback)
  uid: office!Office.Document#getSelectedViewAsync:member(2)
  package: office!
  fullName: getSelectedViewAsync(callback)
  summary: Documents de projet uniquement. Obtenir le type d’affichage sélectionné actuel (par exemple, Gantt) et nom de l’affichage.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedViewAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `viewName` -le nom de l’affichage, en tant que constante ProjectViewTypes. `viewType` -Le type de vue, en tant que valeur entière d’une constante ProjectViewTypes.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls adds a ViewSelectionChanged event handler that\n// calls getSelectedViewAsync to get the name and type of the active view in the document.\n// The example assumes your add-in has a reference to the jQuery library and that\n// the following page control is defined in the content div in the page body:\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            Office.context.document.addHandlerAsync(\n                Office.EventType.ViewSelectionChanged,\n                getActiveView);\n            getActiveView();\n        });\n    };\n\n    // Get the active view's name and type.\n    function getActiveView() {\n        Office.context.document.getSelectedViewAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var output = String.format(\n                        'View name: {0}<br/>View type: {1}',\n                        result.value.viewName, viewType);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskAsync(taskId, options, callback)
  uid: office!Office.Document#getTaskAsync:member(1)
  package: office!
  fullName: getTaskAsync(taskId, options, callback)
  summary: Documents de projet uniquement. Obtenez le nom de la tâche, l’ID de tâche WSS et ResourceNames pour un taskId donné.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `taskName` -le nom de la tâche. `wssTaskId` -ID de la tâche dans la liste de tâches SharePoint synchronisée. Si le projet n’est pas synchronisé avec une liste de tâches SharePoint, la valeur est 0. `resourceNames` -Liste séparée par des virgules des noms des ressources affectées à la tâche.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskAsync(taskId, callback)
  uid: office!Office.Document#getTaskAsync:member(2)
  package: office!
  fullName: getTaskAsync(taskId, callback)
  summary: Documents de projet uniquement. Obtenez le nom de la tâche, l’ID de tâche WSS et ResourceNames pour un taskId donné.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskAsync(taskId: string, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `taskName` -le nom de la tâche. `wssTaskId` -ID de la tâche dans la liste de tâches SharePoint synchronisée. Si le projet n’est pas synchronisé avec une liste de tâches SharePoint, la valeur est 0. `resourceNames` -Liste séparée par des virgules des noms des ressources affectées à la tâche.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the task GUID of the currently\n// selected task. Then it calls getTaskAsync to get the properties for the task that are\n// available from the JavaScript API for Office.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get local task properties.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskProperties(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get local properties for the selected task, and then display it in the add-in.\n    function getTaskProperties(taskGuid) {\n        Office.context.document.getTaskAsync(\n            taskGuid,\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    var taskInfo = result.value;\n                    var output = String.format(\n                        'Name: {0}<br/>GUID: {1}<br/>SharePoint task ID: {2}<br/>Resource names: {3}',\n                        taskInfo.taskName, taskGuid, taskInfo.wssTaskId, taskInfo.resourceNames);\n                    $('#message').html(output);\n                }\n            }\n        );\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskByIndexAsync(taskIndex, options, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(1)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, options, callback)
  summary: >-
    Documents de projet uniquement. Obtenir le GUID de la tâche qui a l’index spécifié dans la collection de tâches.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Index de la tâche dans la collection de tâches pour le projet.
      type: number
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la tâche sous la forme d’une chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskByIndexAsync(taskIndex, callback)
  uid: office!Office.Document#getTaskByIndexAsync:member(2)
  package: office!
  fullName: getTaskByIndexAsync(taskIndex, callback)
  summary: >-
    Documents de projet uniquement. Obtenir le GUID de la tâche qui a l’index spécifié dans la collection de tâches.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskByIndexAsync(taskIndex: number, callback?: (result: AsyncResult<string>) => void): void;'
    parameters:
    - id: taskIndex
      description: Index de la tâche dans la collection de tâches pour le projet.
      type: number
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est le GUID de la tâche sous la forme d’une chaîne.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;string&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getMaxTaskIndexAsync to get the\n// maximum index in the project's task collection, and then\n// calls getTaskByIndexAsync to get the GUID for each task.\n// The example assumes that your add-in has a reference to the\n// jQuery library and that the following page controls are defined\n// in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n    var taskGuids = ;\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the maximum task index, and then get the task GUIDs.\n    function getTaskInfo() {\n        getMaxTaskIndex().then(\n            function (data) {\n                getTaskGuids(data);\n            }\n        );\n    }\n\n    // Get the maximum index of the tasks for the current project.\n    function getMaxTaskIndex() {\n        var defer = $.Deferred();\n        Office.context.document.getMaxTaskIndexAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get each task GUID, and then display the GUIDs in the add-in.\n    function getTaskGuids(maxTaskIndex) {\n        var defer = $.Deferred();\n        for (var i = 0; i <= maxTaskIndex; i++) {\n            getTaskGuid(i);\n        }\n        return defer.promise();\n        function getTaskGuid(index) {\n            Office.context.document.getTaskByIndexAsync(index,\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        taskGuids.push(result.value);\n                        if (index == maxTaskIndex) {\n                            defer.resolve();\n                            $('#message').html(taskGuids.toString());\n                        }\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n    }\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getTaskFieldAsync(taskId, fieldId, options, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(1)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, options, callback)
  summary: Documents de projet uniquement. Obtenir le champ de tâche pour l’ID de tâche fourni. (par exemple StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: fieldId
      description: Champs de tâche.
      type: number
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient la `fieldValue` propriété, qui représente la valeur du champ spécifié.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getTaskFieldAsync(taskId, fieldId, callback)
  uid: office!Office.Document#getTaskFieldAsync:member(2)
  package: office!
  fullName: getTaskFieldAsync(taskId, fieldId, callback)
  summary: Documents de projet uniquement. Obtenir le champ de tâche pour l’ID de tâche fourni. (par exemple StartDate).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTaskFieldAsync(taskId: string, fieldId: number, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: fieldId
      description: Champs de tâche.
      type: number
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient la `fieldValue` propriété, qui représente la valeur du champ spécifié.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's currently\n// selected in a task view. Then it gets two task field values by calling getTaskFieldAsync recursively.\n// The example assumes your add-in has a reference to the jQuery library and that the following page\n// controls are defined in the content div in the page body:\n// <input id=\"get-info\" type=\"button\" value=\"Get info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            $('#get-info').click(getTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function getTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                getTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Get the specified fields for the selected task.\n    function getTaskFields(taskGuid) {\n        var output = '';\n        var targetFields = [Office.ProjectTaskFields.Priority, Office.ProjectTaskFields.PercentComplete];\n        var fieldValues = ['Priority: ', '% Complete: '];\n        var index = 0;\n        getField();\n\n        // Get each field, and then display the field values in the add-in.\n        function getField() {\n            if (index == targetFields.length) {\n                for (var i = 0; i < fieldValues.length; i++) {\n                    output += fieldValues[i] + '<br />';\n                }\n                $('#message').html(output);\n            }\n\n            // Get the field value. If the call is successful, then get the next field.\n            else {\n                Office.context.document.getTaskFieldAsync(\n                    taskGuid,\n                    targetFields[index],\n                    function (result) {\n                        if (result.status === Office.AsyncResultStatus.Succeeded) {\n                            fieldValues[index] += result.value.fieldValue;\n                            getField(index++);\n                        }\n                        else {\n                            onError(result.error);\n                        }\n                    }\n                );\n            }\n        }\n    }\n\n    function onError(error) {\n        $('#message').html(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: getWSSUrlAsync(options, callback)
  uid: office!Office.Document#getWSSUrlAsync:member(1)
  package: office!
  fullName: getWSSUrlAsync(options, callback)
  summary: Documents de projet uniquement. Obtenir l’URL et le nom de liste WSS pour la liste des tâches, le MPP est également synchronisé.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `listName` -le nom de la liste de tâches SharePoint synchronisée. `serverUrl` -l’URL de la liste de tâches SharePoint synchronisée.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: getWSSUrlAsync(callback)
  uid: office!Office.Document#getWSSUrlAsync:member(2)
  package: office!
  fullName: getWSSUrlAsync(callback)
  summary: Documents de projet uniquement. Obtenir l’URL et le nom de liste WSS pour la liste des tâches, le MPP est également synchronisé.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getWSSUrlAsync(callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: callback
      description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat contient les propriétés suivantes : `listName` -le nom de la liste de tâches SharePoint synchronisée. `serverUrl` -l’URL de la liste de tâches SharePoint synchronisée.'
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, options, callback)
  uid: office!Office.Document#goToByIdAsync:member(1)
  package: office!
  fullName: goToByIdAsync(id, goToType, options, callback)
  summary: Accède à l’emplacement ou l’objet spécifié dans le document.
  remarks: >-
    **Ensemble de conditions requises**: [pas dans un ensemble](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint ne prend pas en charge la méthode goToByIdAsync dans les modes masque.


    Le comportement généré par l’option selectionMode varie en fonction de l’hôte :


    Dans Excel : `Office.SelectionMode.Selected` sélectionne tout le contenu de la liaison ou de l’élément nommé. Office.SelectionMode.None pour les liaisons de texte, sélectionne la cellule ; pour les liaisons de matrice, les liaisons de tableau et les éléments nommés, sélectionne la première cellule de données (pas la première cellule dans la ligne d’en-tête pour les tableaux).


    Dans PowerPoint : `Office.SelectionMode.Selected` sélectionne le titre de la diapositive ou la première zone de texte de la diapositive. `Office.SelectionMode.None` ne sélectionne rien.


    Dans Word : `Office.SelectionMode.Selected` sélectionne tout le contenu de la liaison. Office.SelectionMode.None pour les liaisons de texte, déplace le curseur au début du texte ; pour les liaisons de matrice et de tableau, sélectionne la première cellule de données (pas la première cellule dans la ligne d’en-tête pour les tableaux).
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, options?: GoToByIdOptions, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Identifiant de l’objet ou de l’emplacement à atteindre.
      type: string | number
    - id: goToType
      description: Type d’emplacement à atteindre.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: options
      description: Fournit des options pour sélectionner l’emplacement cible.
      type: <xref uid="office!Office.GoToByIdOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’affichage actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: goToByIdAsync(id, goToType, callback)
  uid: office!Office.Document#goToByIdAsync:member(2)
  package: office!
  fullName: goToByIdAsync(id, goToType, callback)
  summary: Accède à l’emplacement ou l’objet spécifié dans le document.
  remarks: >-
    **Ensemble de conditions requises**: [pas dans un ensemble](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#methods-that-arent-part-of-a-requirement-set)


    PowerPoint ne prend pas en charge la méthode goToByIdAsync dans les modes masque.


    Le comportement généré par l’option selectionMode varie en fonction de l’hôte :


    Dans Excel : `Office.SelectionMode.Selected` sélectionne tout le contenu de la liaison ou de l’élément nommé. Office.SelectionMode.None pour les liaisons de texte, sélectionne la cellule ; pour les liaisons de matrice, les liaisons de tableau et les éléments nommés, sélectionne la première cellule de données (pas la première cellule dans la ligne d’en-tête pour les tableaux).


    Dans PowerPoint : `Office.SelectionMode.Selected` sélectionne le titre de la diapositive ou la première zone de texte de la diapositive. `Office.SelectionMode.None` ne sélectionne rien.


    Dans Word : `Office.SelectionMode.Selected` sélectionne tout le contenu de la liaison. Office.SelectionMode.None pour les liaisons de texte, déplace le curseur au début du texte ; pour les liaisons de matrice et de tableau, sélectionne la première cellule de données (pas la première cellule dans la ligne d’en-tête pour les tableaux).


    #### <a name="examples"></a>範例


    ```javascript

    // Go to a binding by id (Word and Excel)

    // The following example shows how to:

    // 1. Create a table binding using the addFromSelectionAsync method as a sample binding to work with.

    // 2. Specify that binding as the binding to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value on the add-in's page.

    function gotoBinding() {
        // Create a new table binding for the selected table.
        Office.context.document.bindings.addFromSelectionAsync("table",{ id: "MyTableBinding" }, function (asyncResult) {
        if (asyncResult.status == "failed") {
                  showMessage("Action failed with error: " + asyncResult.error.message);
              }
              else {
                  showMessage("Added new binding with type: " + asyncResult.value.type +" and id: " + asyncResult.value.id);
              }
        });

        // Go to binding by id.
        Office.context.document.goToByIdAsync("MyTableBinding", Office.GoToType.Binding, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to a table in a spreadsheet (Excel)

    // The following example shows how to:

    // 1. Specify a table by name as the table to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToTable() {
        Office.context.document.goToByIdAsync("Table1", Office.GoToType.NamedItem, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }


    // Go to the currently selected slide by id (PowerPoint)

    // The following example shows how to:

    // 1. Get the id of the currently selected slides using the getSelectedDataAsync method.

    // 2. Specify the returned id as the slide to go to.

    // 3. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 4. Display the value of the stringified JSON object returned by asyncResult.value,

    //    which contains information about the selected slides, on the add-in's page.

    var firstSlideId = 0;

    function gotoSelectedSlide() {
        //Get currently selected slide's id
        Office.context.document.getSelectedDataAsync(Office.CoercionType.SlideRange, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                firstSlideId = asyncResult.value.slides[0].id;
                app.showNotification(JSON.stringify(asyncResult.value));
            }
        });
        //Go to slide by id.
        Office.context.document.goToByIdAsync(firstSlideId, Office.GoToType.Slide, function (asyncResult) {
            if (asyncResult.status == "failed") {
                app.showNotification("Action failed with error: " + asyncResult.error.message);
            }
            else {
                app.showNotification("Navigation successful");
            }
        });
    }


    // Go to slide by index (PowerPoint)

    // The following example shows how to:

    // 1. Specify the index of the first, last, previous, or next slide to go to.

    // 2. Pass an anonymous callback function that returns the status of the operation

    //    to the callback parameter of the goToByIdAsync method.

    // 3. Display the value on the add-in's page.

    function goToSlideByIndex() {
        var goToFirst = Office.Index.First;
        var goToLast = Office.Index.Last;
        var goToPrevious = Office.Index.Previous;
        var goToNext = Office.Index.Next;

        Office.context.document.goToByIdAsync(goToNext, Office.GoToType.Index, function (asyncResult) {
            if (asyncResult.status == "failed") {
                showMessage("Action failed with error: " + asyncResult.error.message);
            }
            else {
                showMessage("Navigation successful");
            }
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'goToByIdAsync(id: string | number, goToType: GoToType, callback?: (result: AsyncResult<any>) => void): void;'
    parameters:
    - id: id
      description: Identifiant de l’objet ou de l’emplacement à atteindre.
      type: string | number
    - id: goToType
      description: Type d’emplacement à atteindre.
      type: <xref uid="office!Office.GoToType:enum" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La `value` propriété du résultat est l’affichage actuel.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, options, callback)
  uid: office!Office.Document#removeHandlerAsync:member(1)
  package: office!
  fullName: removeHandlerAsync(eventType, options, callback)
  summary: Supprime un gestionnaire d’événements pour le type d’événement spécifié.
  remarks: '**Ensemble de conditions requises**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)'
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Type d’événement. Le document peut être « document. SelectionChanged » ou « document. ActiveViewChanged ».
      type: <xref uid="office!Office.EventType:enum" />
    - id: options
      description: Fournit des options permettant de déterminer le gestionnaire d’événements ou les gestionnaires supprimés.
      type: <xref uid="office!Office.RemoveHandlerOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: removeHandlerAsync(eventType, callback)
  uid: office!Office.Document#removeHandlerAsync:member(2)
  package: office!
  fullName: removeHandlerAsync(eventType, callback)
  summary: Supprime un gestionnaire d’événements pour le type d’événement spécifié.
  remarks: >-
    **Ensemble de conditions requises**: [DocumentEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#documentevents)


    #### <a name="examples"></a>範例


    ```javascript

    // The following example removes the event handler named 'MyHandler'.

    function removeSelectionChangedEventHandler() {
        Office.context.document.removeHandlerAsync(Office.EventType.DocumentSelectionChanged, {handler:MyHandler});
    }


    function MyHandler(eventArgs) {
        doSomethingWithDocument(eventArgs.document);
    }

    ```

    ```javascript

    // The following code example uses addHandlerAsync to add an event handler for the

    // ResourceSelectionChanged event and removeHandlerAsync to remove the handler.

    // When a resource is selected in a resource view, the handler displays the

    // resource GUID. When the handler is removed, the GUID is not displayed.

    // The example assumes that your add-in has a reference to the jQuery library and

    // that the following page control is defined in the content div in the page body:

    // <input id="remove-handler" type="button" value="Remove handler" /><br />

    // <span id="message"></span>


    (function () {
        "use strict";

        // The initialize function must be run each time a new page is loaded.
        Office.initialize = function (reason) {
            $(document).ready(function () {

                // After the DOM is loaded, add-in-specific code can run.
                Office.context.document.addHandlerAsync(
                    Office.EventType.ResourceSelectionChanged,
                    getResourceGuid);
                $('#remove-handler').click(removeEventHandler);
            });
        };

        // Remove the event handler.
        function removeEventHandler() {
            Office.context.document.removeHandlerAsync(
                Office.EventType.ResourceSelectionChanged,
                {handler:getResourceGuid,
                asyncContext:'The handler is removed.'},
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#remove-handler').attr('disabled', 'disabled');
                        $('#message').html(result.asyncContext);
                    }
                }
            );
        }

        // Get the GUID of the currently selected resource and display it in the add-in.
        function getResourceGuid() {
            Office.context.document.getSelectedResourceAsync(
                function (result) {
                    if (result.status === Office.AsyncResultStatus.Failed) {
                        onError(result.error);
                    }
                    else {
                        $('#message').html('Resource GUID: ' + result.value);
                    }
                }
            );
        }

        function onError(error) {
            $('#message').html(error.name + ' ' + error.code + ': ' + error.message);
        }
    })();

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: eventType
      description: Type d’événement. Le document peut être « document. SelectionChanged » ou « document. ActiveViewChanged ».
      type: <xref uid="office!Office.EventType:enum" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(1)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, options, callback)
  summary: >-
    Documents de projet uniquement. Définir le champ de ressource pour l’ID de ressource spécifié.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Soit une chaîne, soit une valeur de l’ID de ressource.
      type: string
    - id: fieldId
      description: Champs de ressources.
      type: number
    - id: fieldValue
      description: Valeur du champ cible.
      type: string | number | boolean | object
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setResourceFieldAsync:member(2)
  package: office!
  fullName: setResourceFieldAsync(resourceId, fieldId, fieldValue, callback)
  summary: >-
    Documents de projet uniquement. Définir le champ de ressource pour l’ID de ressource spécifié.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setResourceFieldAsync(resourceId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: resourceId
      description: Soit une chaîne, soit une valeur de l’ID de ressource.
      type: string
    - id: fieldId
      description: Champs de ressources.
      type: number
    - id: fieldValue
      description: Valeur du champ cible.
      type: string | number | boolean | object
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedResourceAsync to get the GUID of the resource that's\n// currently selected in a resource view. Then it sets two resource field values by calling\n// setResourceFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the addHandlerAsync\n// method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n\n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setResourceInfo);\n        });\n    };\n\n    // Get the GUID of the resource, and then get the resource fields.\n    function setResourceInfo() {\n        getResourceGuid().then(\n            function (data) {\n                setResourceFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected resource.\n    function getResourceGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedResourceAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected resource.\n    function setResourceFields(resourceGuid) {\n        var targetFields = [Office.ProjectResourceFields.StandardRate, Office.ProjectResourceFields.Notes];\n        var fieldValues = [.28, 'Notes for the resource.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setResourceFieldAsync(\n                resourceGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
- name: setSelectedDataAsync(data, options, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(1)
  package: office!
  fullName: setSelectedDataAsync(data, options, callback)
  summary: Écrit les données spécifiées dans la sélection actuelle.
  remarks: "**Ensembles de conditions requises**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (lorsque vous utilisez `Office.CoercionType.Html`<!-- -->)\n\n- [ImageCoercion 1,1](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (en cas d’utilisation `Office.CoercionType.Image`<!-- -->)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lors de l’utilisation de `Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lors de l’utilisation de `Office.CoercionType.Ooxml`<!-- -->)\n\n- [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lors de l’utilisation de `Office.CoercionType.Table`<!-- -->)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lors de l’utilisation de `Office.CoercionType.Text`<!-- -->)\n\n- [ImageCoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (en cas d’utilisation `Office.CoercionType.XmlSvg`<!-- -->)\n\n**Comportements propres à l’application**\n\nLes actions suivantes spécifiques à l’application s’appliquent lors de l’écriture de données dans une sélection.\n\n<table> <tr> <td>Word</td> <td>S’il n’y a aucune sélection et que le point d’insertion se trouve à un emplacement valide, le spécifié `data` est inséré au point d’insertion.</td> <td>S' `data` il s’agit d’une chaîne, le texte spécifié est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un tableau de tableaux (« matrice ») ou un objet TableData, un nouveau tableau Word est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est html, le code HTML spécifié est inséré. (**Important**: si l’un des éléments HTML que vous insérez n’est pas valide, Word ne génère pas d’erreur. Word insère autant de code HTML que possible et omet toutes les données non valides.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est Office Open XML, le code XML spécifié est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un flux d’image encodé en base64, l’image spécifiée est insérée.</td> </tr> <tr> <td></td> <td>S’il existe une sélection</td> <td>Il est remplacé par le suivant les `data` mêmes règles que ci-dessus.</td> </tr> <tr> <td></td> <td>Insérer des images</td> <td>Les images insérées sont placées en ligne. Les paramètres imageLeft et imageTop sont ignorés. Les proportions de l’image sont toujours verrouillées. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr>\n\n<tr> <td>Excel</td> <td>Si une seule cellule est sélectionnée</td> <td>S' `data` il s’agit d’une chaîne, le texte spécifié est inséré en tant que valeur de la cellule active.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un tableau de tableaux (« matrice »), l’ensemble spécifié de lignes et de colonnes est inséré, à condition qu’aucune autre donnée des cellules environnantes ne soit remplacée.</td> </tr> <tr> <td></td> <td></td> <td>S' `data` il s’agit d’un objet TableData, un nouveau tableau Excel avec l’ensemble spécifié de lignes et d’en-têtes est inséré, à condition qu’aucune autre donnée des cellules environnantes ne soit remplacée.</td> </tr> <tr> <td></td> <td>Si plusieurs cellules sont sélectionnées</td> <td>If the shape does not match the shape of `data`<!-- -->, une erreur est renvoyée.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, les valeurs des cellules sélectionnées sont mises à jour en fonction des valeurs de `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insérer des images</td> <td>Les images insérées sont flottantes. Les paramètres imageLeft et imageTop de position sont indiqués par rapport à la ou aux cellule(s) actuellement sélectionnée(s). Les valeurs imageLeft et imageTop négatives sont autorisées et éventuellement réajustées par Excel pour positionner l’image dans une feuille de calcul. Les proportions sont verrouillées à moins que les paramètres imageWidth et imageHeight soient tous deux indiqués. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr> <tr> <td></td> <td>Tous les autres cas</td> <td>Une erreur est renvoyée.</td> </tr>\n\n<tr> <td>Excel sur le web</td> <td>En plus des comportements décrits pour Excel ci-dessus, ces limites s’appliquent lors de l’écriture de données dans Excel sur le Web</td> <td>Le nombre total de cellules que vous pouvez écrire dans une feuille de calcul avec le `data` paramètre ne peut pas dépasser 20 000 dans un appel unique à cette méthode.</td> </tr> <tr> <td></td> <td></td> <td>Le nombre de groupes de mise en forme transmis au `cellFormat` paramètre ne peut pas dépasser 100. Un groupe de mise en forme se compose d’un ensemble de mises en forme appliquées à une plage de cellules donnée.</td> </tr>\n\n<tr> <td>PowerPoint</td> <td>Insérer une image</td> <td>Les images insérées sont flottantes. Les paramètres de position imageLeft et imageTop sont facultatifs, mais si fournis, les deux doivent être présents. Si une seule valeur est indiquée, elle sera ignorée. Les valeurs imageLeft et imageTop négatives sont autorisées et peuvent positionner une image en dehors d’une diapositive. Si aucun paramètre facultatif n’est indiqué et qu’une diapositive présente un espace réservé, l’image remplacera l’espace réservé dans la diapositive. Les proportions de l’image seront verrouillées, sauf si les paramètres imageWidth et imageHeight sont tous deux indiqués. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr> </table>\n\n**Comportements propres aux types**\n\n<table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Excel uniquement) : dans Excel, il existe une limite de taille de 64 Ko pour les insertions SVG.</td> </tr> </table>\n\n**Hôtes**\n\nLes valeurs possibles pour le paramètre [Office. CoercionType](xref:office!Office.CoercionType:enum) varient en fonction de l’hôte.\n\n<table> <tr> <th>Hôte</th> <th>coercionType pris en charge</th> </tr> <tr> <td>Excel, PowerPoint, Project et Word</td> <td>`Office.CoercionType.Text` chaîne</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Matrix` (tableau de tableaux)</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Table` (Objet TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint sur le Web et Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint et Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following example sets the selected text or cell to \"Hello World!\", \n// and if that fails, displays the value of the error.message property.\nfunction writeText() {\n    Office.context.document.setSelectedDataAsync(\"Hello World!\",\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write\n// to a selection. The following example writes data as an array of three rows of two columns, \n// specifying the coercionType as `Matrix` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeMatrix() {\n    Office.context.document.setSelectedDataAsync(\n        [[\"Red\", \"Rojo\"], [\"Green\", \"Verde\"], [\"Blue\", \"Azul\"]],\n        {coercionType: Office.CoercionType.Matrix}\n        function (asyncResult) {\n            var error = asyncResult.error;\n            if (asyncResult.status === Office.AsyncResultStatus.Failed){\n                write(error.name + \": \" + error.message);\n            }\n        });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// The following example writes data as a one column table with a header and four rows, \n// specifying the coercionType as `Table` for that data structure, and if that fails, \n// displays the value of the error.message property.\nfunction writeTable() {\n    // Build table.\n    var myTable = new Office.TableData();\n    myTable.headers = [[\"Cities\"]];\n    myTable.rows = [['Berlin'], ['Roma'], ['Tokyo'], ['Seattle']];\n\n    // Write table.\n    Office.context.document.setSelectedDataAsync(myTable, {coercionType: Office.CoercionType.Table},\n        function (result) {\n            var error = result.error\n            if (result.status === Office.AsyncResultStatus.Failed) {\n                write(error.name + \": \" + error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word if you want to write HTML to the selection, you can specify the coercionType parameter as `Html`\n// as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.context.document.setSelectedDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: Office.CoercionType.Html}, function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                write('Error: ' + asyncResult.error.message);\n            }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In Word, PowerPoint, or Excel, if you want to write an image to the selection, you can specify the coercionType\n// parameter as `Image` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertPictureAtSelection(base64EncodedImageStr) {\n\n    Office.context.document.setSelectedDataAsync(base64EncodedImageStr, {\n        coercionType: Office.CoercionType.Image,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 100,\n        imageHeight: 100\n    },\n    function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n            console.log(\"Action failed with error: \" + asyncResult.error.message);\n        }\n    });\n}\n\n// In Word, PowerPoint, or Excel, if you want to write an scalable vector graphic (SVG) to the selection, you can specify the \n// coercionType parameter as `XmlSvg` as shown in the following example. Note that imageLeft and imageTop are ignored by Word.\nfunction insertSvgAtSelection(base64EncodedImageStr) {\n    Office.context.document.setSelectedDataAsync(getImageAsBase64String(), {\n        coercionType: Office.CoercionType.XmlSvg,\n        imageLeft: 50,\n        imageTop: 50,\n        imageWidth: 400\n    },\n        function (asyncResult) {\n            if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n                console.log(asyncResult.error.message);\n            }\n        });\n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], options?: SetSelectedDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Données à définir. Valeur de type String ou [Office. CoercionType](xref:office!Office.CoercionType:enum) , tableau 2D ou objet TableData.


        Si la valeur de `data` est :


        - Une chaîne : Du texte brut ou tout élément dont le type peut être forcé en type string sera inséré. Dans Excel, vous pouvez également spécifier des données en tant que formule valide pour ajouter cette formule à la cellule sélectionnée. Par exemple, la définition du paramètre data sur "=SUM(A1:A5)" totalisera les valeurs de la plage spécifiée. Toutefois, après avoir défini une formule sur la cellule liée, vous ne pouvez pas lire la formule ajoutée (ni les formules préexistantes) à partir de la cellule liée. Si vous appelez la méthode Document.getSelectedDataAsync sur la cellule sélectionnée pour en lire les données, la méthode peut renvoyer uniquement les données affichées dans la cellule (le résultat de la formule).


        - Un tableau de tableaux (« matrice ») : Des données tabulaires sans en-tête seront insérées. Par exemple, pour écrire des données sur trois lignes dans deux colonnes, vous pouvez transmettre un tableau comme suit : \[ \[ « R1C1 », « R1C2 » \] , \[ « R2C1 », « R2C2 » \] , \[ « R3C1 », « R3C2 » \] \] . Pour écrire une seule colonne de trois lignes, transmettez un tableau comme suit : \[ \[ « R1C1 » \] , \[ « R2C1 » \] , \[ « R3C1 »\]\]


        Dans Excel, vous pouvez également spécifier le paramètre data en tant que tableau de tableaux contenant des formules valides pour les ajouter aux cellules sélectionnées. Par exemple, si aucune autre donnée n’est remplacée, la définition des données sur \[ \[ "= Sum (a1 : a5)", "= Average (a1 : a5)" \] \] ajoutera ces deux formules à la sélection. Comme lors de la définition d’une formule sur une cellule unique en tant que « texte », vous ne pouvez pas lire les formules ajoutées (ni les formules préexistantes) après leur définition. Vous pouvez uniquement lire les résultats des formules.


        - Un objet TableData : Un tableau avec des en-têtes est inséré. Dans Excel, si vous spécifiez des formules dans l’objet TableData que vous transmettez au paramètre Data, vous risquez de ne pas obtenir les résultats attendus en raison de la fonctionnalité « colonnes calculées » d’Excel, qui duplique automatiquement les formules dans une colonne. Pour contourner ce contournement lorsque vous souhaitez écrire `data` des formules contenant des formules dans un tableau sélectionné, essayez de spécifier les données sous la forme d’un tableau de tableaux (au lieu d’un objet TableData) et spécifiez l’coercionType en tant que Microsoft. Office. Matrix ou "Matrix". Toutefois, cette technique bloque la fonctionnalité « colonnes calculées » uniquement lorsque l’une des conditions suivantes est remplie : (1) vous écrivez sur toutes les cellules de la colonne ou (2) il y a déjà au moins deux formules différentes dans la colonne.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: options
      description: Fournit des options permettant d’insérer des données dans la sélection.
      type: <xref uid="office!Office.SetSelectedDataOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La propriété AsyncResult. Value renvoie toujours undefined, car il n’existe aucun objet ni aucune donnée à récupérer.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setSelectedDataAsync(data, callback)
  uid: office!Office.Document#setSelectedDataAsync:member(2)
  package: office!
  fullName: setSelectedDataAsync(data, callback)
  summary: Écrit les données spécifiées dans la sélection actuelle.
  remarks: >-
    **Ensembles de conditions requises**:


    - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion)<!-- -->, (lorsque vous utilisez `Office.CoercionType.Html`<!-- -->)


    - [ImageCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets) (lors de l’utilisation de `Office.CoercionType.Image`<!-- -->)


    - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lors de l’utilisation de `Office.CoercionType.Matrix`<!-- -->)


    - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lors de l’utilisation de `Office.CoercionType.Ooxml`<!-- -->)


    - [Selection](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#selection)


    - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lors de l’utilisation de `Office.CoercionType.Table`<!-- -->)


    - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lors de l’utilisation de `Office.CoercionType.Text`<!-- -->)


    - [ImageCoercion 1,2](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/image-coercion-requirement-sets#imagecoercion-12) (en cas d’utilisation `Office.CoercionType.XmlSvg`<!-- -->)


    **Comportements propres à l’application**


    Les actions suivantes spécifiques à l’application s’appliquent lors de l’écriture de données dans une sélection.


    <table> <tr> <td>Word</td> <td>S’il n’y a aucune sélection et que le point d’insertion se trouve à un emplacement valide, le spécifié `data` est inséré au point d’insertion.</td> <td>S' `data` il s’agit d’une chaîne, le texte spécifié est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un tableau de tableaux (« matrice ») ou un objet TableData, un nouveau tableau Word est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est html, le code HTML spécifié est inséré. (**Important**: si l’un des éléments HTML que vous insérez n’est pas valide, Word ne génère pas d’erreur. Word insère autant de code HTML que possible et omet toutes les données non valides.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est Office Open XML, le code XML spécifié est inséré.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un flux d’image encodé en base64, l’image spécifiée est insérée.</td></tr></td> </tr> <tr> <td></td> <td>S’il existe une sélection</td> <td>Il est remplacé par le suivant les `data` mêmes règles que ci-dessus.</td> </tr> <tr> <td></td> <td>Insérer des images</td> <td>Les images insérées sont placées en ligne. Les paramètres imageLeft et imageTop sont ignorés. Les proportions de l’image sont toujours verrouillées. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr>


    <tr> <td>Excel</td> <td>Si une seule cellule est sélectionnée</td> <td>S' `data` il s’agit d’une chaîne, le texte spécifié est inséré en tant que valeur de la cellule active.</td> </tr> <tr> <td></td> <td></td> <td>Si `data` est un tableau de tableaux (« matrice »), l’ensemble spécifié de lignes et de colonnes est inséré, à condition qu’aucune autre donnée des cellules environnantes ne soit remplacée.</td> </tr> <tr> <td></td> <td></td> <td>S' `data` il s’agit d’un objet TableData, un nouveau tableau Excel avec l’ensemble spécifié de lignes et d’en-têtes est inséré, à condition qu’aucune autre donnée des cellules environnantes ne soit remplacée.</td> </tr> <tr> <td></td> <td>Si plusieurs cellules sont sélectionnées</td><td>If the shape does not match the shape of `data`<!-- -->, une erreur est renvoyée.</td> </tr> <tr> <td></td> <td></td> <td>If the shape of the selection exactly matches the shape of `data`<!-- -->, les valeurs des cellules sélectionnées sont mises à jour en fonction des valeurs de `data`<!-- -->.</td> </tr> <tr> <td></td> <td>Insérer des images</td> <td>Les images insérées sont flottantes. Les paramètres imageLeft et imageTop de position sont indiqués par rapport à la ou aux cellule(s) actuellement sélectionnée(s). Les valeurs imageLeft et imageTop négatives sont autorisées et éventuellement réajustées par Excel pour positionner l’image dans une feuille de calcul. Les proportions sont verrouillées à moins que les paramètres imageWidth et imageHeight soient tous deux indiqués. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr> <tr> <td></td> <td>Tous les autres cas</td> <td>Une erreur est renvoyée.</td> </tr>


    <tr> <td>Excel sur le web</td> <td>En plus des comportements décrits pour Excel ci-dessus, ces limites s’appliquent lors de l’écriture de données dans Excel sur le Web</td> <td>Le nombre total de cellules que vous pouvez écrire dans une feuille de calcul avec le `data` paramètre ne peut pas dépasser 20 000 dans un appel unique à cette méthode.</td> </tr> <tr> <td></td> <td></td> <td>Le nombre de groupes de mise en forme transmis au `cellFormat` paramètre ne peut pas dépasser 100. Un groupe de mise en forme se compose d’un ensemble de mises en forme appliquées à une plage de cellules donnée.</td> </tr>


    <tr> <td>PowerPoint</td> <td>Insérer une image</td> <td>Les images insérées sont flottantes. Les paramètres de position imageLeft et imageTop sont facultatifs, mais si fournis, les deux doivent être présents. Si une seule valeur est indiquée, elle sera ignorée. Les valeurs imageLeft et imageTop négatives sont autorisées et peuvent positionner une image en dehors d’une diapositive. Si aucun paramètre facultatif n’est indiqué et qu’une diapositive présente un espace réservé, l’image remplacera l’espace réservé dans la diapositive. Les proportions de l’image seront verrouillées, sauf si les paramètres imageWidth et imageHeight sont tous deux indiqués. Si seul un des paramètres imageWidth et imageHeight est donné, l’autre valeur est automatiquement redimensionnée pour conserver les proportions d’origine.</td> </tr> </table>


    **Comportements propres aux types**


    <table> <tr> <td>`Office.CoercionType.XmlSvg`</td> <td>(Excel uniquement) : limite de taille de 64 Ko pour les insertions SVG en tant que Build 16.0.11526.10000.</td> </tr> </table>


    **Hôtes**


    Les valeurs possibles pour le paramètre [Office. CoercionType](xref:office!Office.CoercionType:enum) varient en fonction de l’hôte.


    <table> <tr> <th>Hôte</th> <th>coercionType pris en charge</th> </tr> <tr> <td>Excel, PowerPoint, Project et Word</td> <td>`Office.CoercionType.Text` chaîne</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Matrix` (tableau de tableaux)</td> </tr> <tr> <td>Excel et Word</td> <td>`Office.CoercionType.Table` (Objet TableData)</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Html`</td> </tr> <tr> <td>Word</td> <td>`Office.CoercionType.Ooxml` (Office Open XML)</td> </tr> <tr> <td>PowerPoint sur le Web et Windows</td> <td>`Office.CoercionType.SlideRange`</td> </tr> <tr> <td>Excel, PowerPoint et Word</td> <td>`Office.CoercionType.XmlSvg`</td> </tr> </table>
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setSelectedDataAsync(data: string | TableData | any[][], callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: data
      description: >-
        Données à définir. Valeur de type String ou [Office. CoercionType](xref:office!Office.CoercionType:enum) , tableau 2D ou objet TableData.


        Si la valeur de `data` est :


        - Une chaîne : Du texte brut ou tout élément dont le type peut être forcé en type string sera inséré. Dans Excel, vous pouvez également spécifier des données en tant que formule valide pour ajouter cette formule à la cellule sélectionnée. Par exemple, la définition du paramètre data sur "=SUM(A1:A5)" totalisera les valeurs de la plage spécifiée. Toutefois, après avoir défini une formule sur la cellule liée, vous ne pouvez pas lire la formule ajoutée (ni les formules préexistantes) à partir de la cellule liée. Si vous appelez la méthode Document.getSelectedDataAsync sur la cellule sélectionnée pour en lire les données, la méthode peut renvoyer uniquement les données affichées dans la cellule (le résultat de la formule).


        - Un tableau de tableaux (« matrice ») : Des données tabulaires sans en-tête seront insérées. Par exemple, pour écrire des données sur trois lignes dans deux colonnes, vous pouvez transmettre un tableau comme suit : \[ \[ « R1C1 », « R1C2 » \] , \[ « R2C1 », « R2C2 » \] , \[ « R3C1 », « R3C2 » \] \] . Pour écrire une seule colonne de trois lignes, transmettez un tableau comme suit : \[ \[ « R1C1 » \] , \[ « R2C1 » \] , \[ « R3C1 »\]\]


        Dans Excel, vous pouvez également spécifier le paramètre data en tant que tableau de tableaux contenant des formules valides pour les ajouter aux cellules sélectionnées. Par exemple, si aucune autre donnée n’est remplacée, la définition des données sur \[ \[ "= Sum (a1 : a5)", "= Average (a1 : a5)" \] \] ajoutera ces deux formules à la sélection. Comme lors de la définition d’une formule sur une cellule unique en tant que « texte », vous ne pouvez pas lire les formules ajoutées (ni les formules préexistantes) après leur définition. Vous pouvez uniquement lire les résultats des formules.


        - Un objet TableData : Un tableau avec des en-têtes est inséré. Dans Excel, si vous spécifiez des formules dans l’objet TableData que vous transmettez au paramètre Data, vous risquez de ne pas obtenir les résultats attendus en raison de la fonctionnalité « colonnes calculées » d’Excel, qui duplique automatiquement les formules dans une colonne. Pour contourner ce contournement lorsque vous souhaitez écrire `data` des formules contenant des formules dans un tableau sélectionné, essayez de spécifier les données sous la forme d’un tableau de tableaux (au lieu d’un objet TableData) et spécifiez l’coercionType en tant que Microsoft. Office. Matrix ou "Matrix". Toutefois, cette technique bloque la fonctionnalité « colonnes calculées » uniquement lorsque l’une des conditions suivantes est remplie : (1) vous écrivez sur toutes les cellules de la colonne ou (2) il y a déjà au moins deux formules différentes dans la colonne.
      type: string | <xref uid="office!Office.TableData:class" /> | any[][]
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->. La propriété AsyncResult. Value renvoie toujours undefined, car il n’existe aucun objet ni aucune donnée à récupérer.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(1)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, options, callback)
  summary: >-
    Documents de projet uniquement. Définir le champ de tâche pour l’ID de tâche spécifié.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: fieldId
      description: Champs de tâche.
      type: number
    - id: fieldValue
      description: Valeur du champ cible.
      type: string | number | boolean | object
    - id: options
      description: Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.
      type: <xref uid="office!Office.AsyncContextOptions:interface" />
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: ''
- name: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  uid: office!Office.Document#setTaskFieldAsync:member(2)
  package: office!
  fullName: setTaskFieldAsync(taskId, fieldId, fieldValue, callback)
  summary: >-
    Documents de projet uniquement. Définir le champ de tâche pour l’ID de tâche spécifié.


    **Important**: cette API fonctionne uniquement dans Project 2016 sur le bureau Windows.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setTaskFieldAsync(taskId: string, fieldId: number, fieldValue: string | number | boolean | object, callback?: (result: AsyncResult<void>) => void): void;'
    parameters:
    - id: taskId
      description: Soit une chaîne, soit une valeur de l’ID de tâche.
      type: string
    - id: fieldId
      description: Champs de tâche.
      type: number
    - id: fieldValue
      description: Valeur du champ cible.
      type: string | number | boolean | object
    - id: callback
      description: Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;void&gt;) =&gt; void'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following code example calls getSelectedTaskAsync to get the GUID of the task that's\n// currently selected in a task view. Then it sets two task field values by calling\n// setTaskFieldAsync recursively.\n// The getSelectedTaskAsync method used in the example requires that a task view\n// (for example, Task Usage) is the active view and that a task is selected. See the\n// addHandlerAsync method for an example that activates a button based on the active view type.\n// The example assumes your add-in has a reference to the jQuery library and that the\n// following page controls are defined in the content div in the page body:\n// <input id=\"set-info\" type=\"button\" value=\"Set info\" /><br />\n// <span id=\"message\"></span>\n\n(function () {\n    \"use strict\";\n\n    // The initialize function must be run each time a new page is loaded.\n    Office.initialize = function (reason) {\n        $(document).ready(function () {\n            \n            // After the DOM is loaded, add-in-specific code can run.\n            app.initialize();\n            $('#set-info').click(setTaskInfo);\n        });\n    };\n\n    // Get the GUID of the task, and then get the task fields.\n    function setTaskInfo() {\n        getTaskGuid().then(\n            function (data) {\n                setTaskFields(data);\n            }\n        );\n    }\n\n    // Get the GUID of the selected task.\n    function getTaskGuid() {\n        var defer = $.Deferred();\n        Office.context.document.getSelectedTaskAsync(\n            function (result) {\n                if (result.status === Office.AsyncResultStatus.Failed) {\n                    onError(result.error);\n                }\n                else {\n                    defer.resolve(result.value);\n                }\n            }\n        );\n        return defer.promise();\n    }\n\n    // Set the specified fields for the selected task.\n    function setTaskFields(taskGuid) {\n        var targetFields = [Office.ProjectTaskFields.Active, Office.ProjectTaskFields.Notes];\n        var fieldValues = [true, 'Notes for the task.'];\n\n        // Set the field value. If the call is successful, set the next field.\n        for (var i = 0; i < targetFields.length; i++) {\n            Office.context.document.setTaskFieldAsync(\n                taskGuid,\n                targetFields[i],\n                fieldValues[i],\n                function (result) {\n                    if (result.status === Office.AsyncResultStatus.Succeeded) {\n                        i++;\n                    }\n                    else {\n                        onError(result.error);\n                    }\n                }\n            );\n        }\n        $('#message').html('Field values set');\n    }\n\n    function onError(error) {\n        app.showNotification(error.name + ' ' + error.code + ': ' + error.message);\n    }\n})();\n```"
metadata:
  ms.openlocfilehash: 2a56c1459ba92f4cc0062babd1a613bbbd51928f
  ms.sourcegitcommit: 3bab97ab3b91da7cca497f6fc895408a76bd8b46
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 11/18/2020
  ms.locfileid: "49143539"
