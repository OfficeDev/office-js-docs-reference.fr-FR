### YamlMime:UniversalReference
items:
  - uid: 'office!OfficeExtension.Error:class'
    summary: 'Objet Error renvoyé par`context.sync()`<!-- -->, si une promesse est rejetée en raison d’une erreur lors du traitement de la demande.'
    name: OfficeExtension.Error
    fullName: OfficeExtension.Error
    langs:
      - typeScript
    type: class
    package: office!
    remarks: |-


      #### <a name="examples"></a>Exemples

      ```javascript
      // Run a batch operation against the Word object model.
      Word.run(function (context) {

          // Create a proxy object for the document body.
          var body = context.document.body;

          // Queue a command to insert text in to the beginning of the body.
          // This will cause an OfficeExtension.Error.
          body.insertText(0);

          // Synchronize the document state by executing the queued-up commands,
          // and return a promise to indicate task completion.
          return context.sync();
      })
      .catch(function (error) {
          if (error instanceof OfficeExtension.Error) {
              console.log('Error code and message: ' + error.toString());
          }
      });
      ```
    children:
      - 'office!OfficeExtension.Error#code:member'
      - 'office!OfficeExtension.Error#debugInfo:member'
      - 'office!OfficeExtension.Error#innerError:member'
      - 'office!OfficeExtension.Error#message:member'
      - 'office!OfficeExtension.Error#name:member'
      - 'office!OfficeExtension.Error#stack:member'
      - 'office!OfficeExtension.Error#traceMessages:member'
  - uid: 'office!OfficeExtension.Error#code:member'
    summary: "Chaîne de code d’erreur, telle que «\_InvalidArgument\_»."
    name: code
    fullName: code
    langs:
      - typeScript
    type: property
    syntax:
      content: 'code: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#debugInfo:member'
    summary: 'Informations de débogage (utile pour la journalisation détaillée de l’erreur, par exemple, via`JSON.stringify(...)`<!-- -->).'
    name: debugInfo
    fullName: debugInfo
    langs:
      - typeScript
    type: property
    syntax:
      content: 'debugInfo: DebugInfo;'
      return:
        type:
          - 'office!OfficeExtension.DebugInfo:interface'
  - uid: 'office!OfficeExtension.Error#innerError:member'
    summary: 'Erreur interne, le cas échéant.'
    name: innerError
    fullName: innerError
    langs:
      - typeScript
    type: property
    syntax:
      content: 'innerError: Error;'
      return:
        type:
          - 'office!OfficeExtension.Error:class'
  - uid: 'office!OfficeExtension.Error#message:member'
    summary: Message d’erreur transmis à partir de l’application Office hôte.
    name: message
    fullName: message
    langs:
      - typeScript
    type: property
    syntax:
      content: 'message: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#name:member'
    summary: "Nom de l’erreur\_: «\_objet officeextension. Error\_»."
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#stack:member'
    summary: 'Trace de la pile, le cas échéant.'
    name: stack
    fullName: stack
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stack: string;'
      return:
        type:
          - string
  - uid: 'office!OfficeExtension.Error#traceMessages:member'
    summary: 'Messages de suivi (le cas échéant) qui ont été `context.trace()` ajoutés via une invocation avant d’appeler`context.sync()`<!-- -->. Si une erreur s’est produite, elle contient tous les messages de suivi qui ont été exécutés avant l’erreur. Ces messages peuvent vous aider à surveiller la séquence d’exécution du programme et à détecter la cause de l’erreur.'
    name: traceMessages
    fullName: traceMessages
    langs:
      - typeScript
    type: property
    syntax:
      content: 'traceMessages: string[];'
      return:
        type:
          - 'string[]'
        description: |-


          #### <a name="examples"></a>範例

          ```javascript
          // The following example shows how you can instrument a batch of commands
          // to determine where an error occurred. The first batch successfully
          // inserts the first two paragraphs into the document and cause no errors.
          // The second batch successfully inserts the third and fourth paragraphs
          // but fails in the call to insert the fifth paragraph. All other commands
          // after the failed command in the batch are not executed, including the
          // command that adds the fifth trace message. In this case, the error
          // occurred after the fourth paragraph was inserted, and before adding the
          // fifth trace message.

          // Run a batch operation against the Word object model.
          Word.run(function (context) {

              // Create a proxy object for the document body.
              var body = context.document.body;

              // Queue a command to insert the paragraph at the end of the document body.
              // Start a batch of commands.
              body.insertParagraph('1st paragraph', Word.InsertLocation.end);
              // Queue a command for instrumenting this part of the batch.
              context.trace('1st paragraph successful');

              body.insertParagraph('2nd paragraph', Word.InsertLocation.end);
              context.trace('2nd paragraph successful');

              // Synchronize the document state by executing the queued-up commands,
              // and return a promise to indicate task completion.
              return context.sync().then(function () {
                  // Queue a command to insert the paragraph at the end of the document body.
                  // Start a new batch of commands.
                  body.insertParagraph('3rd paragraph', Word.InsertLocation.end);
                  context.trace('3rd paragraph successful');

                  body.insertParagraph('4th paragraph', Word.InsertLocation.end);
                  context.trace('4th paragraph successful');

                  // This command will cause an error. The trace messages in the queue up to
                  // this point will be available via Error.traceMessages.
                  body.insertParagraph(0, '5th paragraph', Word.InsertLocation.end);
                  // Queue a command for instrumenting this part of the batch.
                  // This trace message will not be set on Error.traceMessages.
                  context.trace('5th paragraph successful');
              }).then(context.sync);
          })
          .catch(function (error) {
              if (error instanceof OfficeExtension.Error) {
                  console.log('Trace messages: ' + error.traceMessages);
              }
          });

          // Output: "Trace messages: 3rd paragraph successful,4th paragraph successful"
          ```
references:
  - uid: 'office!OfficeExtension.DebugInfo:interface'
    name: DebugInfo
  - uid: 'office!OfficeExtension.Error:class'
    name: Error