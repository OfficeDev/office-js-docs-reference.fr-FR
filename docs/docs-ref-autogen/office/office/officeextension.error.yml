### YamlMime:TSType
name: OfficeExtension.Error
uid: office!OfficeExtension.Error:class
package: office!
fullName: OfficeExtension.Error
summary: Objet d’erreur renvoyé par `context.sync()`<!-- -->, si une promesse est rejetée en raison d’une erreur lors du traitement de la demande.
remarks: "\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the document body.\n    var body = context.document.body;\n\n    // Queue a command to insert text in to the beginning of the body.\n    // This will cause an OfficeExtension.Error.\n    body.insertText(0);\n\n    // Synchronize the document state by executing the queued-up commands,\n    // and return a promise to indicate task completion.\n    return context.sync();\n})\n.catch(function (error) {\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Error code and message: ' + error.toString());\n    }\n});\n```"
isPreview: false
isDeprecated: false
type: class
properties:
- name: code
  uid: office!OfficeExtension.Error#code:member
  package: office!
  fullName: code
  summary: Chaîne de code d’erreur, telle que « InvalidArgument ».
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'code: string;'
    return:
      type: string
- name: debugInfo
  uid: office!OfficeExtension.Error#debugInfo:member
  package: office!
  fullName: debugInfo
  summary: Informations de débogage (utiles pour la journalisation détaillée de l’erreur, c’est-à-dire via `JSON.stringify(...)`<!-- -->).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'debugInfo: DebugInfo;'
    return:
      type: <xref uid="office!OfficeExtension.DebugInfo:interface" />
- name: innerError
  uid: office!OfficeExtension.Error#innerError:member
  package: office!
  fullName: innerError
  summary: Erreur interne, le cas échéant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'innerError: Error;'
    return:
      type: <xref uid="office!OfficeExtension.Error:class" />
- name: message
  uid: office!OfficeExtension.Error#message:member
  package: office!
  fullName: message
  summary: Message d’erreur transmis à partir de l’application Office hôte.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'message: string;'
    return:
      type: string
- name: name
  uid: office!OfficeExtension.Error#name:member
  package: office!
  fullName: name
  summary: 'Nom de l’erreur : « OfficeExtension.Error ».'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: stack
  uid: office!OfficeExtension.Error#stack:member
  package: office!
  fullName: stack
  summary: Trace de pile, le cas échéant.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'stack: string;'
    return:
      type: string
- name: traceMessages
  uid: office!OfficeExtension.Error#traceMessages:member
  package: office!
  fullName: traceMessages
  summary: Suivi des messages (le cas cas) qui ont été ajoutés via un `context.trace()` appel avant d’appeler `context.sync()`<!-- -->. S’il y a eu une erreur, il contient tous les messages de suivi qui ont été exécutés avant que l’erreur ne se soit produite. Ces messages peuvent vous aider à surveiller la séquence d’exécution du programme et à détecter le cas de l’erreur.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'traceMessages: string[];'
    return:
      type: string[]
      description: "\n\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// The following example shows how you can instrument a batch of commands\n// to determine where an error occurred. The first batch successfully\n// inserts the first two paragraphs into the document and cause no errors.\n// The second batch successfully inserts the third and fourth paragraphs\n// but fails in the call to insert the fifth paragraph. All other commands\n// after the failed command in the batch are not executed, including the\n// command that adds the fifth trace message. In this case, the error\n// occurred after the fourth paragraph was inserted, and before adding the\n// fifth trace message.\n\n// Run a batch operation against the Word object model.\nWord.run(function (context) {\n\n    // Create a proxy object for the document body.\n    var body = context.document.body;\n\n    // Queue a command to insert the paragraph at the end of the document body.\n    // Start a batch of commands.\n    body.insertParagraph('1st paragraph', Word.InsertLocation.end);\n    // Queue a command for instrumenting this part of the batch.\n    context.trace('1st paragraph successful');\n\n    body.insertParagraph('2nd paragraph', Word.InsertLocation.end);\n    context.trace('2nd paragraph successful');\n\n    // Synchronize the document state by executing the queued-up commands,\n    // and return a promise to indicate task completion.\n    return context.sync().then(function () {\n        // Queue a command to insert the paragraph at the end of the document body.\n        // Start a new batch of commands.\n        body.insertParagraph('3rd paragraph', Word.InsertLocation.end);\n        context.trace('3rd paragraph successful');\n\n        body.insertParagraph('4th paragraph', Word.InsertLocation.end);\n        context.trace('4th paragraph successful');\n\n        // This command will cause an error. The trace messages in the queue up to\n        // this point will be available via Error.traceMessages.\n        body.insertParagraph(0, '5th paragraph', Word.InsertLocation.end);\n        // Queue a command for instrumenting this part of the batch.\n        // This trace message will not be set on Error.traceMessages.\n        context.trace('5th paragraph successful');\n    }).then(context.sync);\n})\n.catch(function (error) {\n    if (error instanceof OfficeExtension.Error) {\n        console.log('Trace messages: ' + error.traceMessages);\n    }\n});\n\n// Output: \"Trace messages: 3rd paragraph successful,4th paragraph successful\"\n```"
metadata:
  ms.openlocfilehash: 831280d0f81efd0294d556842036ed1e439657dd
  ms.sourcegitcommit: a8a86cfcaff5ad7dacc653d63502c76b1fedbebe
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 03/26/2021
  ms.locfileid: "51358682"
