### YamlMime:UniversalReference
items:
  - uid: 'office!Office.CustomXmlPart:interface'
    summary: '<span data-ttu-id="8f8e1-101">Cet objet représente un seul objet CustomXMLPart d’une collection [Office. CustomXmlParts](xref:office!Office.CustomXmlParts:interface) .</span><span class="sxs-lookup"><span data-stu-id="8f8e1-101">Represents a single CustomXMLPart in an [Office.CustomXmlParts](xref:office!Office.CustomXmlParts:interface) collection.</span></span>'
    remarks: '<span data-ttu-id="8f8e1-102">**Hôtes**: Word</span><span class="sxs-lookup"><span data-stu-id="8f8e1-102">**Hosts**: Word</span></span>'
    name: Office.CustomXmlPart
    fullName: Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office!
    children:
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
      - 'office!Office.CustomXmlPart#builtIn:member'
      - 'office!Office.CustomXmlPart#deleteAsync:member(1)'
      - 'office!Office.CustomXmlPart#deleteAsync:member(2)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
      - 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
      - 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
      - 'office!Office.CustomXmlPart#id:member'
      - 'office!Office.CustomXmlPart#namespaceManager:member'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
      - 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(1)'
    summary: <span data-ttu-id="8f8e1-103">Ajoute un gestionnaire d’événements à l’objet à l’aide du type d’événement spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-103">Adds an event handler to the object using the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-104">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-104">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="8f8e1-105">Vous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-105">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="8f8e1-106">Spécifie le type d’événement à ajouter.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-106">Specifies the type of event to add.</span></span> <span data-ttu-id="8f8e1-107">Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-107">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="8f8e1-108">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-108"></span></span><!-- --><span data-ttu-id="8f8e1-109">, et`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-109">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="8f8e1-110">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-110"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="8f8e1-111">Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office. propriété NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-111">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="8f8e1-112">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-112">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="8f8e1-113">ou [Office. NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-113">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: options
          description: '<span data-ttu-id="8f8e1-114">Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-114">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="8f8e1-115">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-115">Optional.</span></span> <span data-ttu-id="8f8e1-116">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-116">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-117">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-117"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync:member(2)'
    summary: <span data-ttu-id="8f8e1-118">Ajoute un gestionnaire d’événements à l’objet à l’aide du type d’événement spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-118">Adds an event handler to the object using the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-119">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-119">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      <span data-ttu-id="8f8e1-120">Vous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-120">You can add multiple event handlers for the specified eventType as long as the name of each event handler function is unique.</span></span>

      #### <a name="examples"></a><span data-ttu-id="8f8e1-121">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-121">Examples</span></span>

      ```javascript
      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="8f8e1-122">Spécifie le type d’événement à ajouter.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-122">Specifies the type of event to add.</span></span> <span data-ttu-id="8f8e1-123">Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-123">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="8f8e1-124">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-124"></span></span><!-- --><span data-ttu-id="8f8e1-125">, et`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-125">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="8f8e1-126">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-126"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: '<span data-ttu-id="8f8e1-127">Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office. propriété NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-127">The event handler function to add, whose only parameter is of type [Office.NodeDeletedEventArgs](xref:office!Office.NodeDeletedEventArgs:interface)</span></span><!-- --><span data-ttu-id="8f8e1-128">, [Office. NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-128">, [Office.NodeInsertedEventArgs](xref:office!Office.NodeInsertedEventArgs:interface)</span></span><!-- --><span data-ttu-id="8f8e1-129">ou [Office. NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-129">, or [Office.NodeReplacedEventArgs](xref:office!Office.NodeReplacedEventArgs:interface)</span></span>'
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="8f8e1-130">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-130">Optional.</span></span> <span data-ttu-id="8f8e1-131">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-131">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-132">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-132"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#builtIn:member'
    summary: "<span data-ttu-id=\"8f8e1-133\">True, si la partie XML personnalisée est intégrée\_; Sinon, false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"8f8e1-133\">True, if the custom XML part is built in; otherwise false.</span></span>"
    name: builtIn
    fullName: builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f8e1-134">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-134">Examples</span></span>

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(1)'
    summary: <span data-ttu-id="8f8e1-135">Supprime la partie XML personnalisée.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-135">Deletes the Custom XML Part.</span></span>
    remarks: '<span data-ttu-id="8f8e1-136">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-136">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'deleteAsync(options, callback)'
    fullName: 'deleteAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="8f8e1-137">Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-137">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="8f8e1-138">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-138">Optional.</span></span> <span data-ttu-id="8f8e1-139">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-139">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-140">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-140"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#deleteAsync:member(2)'
    summary: <span data-ttu-id="8f8e1-141">Supprime la partie XML personnalisée.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-141">Deletes the Custom XML Part.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-142">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-142">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="8f8e1-143">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-143">Examples</span></span>

      ```javascript
      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: deleteAsync(callback)
    fullName: deleteAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="8f8e1-144">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-144">Optional.</span></span> <span data-ttu-id="8f8e1-145">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-145">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-146">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-146"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#deleteAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(1)'
    summary: <span data-ttu-id="8f8e1-147">Obtient de manière asynchrone les CustomXmlNodes de cette partie XML personnalisée qui correspondent au XPath spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-147">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>
    remarks: '<span data-ttu-id="8f8e1-148">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-148">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: <span data-ttu-id="8f8e1-149">Expression XPath qui spécifie les nœuds à retourner.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-149">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="8f8e1-150">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-150">Required.</span></span>
          type:
            - string
        - id: options
          description: '<span data-ttu-id="8f8e1-151">Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-151">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="8f8e1-152">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-152">Optional.</span></span> <span data-ttu-id="8f8e1-153">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-153">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-154">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-154"></span></span> <span data-ttu-id="8f8e1-155">La `value` propriété du résultat est un tableau d’objets CustomXmlNode qui représentent les nœuds spécifiés par l’expression XPath transmise au paramètre XPath.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-155">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync:member(2)'
    summary: <span data-ttu-id="8f8e1-156">Obtient de manière asynchrone les CustomXmlNodes de cette partie XML personnalisée qui correspondent au XPath spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-156">Asynchronously gets any CustomXmlNodes in this custom XML part which match the specified XPath.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-157">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-157">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="8f8e1-158">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-158">Examples</span></span>

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: <span data-ttu-id="8f8e1-159">Expression XPath qui spécifie les nœuds à retourner.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-159">An XPath expression that specifies the nodes you want returned.</span></span> <span data-ttu-id="8f8e1-160">Obligatoire.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-160">Required.</span></span>
          type:
            - string
        - id: callback
          description: '<span data-ttu-id="8f8e1-161">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-161">Optional.</span></span> <span data-ttu-id="8f8e1-162">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-162">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-163">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-163"></span></span> <span data-ttu-id="8f8e1-164">La `value` propriété du résultat est un tableau d’objets CustomXmlNode qui représentent les nœuds spécifiés par l’expression XPath transmise au paramètre XPath.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-164">The `value` property of the result is an array of CustomXmlNode objects that represent the nodes specified by the XPath expression passed to the xPath parameter.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(1)'
    summary: <span data-ttu-id="8f8e1-165">Obtient de manière asynchrone le code XML contenu dans cette partie XML personnalisée.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-165">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: '<span data-ttu-id="8f8e1-166">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-166">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: '<span data-ttu-id="8f8e1-167">Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-167">Provides an option for preserving context data of any type, unchanged, for use in a callback.</span></span>'
          type:
            - 'office!Office.AsyncContextOptions:interface'
        - id: callback
          description: '<span data-ttu-id="8f8e1-168">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-168">Optional.</span></span> <span data-ttu-id="8f8e1-169">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-169">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-170">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-170"></span></span> <span data-ttu-id="8f8e1-171">La `value` propriété du résultat est une chaîne qui contient le code XML de l’objet CustomXMLPart référencé.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-171">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync:member(2)'
    summary: <span data-ttu-id="8f8e1-172">Obtient de manière asynchrone le code XML contenu dans cette partie XML personnalisée.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-172">Asynchronously gets the XML inside this custom XML part.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-173">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-173">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="8f8e1-174">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-174">Examples</span></span>

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: '<span data-ttu-id="8f8e1-175">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-175">Optional.</span></span> <span data-ttu-id="8f8e1-176">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-176">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-177">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-177"></span></span> <span data-ttu-id="8f8e1-178">La `value` propriété du résultat est une chaîne qui contient le code XML de l’objet CustomXMLPart référencé.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-178">The `value` property of the result is a string that contains the XML of the referenced CustomXmlPart object.</span></span>'
          type:
            - 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
  - uid: 'office!Office.CustomXmlPart#id:member'
    summary: <span data-ttu-id="8f8e1-179">Obtient le GUID de CustomXMLPart.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-179">Gets the GUID of the CustomXMLPart.</span></span>
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f8e1-180">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-180">Examples</span></span>

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: 'office!Office.CustomXmlPart#namespaceManager:member'
    summary: '<span data-ttu-id="8f8e1-181">Obtient l’ensemble des mappages de préfixes d’espace de noms ([Office. CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-181">Gets the set of namespace prefix mappings ([Office.CustomXmlPrefixMappings](xref:office!Office.CustomXmlPrefixMappings:interface)</span></span><!-- --><span data-ttu-id="8f8e1-182">) utilisé sur le CustomXmlPart actif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-182">) used against the current CustomXmlPart.</span></span>'
    name: namespaceManager
    fullName: namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - 'office!Office.CustomXmlPrefixMappings:interface'
        description: |-


          #### <a name="examples"></a><span data-ttu-id="8f8e1-183">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-183">Examples</span></span>

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(1)'
    summary: <span data-ttu-id="8f8e1-184">Supprime un gestionnaire d’événements pour le type d’événement spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-184">Removes an event handler for the specified event type.</span></span>
    remarks: '<span data-ttu-id="8f8e1-185">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-185">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>'
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="8f8e1-186">Spécifie le type d’événement à supprimer.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-186">Specifies the type of event to remove.</span></span> <span data-ttu-id="8f8e1-187">Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-187">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="8f8e1-188">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-188"></span></span><!-- --><span data-ttu-id="8f8e1-189">, et`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-189">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="8f8e1-190">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-190"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: <span data-ttu-id="8f8e1-191">Nom du gestionnaire à supprimer.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-191">The name of the handler to remove.</span></span>
          type:
            - '(result: any) => void'
        - id: options
          description: <span data-ttu-id="8f8e1-192">Fournit des options permettant de déterminer le gestionnaire d’événements ou les gestionnaires supprimés.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-192">Provides options to determine which event handler or handlers are removed.</span></span>
          type:
            - 'office!Office.RemoveHandlerOptions:interface'
        - id: callback
          description: '<span data-ttu-id="8f8e1-193">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-193">Optional.</span></span> <span data-ttu-id="8f8e1-194">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-194">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-195">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-195"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync:member(2)'
    summary: <span data-ttu-id="8f8e1-196">Supprime un gestionnaire d’événements pour le type d’événement spécifié.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-196">Removes an event handler for the specified event type.</span></span>
    remarks: |-
      <span data-ttu-id="8f8e1-197">**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-197">**Requirement set**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)</span></span>

      #### <a name="examples"></a><span data-ttu-id="8f8e1-198">Exemples</span><span class="sxs-lookup"><span data-stu-id="8f8e1-198">Examples</span></span>

      ```javascript
      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }
      ```
    name: 'removeHandlerAsync(eventType, handler, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: '<span data-ttu-id="8f8e1-199">Spécifie le type d’événement à supprimer.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-199">Specifies the type of event to remove.</span></span> <span data-ttu-id="8f8e1-200">Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-200">For a CustomXmlPart object, the eventType parameter can be specified as `Office.EventType.NodeDeleted`</span></span><!-- --><span data-ttu-id="8f8e1-201">, `Office.EventType.NodeInserted`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-201"></span></span><!-- --><span data-ttu-id="8f8e1-202">, et`Office.EventType.NodeReplaced`</span><span class="sxs-lookup"><span data-stu-id="8f8e1-202">, and `Office.EventType.NodeReplaced`</span></span><!-- --><span data-ttu-id="8f8e1-203">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-203"></span></span>'
          type:
            - 'office!Office.EventType:enum'
        - id: handler
          description: <span data-ttu-id="8f8e1-204">Nom du gestionnaire à supprimer.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-204">The name of the handler to remove.</span></span>
          type:
            - '(result: any) => void'
        - id: callback
          description: '<span data-ttu-id="8f8e1-205">Facultatif.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-205">Optional.</span></span> <span data-ttu-id="8f8e1-206">Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)</span><span class="sxs-lookup"><span data-stu-id="8f8e1-206">A function that is invoked when the callback returns, whose only parameter is of type [Office.AsyncResult](xref:office!Office.AsyncResult:interface)</span></span><!-- --><span data-ttu-id="8f8e1-207">.</span><span class="sxs-lookup"><span data-stu-id="8f8e1-207"></span></span>'
          type:
            - 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
references:
  - uid: 'office!Office.EventType:enum'
    name: Office.EventType
  - uid: 'office!Office.AsyncContextOptions:interface'
    name: Office.AsyncContextOptions
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#addHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#deleteAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~0:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getNodesAsync~1:complex'
    name: '(result: AsyncResult<CustomXmlNode[]>) => void'
    fullName: '(result: Office.AsyncResult<Office.CustomXmlNode[]>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <
        fullName: <
      - uid: 'office!Office.CustomXmlNode:interface'
        name: CustomXmlNode
        fullName: Office.CustomXmlNode
      - name: '[]>) => void'
        fullName: '[]>) => void'
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~0:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPart#getXmlAsync~1:complex'
    name: '(result: AsyncResult<string>) => void'
    fullName: '(result: Office.AsyncResult<string>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <string>) => void
        fullName: <string>) => void
  - uid: 'office!Office.CustomXmlPrefixMappings:interface'
    name: CustomXmlPrefixMappings
  - uid: 'office!Office.RemoveHandlerOptions:interface'
    name: RemoveHandlerOptions
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~0:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void
  - uid: 'office!Office.CustomXmlPart#removeHandlerAsync~1:complex'
    name: '(result: AsyncResult<void>) => void'
    fullName: '(result: Office.AsyncResult<void>) => void'
    spec.typeScript:
      - name: '(result: '
        fullName: '(result: '
      - uid: 'office!Office.AsyncResult:interface'
        name: AsyncResult
        fullName: Office.AsyncResult
      - name: <void>) => void
        fullName: <void>) => void