### YamlMime:UniversalReference
ms.openlocfilehash: 6de66b31956353c279ae7a557d994e4522957f88
ms.sourcegitcommit: 016e17422cf62dc9f1de1809666e9244e41cc1a9
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 11/09/2018
ms.locfileid: "26233560"
items:
- uid: office.OfficeExtension.LoadOption
  summary: <span data-ttu-id="aa98c-101">Spécifie les propriétés d’un objet doivent être chargées.</span><span class="sxs-lookup"><span data-stu-id="aa98c-101">Specifies which properties of an object should be loaded.</span></span> <span data-ttu-id="aa98c-102">Cette charge qui se produit lorsque la méthode sync() est exécutée.</span><span class="sxs-lookup"><span data-stu-id="aa98c-102">This load happens when the sync() method is executed.</span></span> <span data-ttu-id="aa98c-103">Cette opération synchronise les États entre les objets Office et les objets proxy JavaScript correspondants.</span><span class="sxs-lookup"><span data-stu-id="aa98c-103">This synchronizes the states between Office objects and corresponding JavaScript proxy objects.</span></span>
  remarks: >-
    <span data-ttu-id="aa98c-104">Pour Word, la méthode recommandée pour spécifier les propriétés et l’échange d’informations est à l’aide d’un littéral de chaîne.</span><span class="sxs-lookup"><span data-stu-id="aa98c-104">For Word, the preferred method for specifying the properties and paging information is by using a string literal.</span></span> <span data-ttu-id="aa98c-105">Les deux premiers exemples montrent la meilleure façon pour demander les propriétés de taille de texte et la police des paragraphes d’une collection de paragraphe :</span><span class="sxs-lookup"><span data-stu-id="aa98c-105">The first two examples show the preferred way to request the text and font size properties for paragraphs in a paragraph collection:</span></span>


    `context.load(paragraphs, 'text, font/size');`


    `paragraphs.load('text, font/size');`


    <span data-ttu-id="aa98c-106">Voici un exemple similaire qui utilise la notation d’objet (y compris la pagination) :</span><span class="sxs-lookup"><span data-stu-id="aa98c-106">Here is a similar example using object notation (includes paging):</span></span>


    `context.load(paragraphs, {select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    `paragraphs.load({select: 'text, font/size', expand: 'font', top: 50, skip: 0});`


    <span data-ttu-id="aa98c-107">Notez que si aucune propriété spécifique n’est définie pour l’objet de police dans l’instruction select, l’instruction expand, si elle est définie seule, indique que toutes les propriétés de police sont chargées.</span><span class="sxs-lookup"><span data-stu-id="aa98c-107">Note that if we don't specify the specific properties on the font object in the select statement, the expand statement by itself would indicate that all of the font properties are loaded.</span></span>

    #### <a name="examples"></a><span data-ttu-id="aa98c-108">Exemples</span><span class="sxs-lookup"><span data-stu-id="aa98c-108">Examples</span></span>


    ```javascript

    // This example shows how to get the paragraphs in the Word document

    // along with their text and font size properties.


    // Run a batch operation against the Word object model.

    Word.run(function (context) {
        // Create a proxy object for the paragraphs collection.
        var paragraphs = context.document.body.paragraphs;

        // Queue a commmand to load the text and font properties.
        // It is best practice to always specify the property set.
        // Otherwise, all properties are returned on the object.
        context.load(paragraphs, 'text, font/size');

        // Synchronize the document state by executing the queued commands,
        // and return a promise to indicate task completion.
        return context.sync().then(function () {
            // Insert code that works with the paragraphs loaded by context.load().
        })
    })

    .catch(function (error) {
        console.log('Error: ' + JSON.stringify(error));
        if (error instanceof OfficeExtension.Error) {
            console.log('Debug info: ' + JSON.stringify(error.debugInfo));
        }
    });

    ```
  name: OfficeExtension.LoadOption
  fullName: OfficeExtension.LoadOption
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.OfficeExtension.LoadOption.expand
  - office.OfficeExtension.LoadOption.select
  - office.OfficeExtension.LoadOption.skip
  - office.OfficeExtension.LoadOption.top
- uid: office.OfficeExtension.LoadOption.expand
  summary: <span data-ttu-id="aa98c-109">Une chaîne délimitée par des virgules, ou un tableau de chaînes, qui spécifie les propriétés de navigation à charger.</span><span class="sxs-lookup"><span data-stu-id="aa98c-109">A comma-delimited string, or array of strings, that specifies the navigation properties to load.</span></span>
  name: expand
  fullName: expand
  langs:
  - typeScript
  type: property
  syntax:
    content: 'expand?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.select
  summary: <span data-ttu-id="aa98c-110">Une chaîne délimitée par des virgules, ou un tableau de chaînes, qui spécifie les propriétés à charger.</span><span class="sxs-lookup"><span data-stu-id="aa98c-110">A comma-delimited string, or array of strings, that specifies the properties to load.</span></span>
  name: select
  fullName: select
  langs:
  - typeScript
  type: property
  syntax:
    content: 'select?: string | string[];'
    return:
      type:
      - string | string[]
- uid: office.OfficeExtension.LoadOption.skip
  summary: <span data-ttu-id="aa98c-111">Utilisable uniquement sur les types de la collection.</span><span class="sxs-lookup"><span data-stu-id="aa98c-111">Only usable on collection types.</span></span> <span data-ttu-id="aa98c-112">Spécifie le nombre d’éléments dans la collection doivent être ignoré et non inclus dans le résultat.</span><span class="sxs-lookup"><span data-stu-id="aa98c-112">Specifies the number of items in the collection that are to be skipped and not included in the result.</span></span> <span data-ttu-id="aa98c-113">Si début est spécifié, le jeu de résultats démarre après l’ignorer le nombre spécifié d’éléments.</span><span class="sxs-lookup"><span data-stu-id="aa98c-113">If top is specified, the result set will start after skipping the specified number of items.</span></span>
  name: skip
  fullName: skip
  langs:
  - typeScript
  type: property
  syntax:
    content: 'skip?: number;'
    return:
      type:
      - number
- uid: office.OfficeExtension.LoadOption.top
  summary: <span data-ttu-id="aa98c-114">Utilisable uniquement sur les types de la collection.</span><span class="sxs-lookup"><span data-stu-id="aa98c-114">Only usable on collection types.</span></span> <span data-ttu-id="aa98c-115">Spécifie le nombre maximal d’éléments pouvant être inclus dans le résultat de la collection.</span><span class="sxs-lookup"><span data-stu-id="aa98c-115">Specifies the maximum number of collection items that can be included in the result.</span></span>
  name: top
  fullName: top
  langs:
  - typeScript
  type: property
  syntax:
    content: 'top?: number;'
    return:
      type:
      - number
      description: "\n#### <a name=\"examples\"></a><span data-ttu-id=\"aa98c-116\">範例</span><span class=\"sxs-lookup\"><span data-stu-id=\"aa98c-116\">Examples</span></span>\n\n```javascript\n// This OneNote example shows how to get the page title and indentation level\n// of the top five pages in the current section.\nOneNote.run(function (context) {\n    // Get the pages in the current section.\n    var pages = context.application.getActiveSection().pages;\n\n    // Queue a command to load the pages.           \n    pages.load({ \"select\":\"title,pageLevel\", \"top\":5, \"skip\":0 });\n    return context.sync()\n        .then(function() {\n            // Iterate through the collection of pages.    \n            $.each(pages.items, function(index, page) {\n                // Show some properties.\n                console.log(\"Page title: \" + page.title);\n                console.log(\"Indentation level: \" + page.pageLevel);\n            });\n        }).catch(function(error) {\n            console.log(\"Error: \" + error);\n            if (error instanceof OfficeExtension.Error) {\n                console.log(\"Debug info: \" + JSON.stringify(error.debugInfo));\n            }\n        })\n    });\n```"
