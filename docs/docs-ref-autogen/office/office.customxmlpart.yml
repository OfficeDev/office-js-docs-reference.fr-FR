### YamlMime:UniversalReference
items:
  - uid: office.Office.CustomXmlPart
    summary: 'Cet objet représente un seul objet CustomXMLPart d''une collection [Office. CustomXmlParts](xref:office.Office.CustomXmlParts) .'
    remarks: '**Hôtes**: Word'
    name: Office.CustomXmlPart
    fullName: Office.CustomXmlPart
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.CustomXmlPart.addHandlerAsync
      - office.Office.CustomXmlPart.addHandlerAsync_1
      - office.Office.CustomXmlPart.deleteAsync
      - office.Office.CustomXmlPart.deleteAsync_1
      - office.Office.CustomXmlPart.getNodesAsync
      - office.Office.CustomXmlPart.getNodesAsync_1
      - office.Office.CustomXmlPart.getXmlAsync
      - office.Office.CustomXmlPart.getXmlAsync_1
      - office.Office.CustomXmlPart.removeHandlerAsync
      - office.Office.CustomXmlPart.removeHandlerAsync_1
      - office.Office.CustomXmlPart.builtIn
      - office.Office.CustomXmlPart.id
      - office.Office.CustomXmlPart.namespaceManager
  - uid: office.Office.CustomXmlPart.addHandlerAsync
    summary: Ajoute un gestionnaire d'événements à l'objet à l'aide du type d'événement spécifié.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      Vous pouvez ajouter plusieurs gestionnaires d'événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d'événements soit unique.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Spécifie le type d’événement à ajouter. Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, et`Office.EventType.NodeReplaced`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: 'Fonction du gestionnaire d''événements à ajouter, dont le seul paramètre est de type [Office. propriété NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office. NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->ou [Office. NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)'
          type:
            - '(result: any) => void'
        - id: options
          description: 'Fournit une option permettant de conserver les données de contexte de n''importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.addHandlerAsync_1
    summary: Ajoute un gestionnaire d'événements à l'objet à l'aide du type d'événement spécifié.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      Vous pouvez ajouter plusieurs gestionnaires d'événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d'événements soit unique.

      #### <a name="examples"></a>Exemples

      ```javascript
      // To add an event handler for the NodeDeleted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeDeletedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeDeleted, function (eventArgs) {
                  write("A node has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeInserted event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeInsertedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeInserted, function (eventArgs) {
                  write("A node has been inserted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
      ```javascript
      // To add an event handler for the NodeReplaced event, use the addHandlerAsync method of the CustomXmlPart object.
      function addNodeReplacedEvent() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.addHandlerAsync(Office.EventType.NodeReplaced, function (eventArgs) {
                  write("A node has been replaced.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message;
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Spécifie le type d’événement à ajouter. Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, et`Office.EventType.NodeReplaced`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: 'Fonction du gestionnaire d''événements à ajouter, dont le seul paramètre est de type [Office. propriété NodeDeletedEventArgs](xref:office.Office.NodeDeletedEventArgs)<!-- -->, [Office. NodeInsertedEventArgs](xref:office.Office.NodeInsertedEventArgs)<!-- -->ou [Office. NodeReplacedEventArgs](xref:office.Office.NodeReplacedEventArgs)'
          type:
            - '(result: any) => void'
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.deleteAsync
    summary: Supprime la partie XML personnalisée.
    remarks: '**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
    name: 'deleteAsync(options, callback)'
    fullName: 'deleteAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Fournit une option permettant de conserver les données de contexte de n''importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.deleteAsync_1
    summary: Supprime la partie XML personnalisée.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      #### <a name="examples"></a>Exemples

      ```javascript
      function deleteXMLPart() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.deleteAsync(function (eventArgs) {
                  write("The XML Part has been deleted.");
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: deleteAsync(callback)
    fullName: deleteAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'deleteAsync(callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.getNodesAsync
    summary: Obtient de manière asynchrone les CustomXmlNodes de cette partie XML personnalisée qui correspondent au XPath spécifié.
    remarks: '**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
    name: 'getNodesAsync(xPath, options, callback)'
    fullName: 'getNodesAsync(xPath, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: Expression XPath qui spécifie les nœuds à retourner. Obligatoire.
          type:
            - string
        - id: options
          description: 'Fournit une option permettant de conserver les données de contexte de n''importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est un tableau d''objets CustomXmlNode qui représentent les nœuds spécifiés par l''expression XPath transmise au paramètre XPath.'
          type:
            - '(result: AsyncResult<CustomXmlNode[]>) => void'
  - uid: office.Office.CustomXmlPart.getNodesAsync_1
    summary: Obtient de manière asynchrone les CustomXmlNodes de cette partie XML personnalisée qui correspondent au XPath spécifié.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      #### <a name="examples"></a>Exemples

      ```javascript
      function showXmlNodeType() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getNodesAsync('*/*', function (nodeResults) {
                  for (i = 0; i < nodeResults.value.length; i++) {
                      var node = nodeResults.value[i];
                      write(node.nodeType);
                  }
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'getNodesAsync(xPath, callback)'
    fullName: 'getNodesAsync(xPath, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNodesAsync(xPath: string, callback?: (result: AsyncResult<CustomXmlNode[]>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: xPath
          description: Expression XPath qui spécifie les nœuds à retourner. Obligatoire.
          type:
            - string
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est un tableau d''objets CustomXmlNode qui représentent les nœuds spécifiés par l''expression XPath transmise au paramètre XPath.'
          type:
            - '(result: AsyncResult<CustomXmlNode[]>) => void'
  - uid: office.Office.CustomXmlPart.getXmlAsync
    summary: Obtient de manière asynchrone le code XML contenu dans cette partie XML personnalisée.
    remarks: '**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
    name: 'getXmlAsync(options, callback)'
    fullName: 'getXmlAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(options?: Office.AsyncContextOptions, callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: 'Fournit une option permettant de conserver les données de contexte de n''importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est une chaîne qui contient le code XML de l''objet CustomXMLPart référencé.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.CustomXmlPart.getXmlAsync_1
    summary: Obtient de manière asynchrone le code XML contenu dans cette partie XML personnalisée.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      #### <a name="examples"></a>Exemples

      ```javascript
      function showXMLPartInnerXML() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
              var xmlPart = result.value;
              xmlPart.getXmlAsync(function (eventArgs) {
                  write(eventArgs.value);
              });
          });
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getXmlAsync(callback)
    fullName: getXmlAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getXmlAsync(callback?: (result: AsyncResult<string>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est une chaîne qui contient le code XML de l''objet CustomXMLPart référencé.'
          type:
            - '(result: AsyncResult<string>) => void'
  - uid: office.Office.CustomXmlPart.removeHandlerAsync
    summary: Supprime un gestionnaire d'événements pour le type d'événement spécifié.
    remarks: '**Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)'
    name: 'removeHandlerAsync(eventType, handler, options, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Spécifie le type d’événement à supprimer. Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, et`Office.EventType.NodeReplaced`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: Nom du gestionnaire à supprimer.
          type:
            - '(result: any) => void'
        - id: options
          description: Fournit des options permettant de déterminer le gestionnaire d'événements ou les gestionnaires supprimés.
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.removeHandlerAsync_1
    summary: Supprime un gestionnaire d'événements pour le type d'événement spécifié.
    remarks: |-
      **Ensemble de conditions requises**: [CustomXmlParts](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#customxmlparts)

      #### <a name="examples"></a>Exemples

      ```javascript
      function removeNodeInsertedEventHandler() {
          Office.context.document.customXmlParts.getByIdAsync(
              "{3BC85265-09D6-4205-B665-8EB239A8B9A1}",
              function (result) {
                  var xmlPart = result.value;
                  xmlPart.removeHandlerAsync(Office.EventType.DataNodeInserted, {handler:myHandler});
          });
      }
      ```
    name: 'removeHandlerAsync(eventType, handler, callback)'
    fullName: 'removeHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, handler?: (result: any) => void, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Spécifie le type d’événement à supprimer. Pour un objet CustomXmlPart, le paramètre eventType peut être spécifié en tant que`Office.EventType.NodeDeleted`<!-- -->, `Office.EventType.NodeInserted`<!-- -->, et`Office.EventType.NodeReplaced`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: Nom du gestionnaire à supprimer.
          type:
            - '(result: any) => void'
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.CustomXmlPart.builtIn
    summary: 'True, si la partie XML personnalisée est intégrée; Sinon, false.'
    name: builtIn
    fullName: builtIn
    langs:
      - typeScript
    type: property
    syntax:
      content: 'builtIn: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          function showXMLPartBuiltIn() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.builtIn);
              });
          }

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.id
    summary: Obtient le GUID de CustomXMLPart.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          function showXMLPartBuiltId() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  write(xmlPart.id);
              });
          }
          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.CustomXmlPart.namespaceManager
    summary: 'Obtient l''ensemble des mappages de préfixes d''espace de noms ([Office. CustomXmlPrefixMappings](xref:office.Office.CustomXmlPrefixMappings)<!-- -->) utilisé sur le CustomXmlPart actif.'
    name: namespaceManager
    fullName: namespaceManager
    langs:
      - typeScript
    type: property
    syntax:
      content: 'namespaceManager: CustomXmlPrefixMappings;'
      return:
        type:
          - office.Office.CustomXmlPrefixMappings
        description: |-


          #### <a name="examples"></a>範例

          ```javascript
          function setXMLPartNamespaceManagerNamespace() {
              Office.context.document.customXmlParts.getByIdAsync(
                  "{3BC85265-09D6-4205-B665-8EB239A8B9A1}", function (result) {
                  var xmlPart = result.value;
                  xmlPart.namespaceManager.addNamespaceAsync("myPrefix", "myNamespace");
              });
          }
          ```