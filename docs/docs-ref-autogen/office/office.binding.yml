### YamlMime:UniversalReference
items:
  - uid: office.Office.Binding
    summary: |-
      Représente une liaison à une section du document.

      L’objet Binding expose les fonctionnalités détenues par toutes les liaisons, quel que soit leur type.

      L’objet Binding n’est jamais appelé directement. Il s’agit de la classe parente abstraite des objets qui représentent chaque type de liaison: [Office. MatrixBinding](xref:office.Office.MatrixBinding)<!-- -->, [Office. TableBinding](xref:office.Office.TableBinding)<!-- -->ou [Office. liaison TextBinding](xref:office.Office.TextBinding)<!-- -->. Ces trois objets héritent des méthodes getDataAsync et setDataAsync de l’objet Binding qui vous permettent d’interagir avec les données de la liaison. Elles héritent également des propriétés id et type pour l’interrogation des valeurs de propriétés correspondantes. En outre, les objets MatrixBinding et TableBinding exposent des méthodes supplémentaires pour les fonctionnalités relatives aux matrices et aux tableaux, par exemple le dénombrement des lignes et des colonnes.
    remarks: |-
      **Hôtes**: Excel, Word

      **Ensembles de conditions requises**:

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)
    name: Office.Binding
    fullName: Office.Binding
    langs:
      - typeScript
    type: interface
    package: office
    children:
      - office.Office.Binding.addHandlerAsync
      - office.Office.Binding.addHandlerAsync_1
      - office.Office.Binding.getDataAsync
      - office.Office.Binding.getDataAsync_1
      - office.Office.Binding.removeHandlerAsync
      - office.Office.Binding.removeHandlerAsync_1
      - office.Office.Binding.setDataAsync
      - office.Office.Binding.setDataAsync_1
      - office.Office.Binding.document
      - office.Office.Binding.id
      - office.Office.Binding.type
  - uid: office.Office.Binding.addHandlerAsync
    summary: 'Ajoute un gestionnaire d’événements à l’objet pour l’objet [Office. EventType spécifié.](xref:office.Office.EventType)<!-- -->. Les EventTypes prises `Office.EventType.BindingDataChanged` en charge sont et`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Ensemble de conditions requises**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Vous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.
    name: 'addHandlerAsync(eventType, handler, options, callback)'
    fullName: 'addHandlerAsync(eventType, handler, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, options?: Office.AsyncContextOptions, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Type d’événement. Pour les liaisons, il peut s'' `Office.EventType.BindingDataChanged` agir de ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: 'Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) ou [Office. propriété bindingselectionchangedeventargs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: options
          description: 'Fournit une option permettant de conserver les données de contexte de n’importe quel type, inchangées, pour une utilisation dans un rappel.'
          type:
            - office.Office.AsyncContextOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.addHandlerAsync_1
    summary: 'Ajoute un gestionnaire d’événements à l’objet pour l’objet [Office. EventType spécifié.](xref:office.Office.EventType)<!-- -->. Les EventTypes prises `Office.EventType.BindingDataChanged` en charge sont et`Office.EventType.BindingSelectionChanged`<!-- -->.'
    remarks: |-
      **Ensemble de conditions requises**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      Vous pouvez ajouter plusieurs gestionnaires d’événements pour le eventType spécifié à condition que le nom de chaque fonction de gestionnaire d’événements soit unique.

      #### <a name="examples"></a>Exemples

      ```javascript
      // The following code sample calls the select method of the Office object to access the binding
      // with ID "MyBinding", and then calls the addHandlerAsync method to add a handler function 
      // for the bindingDataChanged event of that binding.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingDataChanged, onBindingDataChanged);
      }

      function onBindingDataChanged(eventArgs) {
          write("Data has changed in binding: " + eventArgs.binding.id);
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
      ```javascript
      // To add an event handler for the BindingSelectionChanged event of a binding, 
      // use the addHandlerAsync method of the Binding object.
      // The event handler receives an argument of type BindingSelectionChangedEventArgs.
      function addEventHandlerToBinding() {
          Office.select("bindings#MyBinding").addHandlerAsync(
              Office.EventType.BindingSelectionChanged, onBindingSelectionChanged);
      }

      function onBindingSelectionChanged(eventArgs) {
          write(eventArgs.binding.id + " has been selected.");
      }
      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }
      ```
    name: 'addHandlerAsync(eventType, handler, callback)'
    fullName: 'addHandlerAsync(eventType, handler, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addHandlerAsync(eventType: Office.EventType, handler: any, callback?: (result: Office.AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Type d’événement. Pour les liaisons, il peut s'' `Office.EventType.BindingDataChanged` agir de ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - Office.EventType
        - id: handler
          description: 'Fonction du gestionnaire d’événements à ajouter, dont le seul paramètre est de type [Office. BindingDataChangedEventArgs](xref:office.Office.BindingDataChangedEventArgs) ou [Office. propriété bindingselectionchangedeventargs](xref:office.Office.BindingSelectionChangedEventArgs)<!-- -->.'
          type:
            - any
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: Office.AsyncResult<void>) => void'
  - uid: office.Office.Binding.getDataAsync
    summary: Retourne les données contenues dans la liaison.
    remarks: |-
      **Ensembles de conditions requises**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lorsque vous utilisez`Office.CoercionType.Html`<!-- -->),

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lorsque vous utilisez`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lorsque vous utilisez`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lorsque vous utilisez`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lorsque vous utilisez`Office.CoercionType.Text`<!-- -->)

      Lorsqu’elle est appelée à partir d’un MatrixBinding ou d’un TableBinding, la méthode getDataAsync renvoie un sous-ensemble des valeurs liées si les paramètres facultatifs startRow, ColonneDébut, rowCount et columnCount sont spécifiés (et qu’ils spécifient une plage contiguë et valide).
    name: 'getDataAsync(options, callback)'
    fullName: 'getDataAsync(options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(options?: GetBindingDataOptions, callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: options
          description: Fournit des options permettant d’obtenir les données dans une liaison.
          type:
            - office.Office.GetBindingDataOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est la valeur de la liaison spécifiée. Si le `coercionType` paramètre est spécifié (et que l’appel réussit), les données sont renvoyées au format décrit dans la rubrique d’énumération CoercionType.'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Binding.getDataAsync_1
    summary: Retourne les données contenues dans la liaison.
    remarks: |-
      **Ensembles de conditions requises**:

      - [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lorsque vous utilisez`Office.CoercionType.Html`<!-- -->)

      - [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)

      - [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lorsque vous utilisez`Office.CoercionType.Matrix`<!-- -->)

      - [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lorsque vous utilisez`Office.CoercionType.Ooxml`<!-- -->)

      - [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)

      - [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lorsque vous utilisez`Office.CoercionType.Table`<!-- -->)

      - [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)

      - [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lorsque vous utilisez`Office.CoercionType.Text`<!-- -->)

      Lorsqu’elle est appelée à partir d’un MatrixBinding ou d’un TableBinding, la méthode getDataAsync renvoie un sous-ensemble des valeurs liées si les paramètres facultatifs startRow, ColonneDébut, rowCount et columnCount sont spécifiés (et qu’ils spécifient une plage contiguë et valide).

      #### <a name="examples"></a>Exemples

      ```javascript
      function showBindingData() {
          Office.select("bindings#MyBinding").getDataAsync(function (asyncResult) {
              write(asyncResult.value)
          });
      }

      // Function that writes to a div with id='message' on the page.
      function write(message){
          document.getElementById('message').innerText += message; 
      }

      // There is an important difference in behavior between using the "table" and "matrix" coercionType with the
      // Binding.getDataAsync method, with respect to data formatted with header rows, as shown in the following
      // two examples. These code examples show event handler functions for the Binding.SelectionChanged event.

      // If you specify the "table" coercionType, the TableData.rows property ( result.value.rows in the following
      // code example) returns an array that contains only the body rows of the table. So, its 0th row will be the
      // first non-header row in the table.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'table', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value.rows[0][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }

      // However, if you specify the "matrix" coercionType, result.value in the following code example returns an array
      // that contains the table header in the 0th row. If the table header contains multiple rows, then these are all
      // included in the result.value matrix as separate rows before the table body rows are included.
      function selectionChanged(evtArgs) { 
          Office.select("bindings#TableTranslate").getDataAsync(
              { coercionType: 'matrix', 
                startRow: evtArgs.startRow, 
                startCol: 0, 
                rowCount: 1, 
                columnCount: 1 },  
              function (result) { 
                  if (result.status == 'succeeded') { 
                      write("Image to find: " + result.value[1][0]); 
                  } 
                  else 
                      write(result.error.message); 
          }); 
      }     
      // Function that writes to a div with id='message' on the page. 
      function write(message){ 
          document.getElementById('message').innerText += message; 
      }
      ```
    name: getDataAsync(callback)
    fullName: getDataAsync(callback)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataAsync<T>(callback?: (result: AsyncResult<T>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->. La `value` propriété du résultat est la valeur de la liaison spécifiée. Si le `coercionType` paramètre est spécifié (et que l’appel réussit), les données sont renvoyées au format décrit dans la rubrique d’énumération CoercionType.'
          type:
            - '(result: AsyncResult<T>) => void'
      typeParameters:
        - id: T
  - uid: office.Office.Binding.removeHandlerAsync
    summary: Supprime le gestionnaire spécifié de la liaison pour le type d’événement spécifié.
    remarks: '**Ensemble de conditions requises**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)'
    name: 'removeHandlerAsync(eventType, options, callback)'
    fullName: 'removeHandlerAsync(eventType, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, options?: RemoveHandlerOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Type d’événement. Pour les liaisons, il peut s'' `Office.EventType.BindingDataChanged` agir de ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - Office.EventType
        - id: options
          description: Fournit des options permettant de déterminer le gestionnaire d’événements ou les gestionnaires supprimés.
          type:
            - office.Office.RemoveHandlerOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.removeHandlerAsync_1
    summary: Supprime le gestionnaire spécifié de la liaison pour le type d’événement spécifié.
    remarks: |-
      **Ensemble de conditions requises**: [BindingEvents](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#bindingevents)

      #### <a name="examples"></a>Exemples

      ```javascript
      function removeEventHandlerFromBinding() {
          Office.select("bindings#MyBinding").removeHandlerAsync(
              Office.EventType.BindingDataChanged, {handler:onBindingDataChanged});
      }
      ```
    name: 'removeHandlerAsync(eventType, callback)'
    fullName: 'removeHandlerAsync(eventType, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'removeHandlerAsync(eventType: Office.EventType, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: eventType
          description: 'Type d’événement. Pour les liaisons, il peut s'' `Office.EventType.BindingDataChanged` agir de ou`Office.EventType.BindingSelectionChanged`<!-- -->.'
          type:
            - Office.EventType
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync
    summary: Écrit des données dans la section liée du document représenté par l’objet de liaison spécifié.
    remarks: "**Ensembles de conditions requises**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lorsque vous utilisez`Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lorsque vous utilisez`Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lorsque vous utilisez`Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lorsque vous utilisez`Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lorsque vous utilisez`Office.CoercionType.Text`<!-- -->)\n\nLa valeur transmise pour Data contient les données à écrire dans la liaison. Le type de valeur transmis détermine ce qui sera écrit, comme le décrit le tableau suivant.\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte brut ou tout élément pouvant être forcé en chaîne est écrit.</td> </tr> <tr> <td>Tableau de tableaux (« matrice »)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->. Pour écrire une seule colonne de trois lignes, transmettez un tableau comme suit:`[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</td> </tr> <tr> <td>Un `TableData` objet</td> <td>Un tableau avec des en-têtes est écrit.</td> </tr> </table>\n\nEn outre, ces actions (spécifiques aux applications) s’appliquent lors de l’écriture de données dans une liaison. Pour Word, les données spécifiées sont écrites dans la liaison comme suit:\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte spécifié est écrit.</td> </tr> <tr> <td>Tableau de tableaux («matrice») ou `TableData` objet</td> <td>Un tableau Word est écrit.</td> </tr> <tr> <td>HTML</td> <td>Le code HTML spécifié est écrit. Si le code HTML que vous écrivez n’est pas valide, Word ne déclenche aucune erreur. Word écrit autant de code HTML que possible et omet les données non valides.</td> </tr> <tr> <td>Office Open XML («\_Open XML\_»)</td> <td>Le code XML spécifié est écrit.</td> </tr> </table>\n\nPour Excel, le paramètre data spécifié est écrit sur la liaison comme suit\_:\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte spécifié est inséré en tant que valeur de la première cellule liée. Vous pouvez également spécifier une formule valide pour ajouter cette formule à la cellule liée. Par exemple, la définition du paramètre data sur `\"=SUM(A1:A5)\"` totalisera les valeurs de la plage spécifiée. Toutefois, après avoir défini une formule sur la cellule liée, vous ne pouvez pas lire la formule ajoutée (ni les formules préexistantes) à partir de la cellule liée. Si vous appelez la méthode Binding.getDataAsync sur la cellule liée pour en lire les données, la méthode peut renvoyer uniquement les données affichées dans la cellule (le résultat de la formule).</td> </tr> <tr> <td>Tableau de tableaux (\"matrix\") et la forme correspond exactement à la forme de la liaison spécifiée</td> <td>L’ensemble de lignes et de colonnes est écrit. Vous pouvez également spécifier un tableau de tableaux contenant des formules valides pour les ajouter aux cellules dépendantes. Par exemple, la définition de `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` données pour ajoutera ces deux formules à une liaison contenant deux cellules. Tout comme lorsque vous définissez une formule dans une cellule liée unique, vous ne pouvez pas lire les formules ajoutées (ou les formules préexistantes) de la `Binding.getDataAsync` liaison avec la méthode-elle renvoie uniquement les données affichées dans les cellules liées.</td> </tr> <tr> <td>Un `TableData` objet et la forme de la table correspond au tableau lié.</td> <td>L’ensemble spécifié de lignes et/ou d’en-têtes est écrit, si aucune autre donnée dans les cellules environnantes ne sera écrasée. **Remarque**: Si vous spécifiez des formules dans l’objet TableData que vous transmettez au paramètre *Data* , vous risquez de ne pas obtenir les résultats attendus en raison de la fonctionnalité «colonnes calculées» d’Excel, qui duplique automatiquement les formules dans une colonne. Pour contourner ce problème lorsque vous souhaitez écrire un paramètre *data* contenant des formules vers une table liée, spécifiez les données sous forme de tableau de tableaux (au lieu de les spécifier sous forme d’objet TableData) et définissez le paramètre *coercionType* sur Microsoft.Office.Matrix ou « matrix ».</td> </tr> </table>\n\nPour Excel sur le Web:\n\n- Le nombre total de cellules dans la valeur transmise au paramètre Data ne peut pas dépasser 20 000 dans un appel unique à cette méthode.\n\n- Le nombre de groupes de mise en forme transmis au paramètre cellFormat ne peut pas dépasser 100. Un groupe de mise en forme se compose d’un ensemble de mises en forme appliquées à une plage de cellules donnée.\n\nDans tous les autres cas, une erreur est retournée.\n\nLa méthode setDataAsync écrit des données dans un sous-ensemble d’une liaison de tableau ou de matrice si les paramètres facultatifs startRow et ColonneDébut sont spécifiés, et qu’ils spécifient une plage valide.\n\nDans la fonction de rappel passée à la méthode setDataAsync, vous pouvez utiliser les propriétés de l’objet AsyncResult pour renvoyer les informations suivantes.\n\n<table> <tr> <th>Propriété</th> <th>Utiliser pour...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Toujours renvoyer undefined car il n’existe aucun objet ou aucune donnée à récupérer.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Déterminer si l’opération a réussi ou échoué.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Accéder à un objet Error fournissant des informations sur l’erreur en cas d’échec de l’opération.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Élément de tout type défini par l’utilisateur qui est renvoyé dans l’objet AsyncResult sans être modifié.</td> </tr> </table>"
    name: 'setDataAsync(data, options, callback)'
    fullName: 'setDataAsync(data, options, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, options?: SetBindingDataOptions, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Données à définir dans la sélection actuelle. Types de données possibles par l’hôte:

            chaîne: Excel sur le Web et Windows, et Word sur le Web et Windows uniquement

            Tableau de tableaux: Excel et Word uniquement

            [Office. TableData](xref:office.Office.TableData)<!-- -->: Excel et Word uniquement

            HTML: Word sur le Web et Windows uniquement

            Office Open XML: Word uniquement
          type:
            - TableData | any
        - id: options
          description: Fournit des options de définition des données dans une liaison.
          type:
            - office.Office.SetBindingDataOptions
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.setDataAsync_1
    summary: Écrit des données dans la section liée du document représenté par l’objet de liaison spécifié.
    remarks: "**Ensembles de conditions requises**:\n\n- [HtmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#htmlcoercion) (lorsque vous utilisez`Office.CoercionType.Html`<!-- -->)\n\n- [MatrixBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixbindings)\n\n- [MatrixCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#matrixcoercion) (lorsque vous utilisez`Office.CoercionType.Matrix`<!-- -->)\n\n- [OoxmlCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#ooxmlcoercion) (lorsque vous utilisez`Office.CoercionType.Ooxml`<!-- -->)\n\n- [TableBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablebindings)\n\n- [TableCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#tablecoercion) (lorsque vous utilisez`Office.CoercionType.Table`<!-- -->)\n\n- [TextBindings](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textbindings)\n\n- [TextCoercion](https://docs.microsoft.com/office/dev/add-ins/reference/requirement-sets/office-add-in-requirement-sets#textcoercion) (lorsque vous utilisez`Office.CoercionType.Text`<!-- -->)\n\nLa valeur transmise pour Data contient les données à écrire dans la liaison. Le type de valeur transmis détermine ce qui sera écrit, comme le décrit le tableau suivant.\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte brut ou tout élément pouvant être forcé en chaîne est écrit.</td> </tr> <tr> <td>Tableau de tableaux (« matrice »)</td> <td>Tabular data without headers will be written. For example, to write data to three rows in two columns, you can pass an array like this: `[[\"R1C1\", \"R1C2\"], [\"R2C1\", \"R2C2\"], [\"R3C1\", \"R3C2\"]]`<!-- -->. Pour écrire une seule colonne de trois lignes, transmettez un tableau comme suit:`[[\"R1C1\"], [\"R2C1\"], [\"R3C1\"]]`<!-- -->.</td> </tr> <tr> <td>Un `TableData` objet</td> <td>Un tableau avec des en-têtes est écrit.</td> </tr> </table>\n\nEn outre, ces actions (spécifiques aux applications) s’appliquent lors de l’écriture de données dans une liaison. Pour Word, les données spécifiées sont écrites dans la liaison comme suit:\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte spécifié est écrit.</td> </tr> <tr> <td>Tableau de tableaux («matrice») ou `TableData` objet</td> <td>Un tableau Word est écrit.</td> </tr> <tr> <td>HTML</td> <td>Le code HTML spécifié est écrit. Si le code HTML que vous écrivez n’est pas valide, Word ne déclenche aucune erreur. Word écrit autant de code HTML que possible et omet les données non valides.</td> </tr> <tr> <td>Office Open XML («\_Open XML\_»)</td> <td>Le code XML spécifié est écrit.</td> </tr> </table>\n\nPour Excel, le paramètre data spécifié est écrit sur la liaison comme suit\_:\n\n<table> <tr> <th>`data`valeur</th> <th>Données écrites</th> </tr> <tr> <td>Une chaîne de caractère</td> <td>Le texte spécifié est inséré en tant que valeur de la première cellule liée. Vous pouvez également spécifier une formule valide pour ajouter cette formule à la cellule liée. Par exemple, la définition du paramètre data sur `\"=SUM(A1:A5)\"` totalisera les valeurs de la plage spécifiée. Toutefois, après avoir défini une formule sur la cellule liée, vous ne pouvez pas lire la formule ajoutée (ni les formules préexistantes) à partir de la cellule liée. Si vous appelez la méthode Binding.getDataAsync sur la cellule liée pour en lire les données, la méthode peut renvoyer uniquement les données affichées dans la cellule (le résultat de la formule).</td> </tr> <tr> <td>Tableau de tableaux (\"matrix\") et la forme correspond exactement à la forme de la liaison spécifiée</td> <td>L’ensemble de lignes et de colonnes est écrit. Vous pouvez également spécifier un tableau de tableaux contenant des formules valides pour les ajouter aux cellules dépendantes. Par exemple, la définition de `[[\"=SUM(A1:A5)\",\"=AVERAGE(A1:A5)\"]]` données pour ajoutera ces deux formules à une liaison contenant deux cellules. Tout comme lorsque vous définissez une formule dans une cellule liée unique, vous ne pouvez pas lire les formules ajoutées (ou les formules préexistantes) de la `Binding.getDataAsync` liaison avec la méthode-elle renvoie uniquement les données affichées dans les cellules liées.</td> </tr> <tr> <td>Un `TableData` objet et la forme de la table correspondent au tableau lié.</td> <td>L’ensemble spécifié de lignes et/ou d’en-têtes est écrit, si aucune autre donnée dans les cellules environnantes ne sera écrasée. **Remarque**: Si vous spécifiez des formules dans l’objet TableData que vous transmettez au paramètre *Data* , vous risquez de ne pas obtenir les résultats attendus en raison de la fonctionnalité «colonnes calculées» d’Excel, qui duplique automatiquement les formules dans une colonne. Pour contourner ce problème lorsque vous souhaitez écrire un paramètre *data* contenant des formules vers une table liée, spécifiez les données sous forme de tableau de tableaux (au lieu de les spécifier sous forme d’objet TableData) et définissez le paramètre *coercionType* sur Microsoft.Office.Matrix ou « matrix ».</td> </tr> </table>\n\nPour Excel sur le Web:\n\n- Le nombre total de cellules dans la valeur transmise au paramètre Data ne peut pas dépasser 20 000 dans un appel unique à cette méthode.\n\n- Le nombre de groupes de mise en forme transmis au paramètre cellFormat ne peut pas dépasser 100. Un groupe de mise en forme se compose d’un ensemble de mises en forme appliquées à une plage de cellules donnée.\n\nDans tous les autres cas, une erreur est retournée.\n\nLa méthode setDataAsync écrit des données dans un sous-ensemble d’une liaison de tableau ou de matrice si les paramètres facultatifs startRow et ColonneDébut sont spécifiés, et qu’ils spécifient une plage valide.\n\nDans la fonction de rappel passée à la méthode setDataAsync, vous pouvez utiliser les propriétés de l’objet AsyncResult pour renvoyer les informations suivantes.\n\n<table> <tr> <th>Propriété</th> <th>Utiliser pour...</th> </tr> <tr> <td>AsyncResult.value</td> <td>Toujours renvoyer undefined car il n’existe aucun objet ou aucune donnée à récupérer.</td> </tr> <tr> <td>AsyncResult.status</td> <td>Déterminer si l’opération a réussi ou échoué.</td> </tr> <tr> <td>AsyncResult.error</td> <td>Accéder à un objet Error fournissant des informations sur l’erreur en cas d’échec de l’opération.</td> </tr> <tr> <td>AsyncResult.asyncContext</td> <td>Élément de tout type défini par l’utilisateur qui est renvoyé dans l’objet AsyncResult sans être modifié.</td> </tr> </table>\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nfunction setBindingData() {\n    Office.select(\"bindings#MyBinding\").setDataAsync('Hello World!', function (asyncResult) { });\n}\n\n// Specifying the optional coercionType parameter lets you specify the kind of data you want to write to a binding.\n// For example, in Word if you want to write HTML to a text binding, you can specify the coercionType parameter \n// as \"html\" as shown in the following example, which uses HTML <b> tags to make \"Hello\" bold.\nfunction writeHtmlData() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        \"<b>Hello</b> World!\", {coercionType: \"html\"}, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        }\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In this example, the call to setDataAsync passes the data parameter as an array of arrays\n// (to create a single column of three rows), and specifies the data structure with the \n// coercionType parameter as a \"matrix\".\nfunction writeBoundDataMatrix() {\n    Office.select(\"bindings#myBinding\").setDataAsync(\n        [['Berlin'],['Munich'],['Duisburg']],{ coercionType: \"matrix\" }, function (asyncResult) {\n        if (asyncResult.status == \"failed\") {\n            write('Error: ' + asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n\n// In the writeBoundDataTable function in this example, the call to setDataAsync passes the data parameter \n// as a TableData object (to write three columns and three rows), and specifies the data structure\n// with the coercionType parameter as a \"table\".\n\n// In the updateTableData function, the call to setDataAsync again passes the data parameter as a TableData object,\n// but as a single column with a new header and three rows, to update the values in the last column \n// of the table created with the writeBoundDataTable function. The optional zero-based startColumn parameter \n// is specified as 2 to replace the values in the third column of the table.\nfunction writeBoundDataTable() {\n    // Create a TableData object.\n    var myTable = new Office.TableData();\n    myTable.headers = ['First Name', 'Last Name', 'Grade'];\n    myTable.rows = [['Kim', 'Abercrombie', 'A'], ['Junmin','Hao', 'C'],['Toni','Poe','B']];\n\n    // Set myTable in the binding.\n    Office.select(\"bindings#myBinding\").setDataAsync(myTable, { coercionType: \"table\" }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }\n    });\n}\n\n// Replace last column with different data.\nfunction updateTableData() {\n    var newTable = new Office.TableData();\n    newTable.headers = [\"Gender\"];\n    newTable.rows = [[\"M\"],[\"M\"],[\"F\"]];\n    Office.select(\"bindings#myBinding\").setDataAsync(newTable, { coercionType: \"table\", startColumn:2 }, \n        function (asyncResult) {\n            if (asyncResult.status == Office.AsyncResultStatus.Failed) {\n                write('Error: '+ asyncResult.error.message);\n        } else {\n            write('Bound data: ' + asyncResult.value);\n        }     \n    });   \n}\n\n// In this example, the following call passes two formatting groups to cellFormat.\nOffice.select(\"bindings#myBinding\").setDataAsync([['Berlin'],['Munich'],['Duisburg']],\n  {cellFormat:[{cells: {row: 1}, format: {fontColor: \"yellow\"}}, \n      {cells: {row: 3, column: 4}, format: {borderColor: \"white\", fontStyle: \"bold\"}}]}, \n  function (asyncResult){});\n```"
    name: 'setDataAsync(data, callback)'
    fullName: 'setDataAsync(data, callback)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDataAsync(data: TableData | any, callback?: (result: AsyncResult<void>) => void): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: data
          description: |-
            Données à définir dans la sélection actuelle. Types de données possibles par l’hôte:

            chaîne: Excel sur le Web et Windows, et Word sur le Web et Windows uniquement

            Tableau de tableaux: Excel et Word uniquement

            `TableData`<!-- -->: Excel et Word uniquement

            HTML: Word sur le Web et Windows uniquement

            Office Open XML: Word uniquement
          type:
            - TableData | any
        - id: callback
          description: 'Facultatif. Fonction appelée lorsque le rappel est renvoyé, dont le seul paramètre est de type [Office. AsyncResult](xref:office.Office.AsyncResult)<!-- -->.'
          type:
            - '(result: AsyncResult<void>) => void'
  - uid: office.Office.Binding.document
    summary: Obtient l’objet document associé à la liaison.
    name: document
    fullName: document
    langs:
      - typeScript
    type: property
    syntax:
      content: 'document: Office.Document;'
      return:
        type:
          - office.Office.Document
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.document.url);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.id
    summary: 'Chaîne qui identifie de manière unique cette liaison parmi les liaisons dans le même objet [Office. document](xref:office.Office.Document) .'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'id: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Exemples

          ```javascript
          Office.context.document.bindings.getByIdAsync("myBinding", function (asyncResult) {
              write(asyncResult.value.id);
          });

          // Function that writes to a div with id='message' on the page.
          function write(message){
              document.getElementById('message').innerText += message; 
          }
          ```
  - uid: office.Office.Binding.type
    summary: Obtient le type de la liaison.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'type: Office.BindingType;'
      return:
        type:
          - Office.BindingType
        description: |-


          #### <a name="examples"></a>範例

          ```javascript
          Office.context.document.bindings.getByIdAsync("MyBinding", function (asyncResult) { 
              write(asyncResult.value.type); 
          }) 

          // Function that writes to a div with id='message' on the page. 
          function write(message){ 
              document.getElementById('message').innerText += message;  
          }
          ```