### YamlMime:UniversalReference
ms.openlocfilehash: 8dad2299366e0fb0c764744075df847b2b5e4d51
ms.sourcegitcommit: d356f1545c328d4b59ce814fcab8191e4231f1dc
ms.translationtype: MT
ms.contentlocale: fr-FR
ms.lasthandoff: 02/13/2019
ms.locfileid: "29972875"
items:
- uid: office.Office.AddinCommands.Event
  summary: L’objet event est transmis en tant que paramètre aux fonctions de complément appelées par des boutons de commande sans interface utilisateur. Cet objet permet au complément d’identifier le bouton sur lequel l’utilisateur a cliqué et d’informer l’hôte que son traitement est terminé.
  remarks: >-
    <table><tr><td>Type de complément</td><td>De contenu, de volet de tâche, Outlook</td></tr>


    <tr><td>[Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restreinte</td></tr>


    <tr><td>[Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Composition ou lecture</td></tr></table>
  name: Office.AddinCommands.Event
  fullName: Office.AddinCommands.Event
  langs:
  - typeScript
  type: interface
  package: office
  children:
  - office.Office.AddinCommands.Event.completed
  - office.Office.AddinCommands.Event.source
- uid: office.Office.AddinCommands.Event.completed
  summary: >-
    Indique que le complément a terminé le traitement déclenché par le bouton de commande d’un complément ou par le gestionnaire d’événements.


    Cette méthode doit être appelée à la fin d’une fonction qui a été appelée par une commande de complément définie avec un élément Action avec un attribut xsi:type ayant la valeur ExecuteFunction. Appeler cette méthode indique au client hôte que la fonction est terminée et qu’il peut nettoyer les états figurant dans l’appel de la fonction. Par exemple, si l’utilisateur ferme Outlook avant l’appel de cette méthode, Outlook vous avertit qu’une fonction est en cours d’exécution.


    Cette méthode doit être appelée dans un gestionnaire d’événements, ajouté via la méthode Office.context.mailbox.addHandlerAsync à l’issue du traitement de l’événement.


    \[[Du jeu d’API : boîte aux lettres 1.3](/office/dev/add-ins/reference/javascript-api-for-office)\]
  remarks: >-
    <table><tr><td>[Niveau d’autorisation minimal](https://docs.microsoft.com/outlook/add-ins/understanding-outlook-add-in-permissions)</td><td>Restreinte</td></tr>


    <tr><td>[Mode Outlook applicable](https://docs.microsoft.com/outlook/add-ins/#extension-points)</td><td>Composition ou lecture</td></tr></table>


    **Informations de prise en charge**


    Un Y majuscule dans la matrice suivante indique que cette méthode est prise en charge dans l'application hôte Office correspondante. Une cellule vide indique que l'application hôte Office ne prend pas en charge cette méthode.


    Pour plus d’informations sur les exigences des applications et le serveur hôte Office, voir [Configuration requise pour exécuter des compléments Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hôtes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Bureau Windows </th><th> Office Online (dans un navigateur) </th><th> Office pour iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Outlook</strong></td><td> Y (boîte aux lettres 1.3) </td><td> </td><td> </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong>Word</strong></td><td> v </td><td> v </td><td> v </td></tr> </table>

    #### <a name="examples"></a>Exemples


    ```javascript

    function processItem (event) {
        // Do some processing

        event.completed();
    }


    // In the following example, the checkMessage function has

    // been registered as an event handler for ItemSend.

    function checkMessage(event) {
        // Get the item being sent
        var outgoingMsg = Office.context.mailbox.item;

        // Check if subject contains "BLOCK"
        outgoingMsg.subject.getAsync(function (result) {
            // Subject is in result.value
            if (result.value.indexOf('BLOCK') != -1) {
                // Value is found, stop send
                event.completed({allowEvent = false});
            } else {
                // Value wasn't found, allow send
                event.completed({allowEvent = true});
            }
        });
    }

    ```
  name: completed(options)
  fullName: completed(options)
  langs:
  - typeScript
  type: method
  syntax:
    content: 'completed(options?: any): void;'
    return:
      type:
      - void
      description: ''
    parameters:
    - id: options
      description: 'Facultatif. Littéral d’objet contenant une ou plusieurs des propriétés suivantes. allowEvent : une valeur de type boolean. Lorsque la méthode achevée est utilisée pour signaler l’achèvement d’un gestionnaire d’événements, que cette valeur indique de l’événement géré doit poursuivre l’exécution ou être annulée. Par exemple, un complément qui gère l’événement ItemSend peut définir allowEvent = false pour annuler l’envoi du message.'
      type:
      - any
- uid: office.Office.AddinCommands.Event.source
  summary: >-
    Informations sur le contrôle qui a déclenché l’appel de cette fonction.


    **Informations de prise en charge**


    Un Y majuscule dans la matrice suivante indique que cette propriété est prise en charge dans l'application hôte Office correspondante. Une cellule vide indique que l'application hôte Office ne prend pas en charge cette propriété.


    Pour plus d’informations sur les exigences des applications et le serveur hôte Office, voir [Configuration requise pour exécuter des compléments Office](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hôtes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Bureau Windows </th><th> Office Online (dans un navigateur) </th><th> Office pour iPad </th></tr> <tr><td><strong>Outlook</strong></td><td> Y (boîte aux lettres 1.3) </td><td> </td><td> </td></tr> </table>
  name: source
  fullName: source
  langs:
  - typeScript
  type: property
  syntax:
    content: source:Source;
    return:
      type:
      - office.Office.AddinCommands.Source
      description: "\n#### <a name=\"examples\"></a>範例\n\n```javascript\n// In this example, consider a button defined in an add-in manifest as follows:\n<Control xsi:type=\"Button\" id=\"eventTestButton\">\n    <Label resid=\"eventButtonLabel\" />\n    <Tooltip resid=\"eventButtonTooltip\" />\n    <Supertip>\n        <Title resid=\"eventSuperTipTitle\" />\n        <Description resid=\"eventSuperTipDescription\" />\n    </Supertip>\n    <Icon>\n        <bt:Image size=\"16\" resid=\"blue-icon-16\" />\n        <bt:Image size=\"32\" resid=\"blue-icon-32\" />\n        <bt:Image size=\"80\" resid=\"blue-icon-80\" />\n    </Icon>\n    <Action xsi:type=\"ExecuteFunction\">\n        <FunctionName>testEventObject</FunctionName>\n    </Action>\n</Control>\n// The button has an id attribute set to eventTestButton, and will invoke\n// the testEventObject function defined in the add-in.\n// That function looks like this:\nfunction testEventObject(event) {\n    // The event object implements the Event interface\n\n    // This value will be \"eventTestButton\"\n    var buttonId = event.source.id;\n\n    // Signal to the host app that processing is complete.\n    event.completed();\n}\n```\n```javascript\n// Function is used by two buttons:\n// button1 and button2\nfunction multiButton (event) {\n    // Check which button was clicked\n    var buttonId = event.source.id;\n\n    if (buttonId === 'button1') {\n        doButton1Action();\n    }\n    else {\n        doButton2Action();\n    }\n\n    event.completed();\n}\n```"
