### YamlMime:TSPackage
uid: office!
name: office
type: package
summary: ''
interfaces:
- office!Office.Actions:interface
- office!Office.AddBindingFromNamedItemOptions:interface
- office!Office.AddBindingFromPromptOptions:interface
- office!Office.AddBindingFromSelectionOptions:interface
- office!Office.Addin:interface
- office!Office.AddinCommands.Event:interface
- office!Office.AddinCommands.EventCompletedOptions:interface
- office!Office.AddinCommands.Source:interface
- office!Office.AsyncContextOptions:interface
- office!Office.AsyncResult:interface
- office!Office.Auth:interface
- office!Office.AuthOptions:interface
- office!Office.Binding:interface
- office!Office.BindingDataChangedEventArgs:interface
- office!Office.Bindings:interface
- office!Office.BindingSelectionChangedEventArgs:interface
- office!Office.Context:interface
- office!Office.ContextInformation:interface
- office!Office.Control:interface
- office!Office.CustomXmlNode:interface
- office!Office.CustomXmlPart:interface
- office!Office.CustomXmlParts:interface
- office!Office.CustomXmlPrefixMappings:interface
- office!Office.Dialog:interface
- office!Office.DialogOptions:interface
- office!Office.DialogParentMessageReceivedEventArgs:interface
- office!Office.Document:interface
- office!Office.DocumentSelectionChangedEventArgs:interface
- office!Office.Error:interface
- office!Office.File:interface
- office!Office.FileProperties:interface
- office!Office.GetBindingDataOptions:interface
- office!Office.GetFileOptions:interface
- office!Office.GetSelectedDataOptions:interface
- office!Office.GoToByIdOptions:interface
- office!Office.Group:interface
- office!Office.IPromiseConstructor:interface
- office!Office.MatrixBinding:interface
- office!Office.NodeDeletedEventArgs:interface
- office!Office.NodeInsertedEventArgs:interface
- office!Office.NodeReplacedEventArgs:interface
- office!Office.OfficeTheme:interface
- office!Office.RangeCoordinates:interface
- office!Office.RangeFormatConfiguration:interface
- office!Office.RemoveHandlerOptions:interface
- office!Office.RequirementSetSupport:interface
- office!Office.Ribbon:interface
- office!Office.RibbonUpdaterData:interface
- office!Office.SaveSettingsOptions:interface
- office!Office.SetBindingDataOptions:interface
- office!Office.SetSelectedDataOptions:interface
- office!Office.Settings:interface
- office!Office.SettingsChangedEventArgs:interface
- office!Office.Slice:interface
- office!Office.Tab:interface
- office!Office.TableBinding:interface
- office!Office.TextBinding:interface
- office!Office.UI:interface
- office!Office.VisibilityModeChangedMessage:interface
- office!OfficeExtension.DebugInfo:interface
- office!OfficeExtension.EmbeddedOptions:interface
- office!OfficeExtension.EventInfo:interface
- office!OfficeExtension.LoadOption:interface
- office!OfficeExtension.RequestContextDebugInfo:interface
- office!OfficeExtension.RequestUrlAndHeaderInfo:interface
- office!OfficeExtension.RunOptions:interface
- office!OfficeExtension.UpdateOptions:interface
enums:
- office!Office.ActiveView:enum
- office!Office.AsyncResultStatus:enum
- office!Office.BindingType:enum
- office!Office.CoercionType:enum
- office!Office.CustomXMLNodeType:enum
- office!Office.DocumentMode:enum
- office!Office.EventType:enum
- office!Office.FileType:enum
- office!Office.FilterType:enum
- office!Office.GoToType:enum
- office!Office.HostType:enum
- office!Office.Index:enum
- office!Office.InitializationReason:enum
- office!Office.PlatformType:enum
- office!Office.ProjectProjectFields:enum
- office!Office.ProjectResourceFields:enum
- office!Office.ProjectTaskFields:enum
- office!Office.ProjectViewTypes:enum
- office!Office.SelectionMode:enum
- office!Office.StartupBehavior:enum
- office!Office.Table:enum
- office!Office.ValueFormat:enum
- office!Office.VisibilityMode:enum
classes:
- office!Office.TableData:class
- office!OfficeExtension.ClientObject:class
- office!OfficeExtension.ClientRequestContext:class
- office!OfficeExtension.ClientResult:class
- office!OfficeExtension.EmbeddedSession:class
- office!OfficeExtension.Error:class
- office!OfficeExtension.ErrorCodes:class
- office!OfficeExtension.EventHandlerResult:class
- office!OfficeExtension.EventHandlers:class
- office!OfficeExtension.TrackedObjects:class
functions:
- name: Office.initialize(reason)
  uid: office!Office.initialize:function(1)
  package: office!
  summary: >-
    Se produit quand l’environnement d’exécution est chargé et que le complément est prêt à interagir avec l’application et le document hébergé.


    Le paramètre raison de la fonction d’initialisation de l’écoute d’événement renvoie une valeur d’éumération qui spécifie comment `InitializationReason` l’initialisation s’est produite. Un complément du volet Office ou de contenu peut être initialisé de deux façons :


    - L’utilisateur vient de l’insérer à partir de la section Des derniers ajouts utilisés de la liste de listes des applications dans l’onglet Insertion du ruban dans l’application hôte Office, ou à partir de la boîte de dialogue Insérer un module.


    - L’utilisateur a ouvert un document qui contient déjà le complément.


    *Remarque*: le paramètre raison de la fonction d’initialisation de l’écoute d’événements renvoie uniquement une valeur d’éumération pour les modules de volet de tâches et `InitializationReason` de contenu. Il ne retourne pas de valeur pour les Outlook de recherche.
  remarks: "**Détails concernant le support**\n\nUn Y majuscule dans la matrice suivante indique que cette méthode est prise en charge dans l'application hôte Office correspondante. Une cellule vide indique que l'application hôte Office ne prend pas en charge cette méthode.\n\nPour plus d’informations Office la Office des applications hôtes et du serveur, voir [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hôtes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Windows </th><th> Office navigateur web </th><th> Office sur iPad </th><th> Outlook sur les appareils mobiles </th><th> Office sur Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong>Outlook</strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> <tr><td><strong>Project</strong></td><td> v </td><td> </td><td> </td><td> </td><td> v </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> v </td></tr> </table>\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\n// You can use the value of the InitializationEnumeration to implement different logic for\n// when the add-in is first inserted versus when it is already part of the document.\n// The following example shows some simple logic that uses the value of the reason parameter\n// to display how the task pane or content add-in was initialized.\nOffice.initialize = function (reason) {\n    // Checks for the DOM to load using the jQuery ready function.\n    $(document).ready(function () {\n    // After the DOM is loaded, code specific to the add-in can run.\n    // Display initialization reason.\n    if (reason == \"inserted\")\n    write(\"The add-in was just inserted.\");\n\n    if (reason == \"documentOpened\")\n    write(\"The add-in is already part of the document.\");\n    });\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function initialize(reason: InitializationReason): void;'
    parameters:
    - id: reason
      description: Indique comment l’application a été initialisée.
      type: <xref uid="office!Office.InitializationReason:enum" />
    return:
      type: void
      description: ''
- name: Office.isSetSupported(name, minVersion)
  uid: office!Office.isSetSupported:function(1)
  package: office!
  summary: Vérifie si l’ensemble de conditions requises spécifié est pris en charge par l’application Office hôte.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function isSetSupported(name: string, minVersion?: string): boolean;'
    parameters:
    - id: name
      description: Définir le nom ; par exemple, « MatrixBindings ».
      type: string
    - id: minVersion
      description: Version minimale requise ; par exemple, « 1.4 ».
      type: string
    return:
      type: boolean
      description: ''
- name: Office.onReady(callback)
  uid: office!Office.onReady:function(1)
  package: office!
  summary: Garantit que les OFFICE JavaScript sont prêtes à être appelées par le module. Si l’infrastructure n’a pas encore été initialisée, le rappel ou la promesse attendra que l’hôte Office soit prêt à accepter les appels d’API. Notez que bien que cette API soit destinée à être utilisée à l’intérieur d’un Office, elle peut également être utilisée en dehors du module. Dans ce cas, une fois que Office.js détermine qu’il s’exécute en dehors d’une application hôte Office, il appelle le rappel et résout la promesse avec la valeur « null » pour l’hôte et la plateforme.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function onReady(callback?: (info: { host: HostType, platform: PlatformType }) => any): Promise<{ host: HostType, platform: PlatformType }>;'
    parameters:
    - id: callback
      description: Méthode de rappel facultative qui recevra les informations sur l’hôte et la plateforme. Sinon, au lieu d’utiliser un rappel, un add-in peut simplement attendre la résolution de la promesse renvoyée par la fonction.
      type: '(info: { host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }) =&gt; any'
    return:
      type: 'Promise&lt;{ host: <xref uid="office!Office.HostType:enum" />, platform: <xref uid="office!Office.PlatformType:enum" /> }&gt;'
      description: Promesse qui contient les informations sur l’hôte et la plateforme, une fois l’initialisation terminée.
- name: Office.select(expression, callback)
  uid: office!Office.select:function(1)
  package: office!
  summary: Renvoie une promesse d’un objet décrit dans l’expression. Le rappel est appelé uniquement en cas d’échec de la méthode.
  remarks: >-
    **Détails concernant le support**


    Un Y majuscule dans la matrice suivante indique que cette méthode est prise en charge dans l'application hôte Office correspondante. Une cellule vide indique que l'application hôte Office ne prend pas en charge cette méthode.


    Pour plus d’informations Office la Office des applications hôtes et du serveur, voir [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.


    *Hôtes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Windows </th><th> Office navigateur web </th><th> Office sur iPad </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> </td><td> v </td></tr> </table>


    #### <a name="examples"></a>Exemples


    ```javascript

    // The following code example uses the select method to retrieve a binding with the id "cities" from

    // the Bindings collection, and then calls the addHandlerAsync method to add an event handler for the

    // dataChanged event of the binding.

    function addBindingDataChangedEventHandler() {
        Office.select("bindings#cities", function onError(){}).addHandlerAsync(Office.EventType.BindingDataChanged,
        function (eventArgs) {
            doSomethingWithBinding(eventArgs.binding);
        });
    }

    ```
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function select(expression: string, callback?: (result: AsyncResult<any>) => void): Binding;'
    parameters:
    - id: expression
      description: Objet à récupérer. Exemple « bindings BindingName », récupère une promesse de liaison pour \# une liaison nommée « BindingName »
      type: string
    - id: callback
      description: Facultatif. Fonction qui est invoquée lors du retour du rappel, dont le seul paramètre est de type [Office. AsyncResult](xref:office!Office.AsyncResult:interface)<!-- -->.
      type: '(result: <xref uid="office!Office.AsyncResult:interface" />&lt;any&gt;) =&gt; void'
    return:
      type: <xref uid="office!Office.Binding:interface" />
      description: ''
- name: Office.useShortNamespace(useShortNamespace)
  uid: office!Office.useShortNamespace:function(1)
  package: office!
  summary: Fait bascule et se masque `Office` l’alias de l’espace `Microsoft.Office.WebExtension` de noms complet.
  remarks: "**Détails concernant le support**\n\nUn Y majuscule dans la matrice suivante indique que cette méthode est prise en charge dans l'application hôte Office correspondante. Une cellule vide indique que l'application hôte Office ne prend pas en charge cette méthode.\n\nPour plus d’informations Office la Office des applications hôtes et du serveur, voir [Requirements for running Office Add-ins](https://docs.microsoft.com/office/dev/add-ins/concepts/requirements-for-running-office-add-ins)<!-- -->.\n\n*Hôtes pris en charge par la plateforme* <table> <tr><th> </th><th> Office pour Windows </th><th> Office navigateur web </th><th> Office sur iPad </th><th> Outlook sur les appareils mobiles </th><th> Office sur Mac </th></tr> <tr><td><strong>Excel</strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Outlook</strong></td><td> v </td><td> v </td><td> </td><td> v </td><td> v </td></tr> <tr><td><strong>PowerPoint</strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> <tr><td><strong>Project</strong></td><td> v </td><td> </td><td> </td><td> </td><td> </td></tr> <tr><td><strong> Word </strong></td><td> v </td><td> v </td><td> v </td><td> </td><td> </td></tr> </table>\n\n#### <a name=\"examples\"></a>Exemples\n\n```javascript\nfunction startUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(true);\n    }\n    else {\n        Office.useShortNamespace(true);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\nfunction stopUsingShortNamespace() {\n    if (typeof Office === 'undefined') {\n        Microsoft.Office.WebExtension.useShortNamespace(false);\n    }\n    else {\n        Office.useShortNamespace(false);\n    }\n    write('Office alias is now ' + typeof Office);\n}\n\n// Function that writes to a div with id='message' on the page.\nfunction write(message){\n    document.getElementById('message').innerText += message; \n}\n```"
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'export function useShortNamespace(useShortNamespace: boolean): void;'
    parameters:
    - id: useShortNamespace
      description: True pour utiliser l’alias de raccourci ; Sinon, false pour la désactiver. La valeur par défaut est True.
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 07fccc1ffd769d68d64b0eba09b7211dfc159e61
  ms.sourcegitcommit: 5636507f201d29b24a904648908b485512d0ffaf
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 05/26/2021
  ms.locfileid: "52656786"
